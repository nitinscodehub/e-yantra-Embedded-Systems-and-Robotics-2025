
Experiment-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000ccc  00000d60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ccc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800218  00800218  00000d78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000194c  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef1  00000000  00000000  00002860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a85  00000000  00000000  00003751  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000041d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083e  00000000  00000000  000043e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b9  00000000  00000000  00004c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000055db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ec       	ldi	r30, 0xCC	; 204
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 32       	cpi	r26, 0x24	; 36
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	30 d2       	rcall	.+1120   	; 0x580 <main>
 120:	d3 c5       	rjmp	.+2982   	; 0xcc8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_port_config>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	87 60       	ori	r24, 0x07	; 7
 128:	87 b9       	out	0x07, r24	; 7
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	80 6f       	ori	r24, 0xF0	; 240
 12e:	87 b9       	out	0x07, r24	; 7
 130:	88 b1       	in	r24, 0x08	; 8
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 b9       	out	0x08, r24	; 8
 136:	88 b1       	in	r24, 0x08	; 8
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	08 95       	ret

0000013e <lcd_set_4bit>:
 13e:	86 e6       	ldi	r24, 0x66	; 102
 140:	9e e0       	ldi	r25, 0x0E	; 14
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x4>
 146:	00 00       	nop
 148:	40 98       	cbi	0x08, 0	; 8
 14a:	41 98       	cbi	0x08, 1	; 8
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	88 b9       	out	0x08, r24	; 8
 150:	42 9a       	sbi	0x08, 2	; 8
 152:	ef ef       	ldi	r30, 0xFF	; 255
 154:	f7 e4       	ldi	r31, 0x47	; 71
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_set_4bit+0x18>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_set_4bit+0x1e>
 15c:	00 00       	nop
 15e:	42 98       	cbi	0x08, 2	; 8
 160:	e6 e6       	ldi	r30, 0x66	; 102
 162:	fe e0       	ldi	r31, 0x0E	; 14
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_set_4bit+0x26>
 168:	00 00       	nop
 16a:	40 98       	cbi	0x08, 0	; 8
 16c:	41 98       	cbi	0x08, 1	; 8
 16e:	88 b9       	out	0x08, r24	; 8
 170:	42 9a       	sbi	0x08, 2	; 8
 172:	ef ef       	ldi	r30, 0xFF	; 255
 174:	f7 e4       	ldi	r31, 0x47	; 71
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x38>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_set_4bit+0x3e>
 17c:	00 00       	nop
 17e:	42 98       	cbi	0x08, 2	; 8
 180:	e6 e6       	ldi	r30, 0x66	; 102
 182:	fe e0       	ldi	r31, 0x0E	; 14
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x46>
 188:	00 00       	nop
 18a:	40 98       	cbi	0x08, 0	; 8
 18c:	41 98       	cbi	0x08, 1	; 8
 18e:	88 b9       	out	0x08, r24	; 8
 190:	42 9a       	sbi	0x08, 2	; 8
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	97 e4       	ldi	r25, 0x47	; 71
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x58>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_set_4bit+0x5e>
 19c:	00 00       	nop
 19e:	42 98       	cbi	0x08, 2	; 8
 1a0:	e6 e6       	ldi	r30, 0x66	; 102
 1a2:	fe e0       	ldi	r31, 0x0E	; 14
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x66>
 1a8:	00 00       	nop
 1aa:	40 98       	cbi	0x08, 0	; 8
 1ac:	41 98       	cbi	0x08, 1	; 8
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	42 9a       	sbi	0x08, 2	; 8
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	97 e4       	ldi	r25, 0x47	; 71
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0x7a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_set_4bit+0x80>
 1be:	00 00       	nop
 1c0:	42 98       	cbi	0x08, 2	; 8
 1c2:	08 95       	ret

000001c4 <lcd_wr_command>:
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	98 b9       	out	0x08, r25	; 8
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	28 2f       	mov	r18, r24
 1ce:	20 7f       	andi	r18, 0xF0	; 240
 1d0:	92 2b       	or	r25, r18
 1d2:	98 b9       	out	0x08, r25	; 8
 1d4:	40 98       	cbi	0x08, 0	; 8
 1d6:	41 98       	cbi	0x08, 1	; 8
 1d8:	42 9a       	sbi	0x08, 2	; 8
 1da:	ef ef       	ldi	r30, 0xFF	; 255
 1dc:	f7 e4       	ldi	r31, 0x47	; 71
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_wr_command+0x1a>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_wr_command+0x20>
 1e4:	00 00       	nop
 1e6:	42 98       	cbi	0x08, 2	; 8
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	98 b9       	out	0x08, r25	; 8
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	82 95       	swap	r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	89 2b       	or	r24, r25
 1f6:	88 b9       	out	0x08, r24	; 8
 1f8:	40 98       	cbi	0x08, 0	; 8
 1fa:	41 98       	cbi	0x08, 1	; 8
 1fc:	42 9a       	sbi	0x08, 2	; 8
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	97 e4       	ldi	r25, 0x47	; 71
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_wr_command+0x3e>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_wr_command+0x44>
 208:	00 00       	nop
 20a:	42 98       	cbi	0x08, 2	; 8
 20c:	08 95       	ret

0000020e <lcd_init>:
 20e:	97 df       	rcall	.-210    	; 0x13e <lcd_set_4bit>
 210:	86 e6       	ldi	r24, 0x66	; 102
 212:	9e e0       	ldi	r25, 0x0E	; 14
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init+0x6>
 218:	00 00       	nop
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	d3 df       	rcall	.-90     	; 0x1c4 <lcd_wr_command>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	d1 df       	rcall	.-94     	; 0x1c4 <lcd_wr_command>
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	cf df       	rcall	.-98     	; 0x1c4 <lcd_wr_command>
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	cd df       	rcall	.-102    	; 0x1c4 <lcd_wr_command>
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	cb cf       	rjmp	.-106    	; 0x1c4 <lcd_wr_command>
 22e:	08 95       	ret

00000230 <lcd_home>:
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	c8 cf       	rjmp	.-112    	; 0x1c4 <lcd_wr_command>
 234:	08 95       	ret

00000236 <lcd_cursor>:
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	69 f0       	breq	.+26     	; 0x254 <lcd_cursor+0x1e>
 23a:	18 f4       	brcc	.+6      	; 0x242 <lcd_cursor+0xc>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	31 f0       	breq	.+12     	; 0x24c <lcd_cursor+0x16>
 240:	08 95       	ret
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	59 f0       	breq	.+22     	; 0x25c <lcd_cursor+0x26>
 246:	84 30       	cpi	r24, 0x04	; 4
 248:	69 f0       	breq	.+26     	; 0x264 <lcd_cursor+0x2e>
 24a:	08 95       	ret
 24c:	8f e7       	ldi	r24, 0x7F	; 127
 24e:	86 0f       	add	r24, r22
 250:	b9 cf       	rjmp	.-142    	; 0x1c4 <lcd_wr_command>
 252:	08 95       	ret
 254:	8f eb       	ldi	r24, 0xBF	; 191
 256:	86 0f       	add	r24, r22
 258:	b5 cf       	rjmp	.-150    	; 0x1c4 <lcd_wr_command>
 25a:	08 95       	ret
 25c:	83 e9       	ldi	r24, 0x93	; 147
 25e:	86 0f       	add	r24, r22
 260:	b1 cf       	rjmp	.-158    	; 0x1c4 <lcd_wr_command>
 262:	08 95       	ret
 264:	83 ed       	ldi	r24, 0xD3	; 211
 266:	86 0f       	add	r24, r22
 268:	ad cf       	rjmp	.-166    	; 0x1c4 <lcd_wr_command>
 26a:	08 95       	ret

0000026c <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 26c:	cf 93       	push	r28
 26e:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 270:	e2 df       	rcall	.-60     	; 0x236 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 272:	88 b1       	in	r24, 0x08	; 8
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= temp;
 278:	88 b1       	in	r24, 0x08	; 8
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	89 2b       	or	r24, r25
 280:	88 b9       	out	0x08, r24	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 282:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 284:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 286:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	97 e4       	ldi	r25, 0x47	; 71
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_wr_char+0x20>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_wr_char+0x26>
 292:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 294:	42 98       	cbi	0x08, 2	; 8
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 296:	88 b1       	in	r24, 0x08	; 8
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= alpha_num_char;
 29c:	88 b1       	in	r24, 0x08	; 8
 29e:	c2 95       	swap	r28
 2a0:	c0 7f       	andi	r28, 0xF0	; 240
 2a2:	c8 2b       	or	r28, r24
 2a4:	c8 b9       	out	0x08, r28	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 2a6:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2a8:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2aa:	42 9a       	sbi	0x08, 2	; 8
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	97 e4       	ldi	r25, 0x47	; 71
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_wr_char+0x44>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <lcd_wr_char+0x4a>
 2b6:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2b8:	42 98       	cbi	0x08, 2	; 8
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	d8 2f       	mov	r29, r24
 2c8:	c6 2f       	mov	r28, r22
 2ca:	fa 01       	movw	r30, r20
	while(*str != '\0')
 2cc:	40 81       	ld	r20, Z
 2ce:	44 23       	and	r20, r20
 2d0:	61 f0       	breq	.+24     	; 0x2ea <lcd_string+0x2c>
 2d2:	8f 01       	movw	r16, r30
 2d4:	0f 5f       	subi	r16, 0xFF	; 255
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 2d8:	6c 2f       	mov	r22, r28
 2da:	8d 2f       	mov	r24, r29
 2dc:	c7 df       	rcall	.-114    	; 0x26c <lcd_wr_char>
		str++;
		column+=1;
 2de:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 2e0:	f8 01       	movw	r30, r16
 2e2:	41 91       	ld	r20, Z+
 2e4:	8f 01       	movw	r16, r30
 2e6:	41 11       	cpse	r20, r1
 2e8:	f7 cf       	rjmp	.-18     	; 0x2d8 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	08 95       	ret

000002f4 <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	d8 2f       	mov	r29, r24
 302:	c6 2f       	mov	r28, r22
 304:	7a 01       	movw	r14, r20
 306:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
 308:	96 df       	rcall	.-212    	; 0x236 <lcd_cursor>
	
	if (val < 0)
 30a:	ff 20       	and	r15, r15
 30c:	4c f4       	brge	.+18     	; 0x320 <lcd_numeric_value+0x2c>
	{
		val = 0 - val;
 30e:	f1 94       	neg	r15
 310:	e1 94       	neg	r14
 312:	f1 08       	sbc	r15, r1
		lcd_string(row, column, "-");
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	52 e0       	ldi	r21, 0x02	; 2
 318:	6c 2f       	mov	r22, r28
 31a:	8d 2f       	mov	r24, r29
 31c:	d0 df       	rcall	.-96     	; 0x2be <lcd_string>
		column+=1;
 31e:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
 320:	dd 23       	and	r29, r29
 322:	11 f0       	breq	.+4      	; 0x328 <lcd_numeric_value+0x34>
 324:	c1 11       	cpse	r28, r1
	{
		lcd_home();
 326:	02 c0       	rjmp	.+4      	; 0x32c <lcd_numeric_value+0x38>
 328:	83 df       	rcall	.-250    	; 0x230 <lcd_home>
	}
	
	else
	{
		lcd_cursor(row, column);
 32a:	03 c0       	rjmp	.+6      	; 0x332 <lcd_numeric_value+0x3e>
 32c:	6c 2f       	mov	r22, r28
 32e:	8d 2f       	mov	r24, r29
 330:	82 df       	rcall	.-252    	; 0x236 <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
 332:	05 30       	cpi	r16, 0x05	; 5
 334:	11 05       	cpc	r17, r1
 336:	09 f0       	breq	.+2      	; 0x33a <lcd_numeric_value+0x46>
	{
		million = val/10000+48;
 338:	ad c0       	rjmp	.+346    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 33a:	c7 01       	movw	r24, r14
 33c:	60 e1       	ldi	r22, 0x10	; 16
 33e:	77 e2       	ldi	r23, 0x27	; 39
 340:	b2 d1       	rcall	.+868    	; 0x6a6 <__divmodhi4>
 342:	ab 01       	movw	r20, r22
 344:	40 5d       	subi	r20, 0xD0	; 208
 346:	5f 4f       	sbci	r21, 0xFF	; 255
 348:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <__data_end+0x1>
 34c:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <__data_end>
		lcd_wr_char(row ,column, million);
 350:	6c 2f       	mov	r22, r28
 352:	8d 2f       	mov	r24, r29
		column+=1;
 354:	8b df       	rcall	.-234    	; 0x26c <lcd_wr_char>
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
	{
		temp = val/1000;
 356:	cf 5f       	subi	r28, 0xFF	; 255
 358:	c7 01       	movw	r24, r14
 35a:	68 ee       	ldi	r22, 0xE8	; 232
 35c:	73 e0       	ldi	r23, 0x03	; 3
 35e:	a3 d1       	rcall	.+838    	; 0x6a6 <__divmodhi4>
 360:	ab 01       	movw	r20, r22
 362:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <temp+0x1>
 366:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <temp>
		thousand = temp%10 + 48;
 36a:	9b 01       	movw	r18, r22
 36c:	ad ec       	ldi	r26, 0xCD	; 205
 36e:	bc ec       	ldi	r27, 0xCC	; 204
 370:	ad d1       	rcall	.+858    	; 0x6cc <__umulhisi3>
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	9c 01       	movw	r18, r24
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	82 0f       	add	r24, r18
 392:	93 1f       	adc	r25, r19
 394:	48 1b       	sub	r20, r24
 396:	59 0b       	sbc	r21, r25
 398:	40 5d       	subi	r20, 0xD0	; 208
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	50 93 23 02 	sts	0x0223, r21	; 0x800223 <thousand+0x1>
 3a0:	40 93 22 02 	sts	0x0222, r20	; 0x800222 <thousand>
		lcd_wr_char(row, column, thousand);
 3a4:	6c 2f       	mov	r22, r28
 3a6:	8d 2f       	mov	r24, r29
		column+=1;
 3a8:	61 df       	rcall	.-318    	; 0x26c <lcd_wr_char>
 3aa:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <lcd_numeric_value+0xc0>
 3ae:	03 30       	cpi	r16, 0x03	; 3
 3b0:	11 05       	cpc	r17, r1
	{
		temp = val/100;
 3b2:	59 f5       	brne	.+86     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3b4:	c7 01       	movw	r24, r14
 3b6:	64 e6       	ldi	r22, 0x64	; 100
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	75 d1       	rcall	.+746    	; 0x6a6 <__divmodhi4>
 3bc:	ab 01       	movw	r20, r22
 3be:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <temp+0x1>
 3c2:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <temp>
		hundred = temp%10 + 48;
 3c6:	9b 01       	movw	r18, r22
 3c8:	ad ec       	ldi	r26, 0xCD	; 205
 3ca:	bc ec       	ldi	r27, 0xCC	; 204
 3cc:	7f d1       	rcall	.+766    	; 0x6cc <__umulhisi3>
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	9c 01       	movw	r18, r24
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	82 0f       	add	r24, r18
 3ee:	93 1f       	adc	r25, r19
 3f0:	48 1b       	sub	r20, r24
 3f2:	59 0b       	sbc	r21, r25
 3f4:	40 5d       	subi	r20, 0xD0	; 208
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
 3f8:	50 93 1f 02 	sts	0x021F, r21	; 0x80021f <hundred+0x1>
 3fc:	40 93 1e 02 	sts	0x021E, r20	; 0x80021e <hundred>
		lcd_wr_char(row, column, hundred);
 400:	6c 2f       	mov	r22, r28
 402:	8d 2f       	mov	r24, r29
		column+=1;
 404:	33 df       	rcall	.-410    	; 0x26c <lcd_wr_char>
 406:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 2 || flag == 1)
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	02 30       	cpi	r16, 0x02	; 2
 40c:	11 05       	cpc	r17, r1
 40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		temp = val/10;
 410:	46 c0       	rjmp	.+140    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 412:	c7 01       	movw	r24, r14
 414:	6a e0       	ldi	r22, 0x0A	; 10
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	46 d1       	rcall	.+652    	; 0x6a6 <__divmodhi4>
 41a:	ab 01       	movw	r20, r22
 41c:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <temp+0x1>
 420:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <temp>
		tens = temp%10 + 48;
 424:	9b 01       	movw	r18, r22
 426:	ad ec       	ldi	r26, 0xCD	; 205
 428:	bc ec       	ldi	r27, 0xCC	; 204
 42a:	50 d1       	rcall	.+672    	; 0x6cc <__umulhisi3>
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	96 95       	lsr	r25
 436:	87 95       	ror	r24
 438:	9c 01       	movw	r18, r24
 43a:	22 0f       	add	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	82 0f       	add	r24, r18
 44c:	93 1f       	adc	r25, r19
 44e:	48 1b       	sub	r20, r24
 450:	59 0b       	sbc	r21, r25
 452:	40 5d       	subi	r20, 0xD0	; 208
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	50 93 1d 02 	sts	0x021D, r21	; 0x80021d <tens+0x1>
		lcd_wr_char(row, column, tens);
 45a:	40 93 1c 02 	sts	0x021C, r20	; 0x80021c <tens>
 45e:	6c 2f       	mov	r22, r28
		column+=1;
 460:	8d 2f       	mov	r24, r29
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
	{
		unit = val%10 + 48;
 462:	04 df       	rcall	.-504    	; 0x26c <lcd_wr_char>
 464:	cf 5f       	subi	r28, 0xFF	; 255
 466:	c7 01       	movw	r24, r14
 468:	6a e0       	ldi	r22, 0x0A	; 10
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	1c d1       	rcall	.+568    	; 0x6a6 <__divmodhi4>
 46e:	ac 01       	movw	r20, r24
 470:	40 5d       	subi	r20, 0xD0	; 208
 472:	5f 4f       	sbci	r21, 0xFF	; 255
 474:	50 93 21 02 	sts	0x0221, r21	; 0x800221 <unit+0x1>
		lcd_wr_char(row, column, unit);
 478:	40 93 20 02 	sts	0x0220, r20	; 0x800220 <unit>
 47c:	6c 2f       	mov	r22, r28
 47e:	8d 2f       	mov	r24, r29
		column+=1;
 480:	f5 de       	rcall	.-534    	; 0x26c <lcd_wr_char>
	}
	
	if(digits > 5)
 482:	cf 5f       	subi	r28, 0xFF	; 255
 484:	06 30       	cpi	r16, 0x06	; 6
 486:	11 05       	cpc	r17, r1
	{
		lcd_wr_char(row, column, 'E');
 488:	74 f0       	brlt	.+28     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 48a:	45 e4       	ldi	r20, 0x45	; 69
 48c:	6c 2f       	mov	r22, r28
 48e:	8d 2f       	mov	r24, r29
 490:	ed de       	rcall	.-550    	; 0x26c <lcd_wr_char>
		column+=1;
	}
 492:	09 c0       	rjmp	.+18     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		lcd_wr_char(row ,column, million);
		column+=1;
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
 494:	04 30       	cpi	r16, 0x04	; 4
 496:	11 05       	cpc	r17, r1
 498:	09 f0       	breq	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49a:	89 cf       	rjmp	.-238    	; 0x3ae <lcd_numeric_value+0xba>
 49c:	5d cf       	rjmp	.-326    	; 0x358 <lcd_numeric_value+0x64>
		lcd_wr_char(row, column, tens);
		column+=1;
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
 49e:	01 30       	cpi	r16, 0x01	; 1
 4a0:	11 05       	cpc	r17, r1
 4a2:	81 f7       	brne	.-32     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 4a4:	e0 cf       	rjmp	.-64     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	if(digits > 5)
	{
		lcd_wr_char(row, column, 'E');
		column+=1;
	}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	08 95       	ret

000004b4 <wl_sensors_port_config>:
	// read the appropriate ADC data register/s
	if((ADCSRA_reg & 0x10) ==0 );
	adc_8bit_data = ADCH_reg;
	
	return adc_8bit_data;
}
 4b4:	80 b3       	in	r24, 0x10	; 16
 4b6:	81 7f       	andi	r24, 0xF1	; 241
 4b8:	80 bb       	out	0x10, r24	; 16
 4ba:	81 b3       	in	r24, 0x11	; 17
 4bc:	81 7f       	andi	r24, 0xF1	; 241
 4be:	81 bb       	out	0x11, r24	; 17
 4c0:	08 95       	ret

000004c2 <ir_prox_sensors_port_config>:
 4c2:	80 b3       	in	r24, 0x10	; 16
 4c4:	8f 73       	andi	r24, 0x3F	; 63
 4c6:	80 bb       	out	0x10, r24	; 16
 4c8:	81 b3       	in	r24, 0x11	; 17
 4ca:	8f 73       	andi	r24, 0x3F	; 63
 4cc:	81 bb       	out	0x11, r24	; 17
 4ce:	e7 e0       	ldi	r30, 0x07	; 7
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	80 81       	ld	r24, Z
 4d4:	8e 7f       	andi	r24, 0xFE	; 254
 4d6:	80 83       	st	Z, r24
 4d8:	e8 e0       	ldi	r30, 0x08	; 8
 4da:	f1 e0       	ldi	r31, 0x01	; 1
 4dc:	80 81       	ld	r24, Z
 4de:	8e 7f       	andi	r24, 0xFE	; 254
 4e0:	80 83       	st	Z, r24
 4e2:	08 95       	ret

000004e4 <adc_init>:
 4e4:	ea e7       	ldi	r30, 0x7A	; 122
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	86 68       	ori	r24, 0x86	; 134
 4ec:	80 83       	st	Z, r24
 4ee:	80 81       	ld	r24, Z
 4f0:	86 78       	andi	r24, 0x86	; 134
 4f2:	80 83       	st	Z, r24
 4f4:	eb e7       	ldi	r30, 0x7B	; 123
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 7b       	andi	r24, 0xB0	; 176
 4fc:	80 83       	st	Z, r24
 4fe:	ec e7       	ldi	r30, 0x7C	; 124
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	80 64       	ori	r24, 0x40	; 64
 506:	80 83       	st	Z, r24
 508:	80 81       	ld	r24, Z
 50a:	80 76       	andi	r24, 0x60	; 96
 50c:	80 83       	st	Z, r24
 50e:	80 81       	ld	r24, Z
 510:	80 62       	ori	r24, 0x20	; 32
 512:	80 83       	st	Z, r24
 514:	80 b7       	in	r24, 0x30	; 48
 516:	80 68       	ori	r24, 0x80	; 128
 518:	80 bf       	out	0x30, r24	; 48
 51a:	08 95       	ret

0000051c <select_adc_channel>:
 51c:	88 30       	cpi	r24, 0x08	; 8
 51e:	28 f0       	brcs	.+10     	; 0x52a <select_adc_channel+0xe>
 520:	eb e7       	ldi	r30, 0x7B	; 123
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	90 81       	ld	r25, Z
 526:	98 60       	ori	r25, 0x08	; 8
 528:	90 83       	st	Z, r25
 52a:	87 70       	andi	r24, 0x07	; 7
 52c:	80 62       	ori	r24, 0x20	; 32
 52e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 532:	08 95       	ret

00000534 <start_adc>:
 534:	ea e7       	ldi	r30, 0x7A	; 122
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	80 64       	ori	r24, 0x40	; 64
 53c:	80 83       	st	Z, r24
 53e:	08 95       	ret

00000540 <check_adc_conversion_complete>:
 540:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 544:	86 fb       	bst	r24, 6
 546:	88 27       	eor	r24, r24
 548:	80 f9       	bld	r24, 0
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	89 27       	eor	r24, r25
 54e:	08 95       	ret

00000550 <reset_adc_config_registers>:
/**
 * @brief      Reset ADC config registers, ADCSRA, ADCSRB and ADMUX
 */
void reset_adc_config_registers(void){
	// << NOTE >> : Use Masking and Shift Operators here
	ADCSRA_reg |= (1 << ADIF_bit);
 550:	ea e7       	ldi	r30, 0x7A	; 122
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	80 61       	ori	r24, 0x10	; 16
 558:	80 83       	st	Z, r24
	ADCSRB_reg	= 0x00;
 55a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	ADMUX_reg = 0x00;
 55e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 562:	08 95       	ret

00000564 <convert_analog_channel_data>:
 *
 * @param[in]  sensor_channel_number   ADC channel number of sensor
 *
 * @return     8-bit digital data from the input sensor ADC channel
 */
unsigned char convert_analog_channel_data( unsigned char sensor_channel_number ){
 564:	cf 93       	push	r28
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function
	
	unsigned char adc_8bit_data;
	
	select_adc_channel( sensor_channel_number );
 566:	da df       	rcall	.-76     	; 0x51c <select_adc_channel>
	
	start_adc();
 568:	e5 df       	rcall	.-54     	; 0x534 <start_adc>
	
	while( !( check_adc_conversion_complete() ) );
 56a:	ea df       	rcall	.-44     	; 0x540 <check_adc_conversion_complete>
 56c:	88 23       	and	r24, r24
 56e:	e9 f3       	breq	.-6      	; 0x56a <convert_analog_channel_data+0x6>
 570:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	
	unsigned char adc_8bit_data;
	
	// read the appropriate ADC data register/s
	if((ADCSRA_reg & 0x10) ==0 );
	adc_8bit_data = ADCH_reg;
 574:	c0 91 79 00 	lds	r28, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
	while( !( check_adc_conversion_complete() ) );
	
	adc_8bit_data = read_adc_converted_data();
	
	reset_adc_config_registers();
 578:	eb df       	rcall	.-42     	; 0x550 <reset_adc_config_registers>
 57a:	8c 2f       	mov	r24, r28
	
	return adc_8bit_data;
}
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <main>:
 580:	cf 93       	push	r28
 * @brief      Main Function
 *
 * @details    First Initializes the three white line sensors and 3rd, 4th, 5th IR proximity sensors
 *			and displays the ADC converted data of all these sensors on LCD and sends ADC data of Center White Line sensor on UART
 */
int main(void) {
 582:	df 93       	push	r29
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	69 97       	sbiw	r28, 0x19	; 25
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	de bf       	out	0x3e, r29	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	cd bf       	out	0x3d, r28	; 61
	
	// << NOTE >> : You are not allowed to modify or change anything inside this function except a part of while loop
	
	wl_sensors_port_config();			// Initialize the three white line sensors
 594:	8f df       	rcall	.-226    	; 0x4b4 <wl_sensors_port_config>
	ir_prox_sensors_port_config();		// Initialize the 3rd, 4th and 5th IR proximity sensors
 596:	95 df       	rcall	.-214    	; 0x4c2 <ir_prox_sensors_port_config>
	
	adc_init();							// Initialize the ADC
 598:	a5 df       	rcall	.-182    	; 0x4e4 <adc_init>
	
	lcd_port_config();					// Initialize the LCD port
 59a:	c4 dd       	rcall	.-1144   	; 0x124 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 59c:	38 de       	rcall	.-912    	; 0x20e <lcd_init>
 59e:	8f e5       	ldi	r24, 0x5F	; 95
	
	uart_init(UBRR_VALUE);				// Initialize the UART
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	55 d0       	rcall	.+170    	; 0x64e <uart_init>
 5a4:	0f 2e       	mov	r0, r31
 5a6:	f2 e0       	ldi	r31, 0x02	; 2
		
		lcd_numeric_value(2, 1, ir_prox_3_sensor_data, 3);
		lcd_numeric_value(2, 5, ir_prox_4_sensor_data, 3);
		lcd_numeric_value(2, 9, ir_prox_5_sensor_data, 3);
		
		sprintf(tx_buffer, "Center WL data: %03d\n", center_wl_sensor_data);
 5a8:	cf 2e       	mov	r12, r31
 5aa:	f2 e0       	ldi	r31, 0x02	; 2
 5ac:	df 2e       	mov	r13, r31
 5ae:	f0 2d       	mov	r31, r0
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	7c 01       	movw	r14, r24
	{
		// ------------------------------- //
		
		// get the ADC converted data of the sensors from the appropriate channel number
		
		left_wl_sensor_data		= convert_analog_channel_data(left_wl_sensor_channel);
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	d5 df       	rcall	.-86     	; 0x564 <convert_analog_channel_data>
 5ba:	88 2e       	mov	r8, r24
		center_wl_sensor_data	= convert_analog_channel_data(center_wl_sensor_channel);
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	d2 df       	rcall	.-92     	; 0x564 <convert_analog_channel_data>
 5c0:	a8 2e       	mov	r10, r24
		right_wl_sensor_data	= convert_analog_channel_data(right_wl_sensor_channel);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	cf df       	rcall	.-98     	; 0x564 <convert_analog_channel_data>
 5c6:	98 2e       	mov	r9, r24
		
		ir_prox_3_sensor_data	= convert_analog_channel_data(ir_prox_3_sensor_channel);
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	cc df       	rcall	.-104    	; 0x564 <convert_analog_channel_data>
 5cc:	b8 2e       	mov	r11, r24
 5ce:	87 e0       	ldi	r24, 0x07	; 7
		ir_prox_4_sensor_data	= convert_analog_channel_data(ir_prox_4_sensor_channel);
 5d0:	c9 df       	rcall	.-110    	; 0x564 <convert_analog_channel_data>
 5d2:	08 2f       	mov	r16, r24
 5d4:	88 e0       	ldi	r24, 0x08	; 8
		ir_prox_5_sensor_data	= convert_analog_channel_data(ir_prox_5_sensor_channel);
 5d6:	c6 df       	rcall	.-116    	; 0x564 <convert_analog_channel_data>
 5d8:	18 2f       	mov	r17, r24
 5da:	48 2d       	mov	r20, r8
 5dc:	50 e0       	ldi	r21, 0x00	; 0
		
		// ------------------------------- //
		
		lcd_numeric_value(1, 1, left_wl_sensor_data, 3);
 5de:	23 e0       	ldi	r18, 0x03	; 3
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	86 de       	rcall	.-756    	; 0x2f4 <lcd_numeric_value>
 5e8:	4a 2d       	mov	r20, r10
 5ea:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(1, 5, center_wl_sensor_data, 3);
 5ec:	23 e0       	ldi	r18, 0x03	; 3
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	65 e0       	ldi	r22, 0x05	; 5
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	7f de       	rcall	.-770    	; 0x2f4 <lcd_numeric_value>
 5f6:	49 2d       	mov	r20, r9
 5f8:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(1, 9, right_wl_sensor_data, 3);
 5fa:	23 e0       	ldi	r18, 0x03	; 3
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	69 e0       	ldi	r22, 0x09	; 9
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	78 de       	rcall	.-784    	; 0x2f4 <lcd_numeric_value>
 604:	4b 2d       	mov	r20, r11
 606:	50 e0       	ldi	r21, 0x00	; 0
		
		lcd_numeric_value(2, 1, ir_prox_3_sensor_data, 3);
 608:	23 e0       	ldi	r18, 0x03	; 3
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	71 de       	rcall	.-798    	; 0x2f4 <lcd_numeric_value>
 612:	40 2f       	mov	r20, r16
 614:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(2, 5, ir_prox_4_sensor_data, 3);
 616:	23 e0       	ldi	r18, 0x03	; 3
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	65 e0       	ldi	r22, 0x05	; 5
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	6a de       	rcall	.-812    	; 0x2f4 <lcd_numeric_value>
 620:	41 2f       	mov	r20, r17
		lcd_numeric_value(2, 9, ir_prox_5_sensor_data, 3);
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	23 e0       	ldi	r18, 0x03	; 3
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	69 e0       	ldi	r22, 0x09	; 9
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	63 de       	rcall	.-826    	; 0x2f4 <lcd_numeric_value>
 62e:	1f 92       	push	r1
 630:	af 92       	push	r10
		
		sprintf(tx_buffer, "Center WL data: %03d\n", center_wl_sensor_data);
 632:	df 92       	push	r13
 634:	cf 92       	push	r12
 636:	ff 92       	push	r15
 638:	ef 92       	push	r14
 63a:	6b d0       	rcall	.+214    	; 0x712 <sprintf>
 63c:	c7 01       	movw	r24, r14
 63e:	25 d0       	rcall	.+74     	; 0x68a <uart_tx_string>
 640:	0f 90       	pop	r0
		uart_tx_string(tx_buffer);
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	b4 cf       	rjmp	.-152    	; 0x5b6 <main+0x36>

0000064e <uart_init>:
 * Example Call: uart_init();
 */
void uart_init (unsigned int ubbr_value)
{
	// In UCSRB_reg, disable all bits setting the Baud Rate
	UCSRB_reg	= 0x00;
 64e:	e1 ed       	ldi	r30, 0xD1	; 209
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	10 82       	st	Z, r1
	
	// In UBRRH_reg and UBRRL_reg, set the baud rate
	UBRRH_reg	= (unsigned char) ( ubbr_value >> 8 );
 654:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UBRRL_reg	= (unsigned char) ( ubbr_value );
 658:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	
	// In UCSRC_reg, select the Asynchronous USART mode and the character size to 8 bits
	UCSRC_reg	&= ~( ( 1 << UMSEL1_bit ) | ( 1 << UMSEL0_bit ) );
 65c:	a2 ed       	ldi	r26, 0xD2	; 210
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	8c 91       	ld	r24, X
 662:	8f 73       	andi	r24, 0x3F	; 63
 664:	8c 93       	st	X, r24
	UCSRC_reg	|= ( ( 1 << UCSZ1_bit ) | ( 1 << UCSZ0_bit ) );
 666:	8c 91       	ld	r24, X
 668:	86 60       	ori	r24, 0x06	; 6
 66a:	8c 93       	st	X, r24
	
	// In UCSRB_reg, enable the receiver and transmitter
	UCSRB_reg	|= ( ( 1 << TXEN_bit ) | ( 1 << RXEN_bit ) );
 66c:	80 81       	ld	r24, Z
 66e:	88 61       	ori	r24, 0x18	; 24
 670:	80 83       	st	Z, r24
	UCSRB_reg	&= ~( 1 << UCSZ2_bit );
 672:	80 81       	ld	r24, Z
 674:	8b 7f       	andi	r24, 0xFB	; 251
 676:	80 83       	st	Z, r24
 678:	08 95       	ret

0000067a <uart_tx>:
 * Logic: This function sends a character over the UART
 * Example Call: uart_tx();
 */
void uart_tx(char data)
{
	while( ( UCSRA_reg & ( 1 << UDRE_bit ) ) == 0x00 );				// waiting to transmit	
 67a:	e0 ed       	ldi	r30, 0xD0	; 208
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	90 81       	ld	r25, Z
 680:	95 ff       	sbrs	r25, 5
 682:	fd cf       	rjmp	.-6      	; 0x67e <uart_tx+0x4>
	UDR_reg	= data;
 684:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 688:	08 95       	ret

0000068a <uart_tx_string>:
 * Output: None
 * Logic: This function sends a string over the UART
 * Example Call: uart_tx_string();
 */
void uart_tx_string(char *data)
{
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	ec 01       	movw	r28, r24
	while(*data != '\0')
 690:	88 81       	ld	r24, Y
 692:	88 23       	and	r24, r24
 694:	29 f0       	breq	.+10     	; 0x6a0 <uart_tx_string+0x16>
 696:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_tx(*data);
 698:	f0 df       	rcall	.-32     	; 0x67a <uart_tx>
 * Logic: This function sends a string over the UART
 * Example Call: uart_tx_string();
 */
void uart_tx_string(char *data)
{
	while(*data != '\0')
 69a:	89 91       	ld	r24, Y+
 69c:	81 11       	cpse	r24, r1
 69e:	fc cf       	rjmp	.-8      	; 0x698 <uart_tx_string+0xe>
	{
		uart_tx(*data);
		data++;
	}
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <__divmodhi4>:
 6a6:	97 fb       	bst	r25, 7
 6a8:	07 2e       	mov	r0, r23
 6aa:	16 f4       	brtc	.+4      	; 0x6b0 <__divmodhi4+0xa>
 6ac:	00 94       	com	r0
 6ae:	06 d0       	rcall	.+12     	; 0x6bc <__divmodhi4_neg1>
 6b0:	77 fd       	sbrc	r23, 7
 6b2:	08 d0       	rcall	.+16     	; 0x6c4 <__divmodhi4_neg2>
 6b4:	1a d0       	rcall	.+52     	; 0x6ea <__udivmodhi4>
 6b6:	07 fc       	sbrc	r0, 7
 6b8:	05 d0       	rcall	.+10     	; 0x6c4 <__divmodhi4_neg2>
 6ba:	3e f4       	brtc	.+14     	; 0x6ca <__divmodhi4_exit>

000006bc <__divmodhi4_neg1>:
 6bc:	90 95       	com	r25
 6be:	81 95       	neg	r24
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__divmodhi4_neg2>:
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255

000006ca <__divmodhi4_exit>:
 6ca:	08 95       	ret

000006cc <__umulhisi3>:
 6cc:	a2 9f       	mul	r26, r18
 6ce:	b0 01       	movw	r22, r0
 6d0:	b3 9f       	mul	r27, r19
 6d2:	c0 01       	movw	r24, r0
 6d4:	a3 9f       	mul	r26, r19
 6d6:	70 0d       	add	r23, r0
 6d8:	81 1d       	adc	r24, r1
 6da:	11 24       	eor	r1, r1
 6dc:	91 1d       	adc	r25, r1
 6de:	b2 9f       	mul	r27, r18
 6e0:	70 0d       	add	r23, r0
 6e2:	81 1d       	adc	r24, r1
 6e4:	11 24       	eor	r1, r1
 6e6:	91 1d       	adc	r25, r1
 6e8:	08 95       	ret

000006ea <__udivmodhi4>:
 6ea:	aa 1b       	sub	r26, r26
 6ec:	bb 1b       	sub	r27, r27
 6ee:	51 e1       	ldi	r21, 0x11	; 17
 6f0:	07 c0       	rjmp	.+14     	; 0x700 <__udivmodhi4_ep>

000006f2 <__udivmodhi4_loop>:
 6f2:	aa 1f       	adc	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	a6 17       	cp	r26, r22
 6f8:	b7 07       	cpc	r27, r23
 6fa:	10 f0       	brcs	.+4      	; 0x700 <__udivmodhi4_ep>
 6fc:	a6 1b       	sub	r26, r22
 6fe:	b7 0b       	sbc	r27, r23

00000700 <__udivmodhi4_ep>:
 700:	88 1f       	adc	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	5a 95       	dec	r21
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__udivmodhi4_loop>
 708:	80 95       	com	r24
 70a:	90 95       	com	r25
 70c:	bc 01       	movw	r22, r24
 70e:	cd 01       	movw	r24, r26
 710:	08 95       	ret

00000712 <sprintf>:
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	2e 97       	sbiw	r28, 0x0e	; 14
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	0e 89       	ldd	r16, Y+22	; 0x16
 72c:	1f 89       	ldd	r17, Y+23	; 0x17
 72e:	86 e0       	ldi	r24, 0x06	; 6
 730:	8c 83       	std	Y+4, r24	; 0x04
 732:	1a 83       	std	Y+2, r17	; 0x02
 734:	09 83       	std	Y+1, r16	; 0x01
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	9f e7       	ldi	r25, 0x7F	; 127
 73a:	9e 83       	std	Y+6, r25	; 0x06
 73c:	8d 83       	std	Y+5, r24	; 0x05
 73e:	ae 01       	movw	r20, r28
 740:	46 5e       	subi	r20, 0xE6	; 230
 742:	5f 4f       	sbci	r21, 0xFF	; 255
 744:	68 8d       	ldd	r22, Y+24	; 0x18
 746:	79 8d       	ldd	r23, Y+25	; 0x19
 748:	ce 01       	movw	r24, r28
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	10 d0       	rcall	.+32     	; 0x76e <vfprintf>
 74e:	ef 81       	ldd	r30, Y+7	; 0x07
 750:	f8 85       	ldd	r31, Y+8	; 0x08
 752:	e0 0f       	add	r30, r16
 754:	f1 1f       	adc	r31, r17
 756:	10 82       	st	Z, r1
 758:	2e 96       	adiw	r28, 0x0e	; 14
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	f8 94       	cli
 75e:	de bf       	out	0x3e, r29	; 62
 760:	0f be       	out	0x3f, r0	; 63
 762:	cd bf       	out	0x3d, r28	; 61
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <vfprintf>:
 76e:	2f 92       	push	r2
 770:	3f 92       	push	r3
 772:	4f 92       	push	r4
 774:	5f 92       	push	r5
 776:	6f 92       	push	r6
 778:	7f 92       	push	r7
 77a:	8f 92       	push	r8
 77c:	9f 92       	push	r9
 77e:	af 92       	push	r10
 780:	bf 92       	push	r11
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	2b 97       	sbiw	r28, 0x0b	; 11
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	6c 01       	movw	r12, r24
 7a4:	7b 01       	movw	r14, r22
 7a6:	8a 01       	movw	r16, r20
 7a8:	fc 01       	movw	r30, r24
 7aa:	17 82       	std	Z+7, r1	; 0x07
 7ac:	16 82       	std	Z+6, r1	; 0x06
 7ae:	83 81       	ldd	r24, Z+3	; 0x03
 7b0:	81 ff       	sbrs	r24, 1
 7b2:	bf c1       	rjmp	.+894    	; 0xb32 <vfprintf+0x3c4>
 7b4:	ce 01       	movw	r24, r28
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	3c 01       	movw	r6, r24
 7ba:	f6 01       	movw	r30, r12
 7bc:	93 81       	ldd	r25, Z+3	; 0x03
 7be:	f7 01       	movw	r30, r14
 7c0:	93 fd       	sbrc	r25, 3
 7c2:	85 91       	lpm	r24, Z+
 7c4:	93 ff       	sbrs	r25, 3
 7c6:	81 91       	ld	r24, Z+
 7c8:	7f 01       	movw	r14, r30
 7ca:	88 23       	and	r24, r24
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <vfprintf+0x62>
 7ce:	ad c1       	rjmp	.+858    	; 0xb2a <vfprintf+0x3bc>
 7d0:	85 32       	cpi	r24, 0x25	; 37
 7d2:	39 f4       	brne	.+14     	; 0x7e2 <vfprintf+0x74>
 7d4:	93 fd       	sbrc	r25, 3
 7d6:	85 91       	lpm	r24, Z+
 7d8:	93 ff       	sbrs	r25, 3
 7da:	81 91       	ld	r24, Z+
 7dc:	7f 01       	movw	r14, r30
 7de:	85 32       	cpi	r24, 0x25	; 37
 7e0:	21 f4       	brne	.+8      	; 0x7ea <vfprintf+0x7c>
 7e2:	b6 01       	movw	r22, r12
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	d6 d1       	rcall	.+940    	; 0xb94 <fputc>
 7e8:	e8 cf       	rjmp	.-48     	; 0x7ba <vfprintf+0x4c>
 7ea:	91 2c       	mov	r9, r1
 7ec:	21 2c       	mov	r2, r1
 7ee:	31 2c       	mov	r3, r1
 7f0:	ff e1       	ldi	r31, 0x1F	; 31
 7f2:	f3 15       	cp	r31, r3
 7f4:	d8 f0       	brcs	.+54     	; 0x82c <vfprintf+0xbe>
 7f6:	8b 32       	cpi	r24, 0x2B	; 43
 7f8:	79 f0       	breq	.+30     	; 0x818 <vfprintf+0xaa>
 7fa:	38 f4       	brcc	.+14     	; 0x80a <vfprintf+0x9c>
 7fc:	80 32       	cpi	r24, 0x20	; 32
 7fe:	79 f0       	breq	.+30     	; 0x81e <vfprintf+0xb0>
 800:	83 32       	cpi	r24, 0x23	; 35
 802:	a1 f4       	brne	.+40     	; 0x82c <vfprintf+0xbe>
 804:	23 2d       	mov	r18, r3
 806:	20 61       	ori	r18, 0x10	; 16
 808:	1d c0       	rjmp	.+58     	; 0x844 <vfprintf+0xd6>
 80a:	8d 32       	cpi	r24, 0x2D	; 45
 80c:	61 f0       	breq	.+24     	; 0x826 <vfprintf+0xb8>
 80e:	80 33       	cpi	r24, 0x30	; 48
 810:	69 f4       	brne	.+26     	; 0x82c <vfprintf+0xbe>
 812:	23 2d       	mov	r18, r3
 814:	21 60       	ori	r18, 0x01	; 1
 816:	16 c0       	rjmp	.+44     	; 0x844 <vfprintf+0xd6>
 818:	83 2d       	mov	r24, r3
 81a:	82 60       	ori	r24, 0x02	; 2
 81c:	38 2e       	mov	r3, r24
 81e:	e3 2d       	mov	r30, r3
 820:	e4 60       	ori	r30, 0x04	; 4
 822:	3e 2e       	mov	r3, r30
 824:	2a c0       	rjmp	.+84     	; 0x87a <vfprintf+0x10c>
 826:	f3 2d       	mov	r31, r3
 828:	f8 60       	ori	r31, 0x08	; 8
 82a:	1d c0       	rjmp	.+58     	; 0x866 <vfprintf+0xf8>
 82c:	37 fc       	sbrc	r3, 7
 82e:	2d c0       	rjmp	.+90     	; 0x88a <vfprintf+0x11c>
 830:	20 ed       	ldi	r18, 0xD0	; 208
 832:	28 0f       	add	r18, r24
 834:	2a 30       	cpi	r18, 0x0A	; 10
 836:	40 f0       	brcs	.+16     	; 0x848 <vfprintf+0xda>
 838:	8e 32       	cpi	r24, 0x2E	; 46
 83a:	b9 f4       	brne	.+46     	; 0x86a <vfprintf+0xfc>
 83c:	36 fc       	sbrc	r3, 6
 83e:	75 c1       	rjmp	.+746    	; 0xb2a <vfprintf+0x3bc>
 840:	23 2d       	mov	r18, r3
 842:	20 64       	ori	r18, 0x40	; 64
 844:	32 2e       	mov	r3, r18
 846:	19 c0       	rjmp	.+50     	; 0x87a <vfprintf+0x10c>
 848:	36 fe       	sbrs	r3, 6
 84a:	06 c0       	rjmp	.+12     	; 0x858 <vfprintf+0xea>
 84c:	8a e0       	ldi	r24, 0x0A	; 10
 84e:	98 9e       	mul	r9, r24
 850:	20 0d       	add	r18, r0
 852:	11 24       	eor	r1, r1
 854:	92 2e       	mov	r9, r18
 856:	11 c0       	rjmp	.+34     	; 0x87a <vfprintf+0x10c>
 858:	ea e0       	ldi	r30, 0x0A	; 10
 85a:	2e 9e       	mul	r2, r30
 85c:	20 0d       	add	r18, r0
 85e:	11 24       	eor	r1, r1
 860:	22 2e       	mov	r2, r18
 862:	f3 2d       	mov	r31, r3
 864:	f0 62       	ori	r31, 0x20	; 32
 866:	3f 2e       	mov	r3, r31
 868:	08 c0       	rjmp	.+16     	; 0x87a <vfprintf+0x10c>
 86a:	8c 36       	cpi	r24, 0x6C	; 108
 86c:	21 f4       	brne	.+8      	; 0x876 <vfprintf+0x108>
 86e:	83 2d       	mov	r24, r3
 870:	80 68       	ori	r24, 0x80	; 128
 872:	38 2e       	mov	r3, r24
 874:	02 c0       	rjmp	.+4      	; 0x87a <vfprintf+0x10c>
 876:	88 36       	cpi	r24, 0x68	; 104
 878:	41 f4       	brne	.+16     	; 0x88a <vfprintf+0x11c>
 87a:	f7 01       	movw	r30, r14
 87c:	93 fd       	sbrc	r25, 3
 87e:	85 91       	lpm	r24, Z+
 880:	93 ff       	sbrs	r25, 3
 882:	81 91       	ld	r24, Z+
 884:	7f 01       	movw	r14, r30
 886:	81 11       	cpse	r24, r1
 888:	b3 cf       	rjmp	.-154    	; 0x7f0 <vfprintf+0x82>
 88a:	98 2f       	mov	r25, r24
 88c:	9f 7d       	andi	r25, 0xDF	; 223
 88e:	95 54       	subi	r25, 0x45	; 69
 890:	93 30       	cpi	r25, 0x03	; 3
 892:	28 f4       	brcc	.+10     	; 0x89e <vfprintf+0x130>
 894:	0c 5f       	subi	r16, 0xFC	; 252
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	9f e3       	ldi	r25, 0x3F	; 63
 89a:	99 83       	std	Y+1, r25	; 0x01
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <vfprintf+0x14a>
 89e:	83 36       	cpi	r24, 0x63	; 99
 8a0:	31 f0       	breq	.+12     	; 0x8ae <vfprintf+0x140>
 8a2:	83 37       	cpi	r24, 0x73	; 115
 8a4:	71 f0       	breq	.+28     	; 0x8c2 <vfprintf+0x154>
 8a6:	83 35       	cpi	r24, 0x53	; 83
 8a8:	09 f0       	breq	.+2      	; 0x8ac <vfprintf+0x13e>
 8aa:	55 c0       	rjmp	.+170    	; 0x956 <vfprintf+0x1e8>
 8ac:	20 c0       	rjmp	.+64     	; 0x8ee <vfprintf+0x180>
 8ae:	f8 01       	movw	r30, r16
 8b0:	80 81       	ld	r24, Z
 8b2:	89 83       	std	Y+1, r24	; 0x01
 8b4:	0e 5f       	subi	r16, 0xFE	; 254
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	88 24       	eor	r8, r8
 8ba:	83 94       	inc	r8
 8bc:	91 2c       	mov	r9, r1
 8be:	53 01       	movw	r10, r6
 8c0:	12 c0       	rjmp	.+36     	; 0x8e6 <vfprintf+0x178>
 8c2:	28 01       	movw	r4, r16
 8c4:	f2 e0       	ldi	r31, 0x02	; 2
 8c6:	4f 0e       	add	r4, r31
 8c8:	51 1c       	adc	r5, r1
 8ca:	f8 01       	movw	r30, r16
 8cc:	a0 80       	ld	r10, Z
 8ce:	b1 80       	ldd	r11, Z+1	; 0x01
 8d0:	36 fe       	sbrs	r3, 6
 8d2:	03 c0       	rjmp	.+6      	; 0x8da <vfprintf+0x16c>
 8d4:	69 2d       	mov	r22, r9
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <vfprintf+0x170>
 8da:	6f ef       	ldi	r22, 0xFF	; 255
 8dc:	7f ef       	ldi	r23, 0xFF	; 255
 8de:	c5 01       	movw	r24, r10
 8e0:	4e d1       	rcall	.+668    	; 0xb7e <strnlen>
 8e2:	4c 01       	movw	r8, r24
 8e4:	82 01       	movw	r16, r4
 8e6:	f3 2d       	mov	r31, r3
 8e8:	ff 77       	andi	r31, 0x7F	; 127
 8ea:	3f 2e       	mov	r3, r31
 8ec:	15 c0       	rjmp	.+42     	; 0x918 <vfprintf+0x1aa>
 8ee:	28 01       	movw	r4, r16
 8f0:	22 e0       	ldi	r18, 0x02	; 2
 8f2:	42 0e       	add	r4, r18
 8f4:	51 1c       	adc	r5, r1
 8f6:	f8 01       	movw	r30, r16
 8f8:	a0 80       	ld	r10, Z
 8fa:	b1 80       	ldd	r11, Z+1	; 0x01
 8fc:	36 fe       	sbrs	r3, 6
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <vfprintf+0x198>
 900:	69 2d       	mov	r22, r9
 902:	70 e0       	ldi	r23, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <vfprintf+0x19c>
 906:	6f ef       	ldi	r22, 0xFF	; 255
 908:	7f ef       	ldi	r23, 0xFF	; 255
 90a:	c5 01       	movw	r24, r10
 90c:	2d d1       	rcall	.+602    	; 0xb68 <strnlen_P>
 90e:	4c 01       	movw	r8, r24
 910:	f3 2d       	mov	r31, r3
 912:	f0 68       	ori	r31, 0x80	; 128
 914:	3f 2e       	mov	r3, r31
 916:	82 01       	movw	r16, r4
 918:	33 fc       	sbrc	r3, 3
 91a:	19 c0       	rjmp	.+50     	; 0x94e <vfprintf+0x1e0>
 91c:	82 2d       	mov	r24, r2
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	88 16       	cp	r8, r24
 922:	99 06       	cpc	r9, r25
 924:	a0 f4       	brcc	.+40     	; 0x94e <vfprintf+0x1e0>
 926:	b6 01       	movw	r22, r12
 928:	80 e2       	ldi	r24, 0x20	; 32
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	33 d1       	rcall	.+614    	; 0xb94 <fputc>
 92e:	2a 94       	dec	r2
 930:	f5 cf       	rjmp	.-22     	; 0x91c <vfprintf+0x1ae>
 932:	f5 01       	movw	r30, r10
 934:	37 fc       	sbrc	r3, 7
 936:	85 91       	lpm	r24, Z+
 938:	37 fe       	sbrs	r3, 7
 93a:	81 91       	ld	r24, Z+
 93c:	5f 01       	movw	r10, r30
 93e:	b6 01       	movw	r22, r12
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	28 d1       	rcall	.+592    	; 0xb94 <fputc>
 944:	21 10       	cpse	r2, r1
 946:	2a 94       	dec	r2
 948:	21 e0       	ldi	r18, 0x01	; 1
 94a:	82 1a       	sub	r8, r18
 94c:	91 08       	sbc	r9, r1
 94e:	81 14       	cp	r8, r1
 950:	91 04       	cpc	r9, r1
 952:	79 f7       	brne	.-34     	; 0x932 <vfprintf+0x1c4>
 954:	e1 c0       	rjmp	.+450    	; 0xb18 <vfprintf+0x3aa>
 956:	84 36       	cpi	r24, 0x64	; 100
 958:	11 f0       	breq	.+4      	; 0x95e <vfprintf+0x1f0>
 95a:	89 36       	cpi	r24, 0x69	; 105
 95c:	39 f5       	brne	.+78     	; 0x9ac <vfprintf+0x23e>
 95e:	f8 01       	movw	r30, r16
 960:	37 fe       	sbrs	r3, 7
 962:	07 c0       	rjmp	.+14     	; 0x972 <vfprintf+0x204>
 964:	60 81       	ld	r22, Z
 966:	71 81       	ldd	r23, Z+1	; 0x01
 968:	82 81       	ldd	r24, Z+2	; 0x02
 96a:	93 81       	ldd	r25, Z+3	; 0x03
 96c:	0c 5f       	subi	r16, 0xFC	; 252
 96e:	1f 4f       	sbci	r17, 0xFF	; 255
 970:	08 c0       	rjmp	.+16     	; 0x982 <vfprintf+0x214>
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	07 2e       	mov	r0, r23
 978:	00 0c       	add	r0, r0
 97a:	88 0b       	sbc	r24, r24
 97c:	99 0b       	sbc	r25, r25
 97e:	0e 5f       	subi	r16, 0xFE	; 254
 980:	1f 4f       	sbci	r17, 0xFF	; 255
 982:	f3 2d       	mov	r31, r3
 984:	ff 76       	andi	r31, 0x6F	; 111
 986:	3f 2e       	mov	r3, r31
 988:	97 ff       	sbrs	r25, 7
 98a:	09 c0       	rjmp	.+18     	; 0x99e <vfprintf+0x230>
 98c:	90 95       	com	r25
 98e:	80 95       	com	r24
 990:	70 95       	com	r23
 992:	61 95       	neg	r22
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	f0 68       	ori	r31, 0x80	; 128
 99c:	3f 2e       	mov	r3, r31
 99e:	2a e0       	ldi	r18, 0x0A	; 10
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	a3 01       	movw	r20, r6
 9a4:	33 d1       	rcall	.+614    	; 0xc0c <__ultoa_invert>
 9a6:	88 2e       	mov	r8, r24
 9a8:	86 18       	sub	r8, r6
 9aa:	44 c0       	rjmp	.+136    	; 0xa34 <vfprintf+0x2c6>
 9ac:	85 37       	cpi	r24, 0x75	; 117
 9ae:	31 f4       	brne	.+12     	; 0x9bc <vfprintf+0x24e>
 9b0:	23 2d       	mov	r18, r3
 9b2:	2f 7e       	andi	r18, 0xEF	; 239
 9b4:	b2 2e       	mov	r11, r18
 9b6:	2a e0       	ldi	r18, 0x0A	; 10
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	25 c0       	rjmp	.+74     	; 0xa06 <vfprintf+0x298>
 9bc:	93 2d       	mov	r25, r3
 9be:	99 7f       	andi	r25, 0xF9	; 249
 9c0:	b9 2e       	mov	r11, r25
 9c2:	8f 36       	cpi	r24, 0x6F	; 111
 9c4:	c1 f0       	breq	.+48     	; 0x9f6 <vfprintf+0x288>
 9c6:	18 f4       	brcc	.+6      	; 0x9ce <vfprintf+0x260>
 9c8:	88 35       	cpi	r24, 0x58	; 88
 9ca:	79 f0       	breq	.+30     	; 0x9ea <vfprintf+0x27c>
 9cc:	ae c0       	rjmp	.+348    	; 0xb2a <vfprintf+0x3bc>
 9ce:	80 37       	cpi	r24, 0x70	; 112
 9d0:	19 f0       	breq	.+6      	; 0x9d8 <vfprintf+0x26a>
 9d2:	88 37       	cpi	r24, 0x78	; 120
 9d4:	21 f0       	breq	.+8      	; 0x9de <vfprintf+0x270>
 9d6:	a9 c0       	rjmp	.+338    	; 0xb2a <vfprintf+0x3bc>
 9d8:	e9 2f       	mov	r30, r25
 9da:	e0 61       	ori	r30, 0x10	; 16
 9dc:	be 2e       	mov	r11, r30
 9de:	b4 fe       	sbrs	r11, 4
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <vfprintf+0x28e>
 9e2:	fb 2d       	mov	r31, r11
 9e4:	f4 60       	ori	r31, 0x04	; 4
 9e6:	bf 2e       	mov	r11, r31
 9e8:	09 c0       	rjmp	.+18     	; 0x9fc <vfprintf+0x28e>
 9ea:	34 fe       	sbrs	r3, 4
 9ec:	0a c0       	rjmp	.+20     	; 0xa02 <vfprintf+0x294>
 9ee:	29 2f       	mov	r18, r25
 9f0:	26 60       	ori	r18, 0x06	; 6
 9f2:	b2 2e       	mov	r11, r18
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <vfprintf+0x294>
 9f6:	28 e0       	ldi	r18, 0x08	; 8
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	05 c0       	rjmp	.+10     	; 0xa06 <vfprintf+0x298>
 9fc:	20 e1       	ldi	r18, 0x10	; 16
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <vfprintf+0x298>
 a02:	20 e1       	ldi	r18, 0x10	; 16
 a04:	32 e0       	ldi	r19, 0x02	; 2
 a06:	f8 01       	movw	r30, r16
 a08:	b7 fe       	sbrs	r11, 7
 a0a:	07 c0       	rjmp	.+14     	; 0xa1a <vfprintf+0x2ac>
 a0c:	60 81       	ld	r22, Z
 a0e:	71 81       	ldd	r23, Z+1	; 0x01
 a10:	82 81       	ldd	r24, Z+2	; 0x02
 a12:	93 81       	ldd	r25, Z+3	; 0x03
 a14:	0c 5f       	subi	r16, 0xFC	; 252
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <vfprintf+0x2b8>
 a1a:	60 81       	ld	r22, Z
 a1c:	71 81       	ldd	r23, Z+1	; 0x01
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 5f       	subi	r16, 0xFE	; 254
 a24:	1f 4f       	sbci	r17, 0xFF	; 255
 a26:	a3 01       	movw	r20, r6
 a28:	f1 d0       	rcall	.+482    	; 0xc0c <__ultoa_invert>
 a2a:	88 2e       	mov	r8, r24
 a2c:	86 18       	sub	r8, r6
 a2e:	fb 2d       	mov	r31, r11
 a30:	ff 77       	andi	r31, 0x7F	; 127
 a32:	3f 2e       	mov	r3, r31
 a34:	36 fe       	sbrs	r3, 6
 a36:	0d c0       	rjmp	.+26     	; 0xa52 <vfprintf+0x2e4>
 a38:	23 2d       	mov	r18, r3
 a3a:	2e 7f       	andi	r18, 0xFE	; 254
 a3c:	a2 2e       	mov	r10, r18
 a3e:	89 14       	cp	r8, r9
 a40:	58 f4       	brcc	.+22     	; 0xa58 <vfprintf+0x2ea>
 a42:	34 fe       	sbrs	r3, 4
 a44:	0b c0       	rjmp	.+22     	; 0xa5c <vfprintf+0x2ee>
 a46:	32 fc       	sbrc	r3, 2
 a48:	09 c0       	rjmp	.+18     	; 0xa5c <vfprintf+0x2ee>
 a4a:	83 2d       	mov	r24, r3
 a4c:	8e 7e       	andi	r24, 0xEE	; 238
 a4e:	a8 2e       	mov	r10, r24
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <vfprintf+0x2ee>
 a52:	b8 2c       	mov	r11, r8
 a54:	a3 2c       	mov	r10, r3
 a56:	03 c0       	rjmp	.+6      	; 0xa5e <vfprintf+0x2f0>
 a58:	b8 2c       	mov	r11, r8
 a5a:	01 c0       	rjmp	.+2      	; 0xa5e <vfprintf+0x2f0>
 a5c:	b9 2c       	mov	r11, r9
 a5e:	a4 fe       	sbrs	r10, 4
 a60:	0f c0       	rjmp	.+30     	; 0xa80 <vfprintf+0x312>
 a62:	fe 01       	movw	r30, r28
 a64:	e8 0d       	add	r30, r8
 a66:	f1 1d       	adc	r31, r1
 a68:	80 81       	ld	r24, Z
 a6a:	80 33       	cpi	r24, 0x30	; 48
 a6c:	21 f4       	brne	.+8      	; 0xa76 <vfprintf+0x308>
 a6e:	9a 2d       	mov	r25, r10
 a70:	99 7e       	andi	r25, 0xE9	; 233
 a72:	a9 2e       	mov	r10, r25
 a74:	09 c0       	rjmp	.+18     	; 0xa88 <vfprintf+0x31a>
 a76:	a2 fe       	sbrs	r10, 2
 a78:	06 c0       	rjmp	.+12     	; 0xa86 <vfprintf+0x318>
 a7a:	b3 94       	inc	r11
 a7c:	b3 94       	inc	r11
 a7e:	04 c0       	rjmp	.+8      	; 0xa88 <vfprintf+0x31a>
 a80:	8a 2d       	mov	r24, r10
 a82:	86 78       	andi	r24, 0x86	; 134
 a84:	09 f0       	breq	.+2      	; 0xa88 <vfprintf+0x31a>
 a86:	b3 94       	inc	r11
 a88:	a3 fc       	sbrc	r10, 3
 a8a:	10 c0       	rjmp	.+32     	; 0xaac <vfprintf+0x33e>
 a8c:	a0 fe       	sbrs	r10, 0
 a8e:	06 c0       	rjmp	.+12     	; 0xa9c <vfprintf+0x32e>
 a90:	b2 14       	cp	r11, r2
 a92:	80 f4       	brcc	.+32     	; 0xab4 <vfprintf+0x346>
 a94:	28 0c       	add	r2, r8
 a96:	92 2c       	mov	r9, r2
 a98:	9b 18       	sub	r9, r11
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <vfprintf+0x348>
 a9c:	b2 14       	cp	r11, r2
 a9e:	58 f4       	brcc	.+22     	; 0xab6 <vfprintf+0x348>
 aa0:	b6 01       	movw	r22, r12
 aa2:	80 e2       	ldi	r24, 0x20	; 32
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	76 d0       	rcall	.+236    	; 0xb94 <fputc>
 aa8:	b3 94       	inc	r11
 aaa:	f8 cf       	rjmp	.-16     	; 0xa9c <vfprintf+0x32e>
 aac:	b2 14       	cp	r11, r2
 aae:	18 f4       	brcc	.+6      	; 0xab6 <vfprintf+0x348>
 ab0:	2b 18       	sub	r2, r11
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vfprintf+0x34a>
 ab4:	98 2c       	mov	r9, r8
 ab6:	21 2c       	mov	r2, r1
 ab8:	a4 fe       	sbrs	r10, 4
 aba:	0f c0       	rjmp	.+30     	; 0xada <vfprintf+0x36c>
 abc:	b6 01       	movw	r22, r12
 abe:	80 e3       	ldi	r24, 0x30	; 48
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	68 d0       	rcall	.+208    	; 0xb94 <fputc>
 ac4:	a2 fe       	sbrs	r10, 2
 ac6:	16 c0       	rjmp	.+44     	; 0xaf4 <vfprintf+0x386>
 ac8:	a1 fc       	sbrc	r10, 1
 aca:	03 c0       	rjmp	.+6      	; 0xad2 <vfprintf+0x364>
 acc:	88 e7       	ldi	r24, 0x78	; 120
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <vfprintf+0x368>
 ad2:	88 e5       	ldi	r24, 0x58	; 88
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	b6 01       	movw	r22, r12
 ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <vfprintf+0x384>
 ada:	8a 2d       	mov	r24, r10
 adc:	86 78       	andi	r24, 0x86	; 134
 ade:	51 f0       	breq	.+20     	; 0xaf4 <vfprintf+0x386>
 ae0:	a1 fe       	sbrs	r10, 1
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <vfprintf+0x37a>
 ae4:	8b e2       	ldi	r24, 0x2B	; 43
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <vfprintf+0x37c>
 ae8:	80 e2       	ldi	r24, 0x20	; 32
 aea:	a7 fc       	sbrc	r10, 7
 aec:	8d e2       	ldi	r24, 0x2D	; 45
 aee:	b6 01       	movw	r22, r12
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	50 d0       	rcall	.+160    	; 0xb94 <fputc>
 af4:	89 14       	cp	r8, r9
 af6:	30 f4       	brcc	.+12     	; 0xb04 <vfprintf+0x396>
 af8:	b6 01       	movw	r22, r12
 afa:	80 e3       	ldi	r24, 0x30	; 48
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	4a d0       	rcall	.+148    	; 0xb94 <fputc>
 b00:	9a 94       	dec	r9
 b02:	f8 cf       	rjmp	.-16     	; 0xaf4 <vfprintf+0x386>
 b04:	8a 94       	dec	r8
 b06:	f3 01       	movw	r30, r6
 b08:	e8 0d       	add	r30, r8
 b0a:	f1 1d       	adc	r31, r1
 b0c:	80 81       	ld	r24, Z
 b0e:	b6 01       	movw	r22, r12
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	40 d0       	rcall	.+128    	; 0xb94 <fputc>
 b14:	81 10       	cpse	r8, r1
 b16:	f6 cf       	rjmp	.-20     	; 0xb04 <vfprintf+0x396>
 b18:	22 20       	and	r2, r2
 b1a:	09 f4       	brne	.+2      	; 0xb1e <vfprintf+0x3b0>
 b1c:	4e ce       	rjmp	.-868    	; 0x7ba <vfprintf+0x4c>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e2       	ldi	r24, 0x20	; 32
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	37 d0       	rcall	.+110    	; 0xb94 <fputc>
 b26:	2a 94       	dec	r2
 b28:	f7 cf       	rjmp	.-18     	; 0xb18 <vfprintf+0x3aa>
 b2a:	f6 01       	movw	r30, r12
 b2c:	86 81       	ldd	r24, Z+6	; 0x06
 b2e:	97 81       	ldd	r25, Z+7	; 0x07
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <vfprintf+0x3c8>
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	9f ef       	ldi	r25, 0xFF	; 255
 b36:	2b 96       	adiw	r28, 0x0b	; 11
 b38:	0f b6       	in	r0, 0x3f	; 63
 b3a:	f8 94       	cli
 b3c:	de bf       	out	0x3e, r29	; 62
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	cd bf       	out	0x3d, r28	; 61
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	1f 91       	pop	r17
 b48:	0f 91       	pop	r16
 b4a:	ff 90       	pop	r15
 b4c:	ef 90       	pop	r14
 b4e:	df 90       	pop	r13
 b50:	cf 90       	pop	r12
 b52:	bf 90       	pop	r11
 b54:	af 90       	pop	r10
 b56:	9f 90       	pop	r9
 b58:	8f 90       	pop	r8
 b5a:	7f 90       	pop	r7
 b5c:	6f 90       	pop	r6
 b5e:	5f 90       	pop	r5
 b60:	4f 90       	pop	r4
 b62:	3f 90       	pop	r3
 b64:	2f 90       	pop	r2
 b66:	08 95       	ret

00000b68 <strnlen_P>:
 b68:	fc 01       	movw	r30, r24
 b6a:	05 90       	lpm	r0, Z+
 b6c:	61 50       	subi	r22, 0x01	; 1
 b6e:	70 40       	sbci	r23, 0x00	; 0
 b70:	01 10       	cpse	r0, r1
 b72:	d8 f7       	brcc	.-10     	; 0xb6a <strnlen_P+0x2>
 b74:	80 95       	com	r24
 b76:	90 95       	com	r25
 b78:	8e 0f       	add	r24, r30
 b7a:	9f 1f       	adc	r25, r31
 b7c:	08 95       	ret

00000b7e <strnlen>:
 b7e:	fc 01       	movw	r30, r24
 b80:	61 50       	subi	r22, 0x01	; 1
 b82:	70 40       	sbci	r23, 0x00	; 0
 b84:	01 90       	ld	r0, Z+
 b86:	01 10       	cpse	r0, r1
 b88:	d8 f7       	brcc	.-10     	; 0xb80 <strnlen+0x2>
 b8a:	80 95       	com	r24
 b8c:	90 95       	com	r25
 b8e:	8e 0f       	add	r24, r30
 b90:	9f 1f       	adc	r25, r31
 b92:	08 95       	ret

00000b94 <fputc>:
 b94:	0f 93       	push	r16
 b96:	1f 93       	push	r17
 b98:	cf 93       	push	r28
 b9a:	df 93       	push	r29
 b9c:	fb 01       	movw	r30, r22
 b9e:	23 81       	ldd	r18, Z+3	; 0x03
 ba0:	21 fd       	sbrc	r18, 1
 ba2:	03 c0       	rjmp	.+6      	; 0xbaa <fputc+0x16>
 ba4:	8f ef       	ldi	r24, 0xFF	; 255
 ba6:	9f ef       	ldi	r25, 0xFF	; 255
 ba8:	2c c0       	rjmp	.+88     	; 0xc02 <fputc+0x6e>
 baa:	22 ff       	sbrs	r18, 2
 bac:	16 c0       	rjmp	.+44     	; 0xbda <fputc+0x46>
 bae:	46 81       	ldd	r20, Z+6	; 0x06
 bb0:	57 81       	ldd	r21, Z+7	; 0x07
 bb2:	24 81       	ldd	r18, Z+4	; 0x04
 bb4:	35 81       	ldd	r19, Z+5	; 0x05
 bb6:	42 17       	cp	r20, r18
 bb8:	53 07       	cpc	r21, r19
 bba:	44 f4       	brge	.+16     	; 0xbcc <fputc+0x38>
 bbc:	a0 81       	ld	r26, Z
 bbe:	b1 81       	ldd	r27, Z+1	; 0x01
 bc0:	9d 01       	movw	r18, r26
 bc2:	2f 5f       	subi	r18, 0xFF	; 255
 bc4:	3f 4f       	sbci	r19, 0xFF	; 255
 bc6:	31 83       	std	Z+1, r19	; 0x01
 bc8:	20 83       	st	Z, r18
 bca:	8c 93       	st	X, r24
 bcc:	26 81       	ldd	r18, Z+6	; 0x06
 bce:	37 81       	ldd	r19, Z+7	; 0x07
 bd0:	2f 5f       	subi	r18, 0xFF	; 255
 bd2:	3f 4f       	sbci	r19, 0xFF	; 255
 bd4:	37 83       	std	Z+7, r19	; 0x07
 bd6:	26 83       	std	Z+6, r18	; 0x06
 bd8:	14 c0       	rjmp	.+40     	; 0xc02 <fputc+0x6e>
 bda:	8b 01       	movw	r16, r22
 bdc:	ec 01       	movw	r28, r24
 bde:	fb 01       	movw	r30, r22
 be0:	00 84       	ldd	r0, Z+8	; 0x08
 be2:	f1 85       	ldd	r31, Z+9	; 0x09
 be4:	e0 2d       	mov	r30, r0
 be6:	19 95       	eicall
 be8:	89 2b       	or	r24, r25
 bea:	e1 f6       	brne	.-72     	; 0xba4 <fputc+0x10>
 bec:	d8 01       	movw	r26, r16
 bee:	16 96       	adiw	r26, 0x06	; 6
 bf0:	8d 91       	ld	r24, X+
 bf2:	9c 91       	ld	r25, X
 bf4:	17 97       	sbiw	r26, 0x07	; 7
 bf6:	01 96       	adiw	r24, 0x01	; 1
 bf8:	17 96       	adiw	r26, 0x07	; 7
 bfa:	9c 93       	st	X, r25
 bfc:	8e 93       	st	-X, r24
 bfe:	16 97       	sbiw	r26, 0x06	; 6
 c00:	ce 01       	movw	r24, r28
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	1f 91       	pop	r17
 c08:	0f 91       	pop	r16
 c0a:	08 95       	ret

00000c0c <__ultoa_invert>:
 c0c:	fa 01       	movw	r30, r20
 c0e:	aa 27       	eor	r26, r26
 c10:	28 30       	cpi	r18, 0x08	; 8
 c12:	51 f1       	breq	.+84     	; 0xc68 <__ultoa_invert+0x5c>
 c14:	20 31       	cpi	r18, 0x10	; 16
 c16:	81 f1       	breq	.+96     	; 0xc78 <__ultoa_invert+0x6c>
 c18:	e8 94       	clt
 c1a:	6f 93       	push	r22
 c1c:	6e 7f       	andi	r22, 0xFE	; 254
 c1e:	6e 5f       	subi	r22, 0xFE	; 254
 c20:	7f 4f       	sbci	r23, 0xFF	; 255
 c22:	8f 4f       	sbci	r24, 0xFF	; 255
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	af 4f       	sbci	r26, 0xFF	; 255
 c28:	b1 e0       	ldi	r27, 0x01	; 1
 c2a:	3e d0       	rcall	.+124    	; 0xca8 <__ultoa_invert+0x9c>
 c2c:	b4 e0       	ldi	r27, 0x04	; 4
 c2e:	3c d0       	rcall	.+120    	; 0xca8 <__ultoa_invert+0x9c>
 c30:	67 0f       	add	r22, r23
 c32:	78 1f       	adc	r23, r24
 c34:	89 1f       	adc	r24, r25
 c36:	9a 1f       	adc	r25, r26
 c38:	a1 1d       	adc	r26, r1
 c3a:	68 0f       	add	r22, r24
 c3c:	79 1f       	adc	r23, r25
 c3e:	8a 1f       	adc	r24, r26
 c40:	91 1d       	adc	r25, r1
 c42:	a1 1d       	adc	r26, r1
 c44:	6a 0f       	add	r22, r26
 c46:	71 1d       	adc	r23, r1
 c48:	81 1d       	adc	r24, r1
 c4a:	91 1d       	adc	r25, r1
 c4c:	a1 1d       	adc	r26, r1
 c4e:	20 d0       	rcall	.+64     	; 0xc90 <__ultoa_invert+0x84>
 c50:	09 f4       	brne	.+2      	; 0xc54 <__ultoa_invert+0x48>
 c52:	68 94       	set
 c54:	3f 91       	pop	r19
 c56:	2a e0       	ldi	r18, 0x0A	; 10
 c58:	26 9f       	mul	r18, r22
 c5a:	11 24       	eor	r1, r1
 c5c:	30 19       	sub	r19, r0
 c5e:	30 5d       	subi	r19, 0xD0	; 208
 c60:	31 93       	st	Z+, r19
 c62:	de f6       	brtc	.-74     	; 0xc1a <__ultoa_invert+0xe>
 c64:	cf 01       	movw	r24, r30
 c66:	08 95       	ret
 c68:	46 2f       	mov	r20, r22
 c6a:	47 70       	andi	r20, 0x07	; 7
 c6c:	40 5d       	subi	r20, 0xD0	; 208
 c6e:	41 93       	st	Z+, r20
 c70:	b3 e0       	ldi	r27, 0x03	; 3
 c72:	0f d0       	rcall	.+30     	; 0xc92 <__ultoa_invert+0x86>
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__ultoa_invert+0x5c>
 c76:	f6 cf       	rjmp	.-20     	; 0xc64 <__ultoa_invert+0x58>
 c78:	46 2f       	mov	r20, r22
 c7a:	4f 70       	andi	r20, 0x0F	; 15
 c7c:	40 5d       	subi	r20, 0xD0	; 208
 c7e:	4a 33       	cpi	r20, 0x3A	; 58
 c80:	18 f0       	brcs	.+6      	; 0xc88 <__ultoa_invert+0x7c>
 c82:	49 5d       	subi	r20, 0xD9	; 217
 c84:	31 fd       	sbrc	r19, 1
 c86:	40 52       	subi	r20, 0x20	; 32
 c88:	41 93       	st	Z+, r20
 c8a:	02 d0       	rcall	.+4      	; 0xc90 <__ultoa_invert+0x84>
 c8c:	a9 f7       	brne	.-22     	; 0xc78 <__ultoa_invert+0x6c>
 c8e:	ea cf       	rjmp	.-44     	; 0xc64 <__ultoa_invert+0x58>
 c90:	b4 e0       	ldi	r27, 0x04	; 4
 c92:	a6 95       	lsr	r26
 c94:	97 95       	ror	r25
 c96:	87 95       	ror	r24
 c98:	77 95       	ror	r23
 c9a:	67 95       	ror	r22
 c9c:	ba 95       	dec	r27
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__ultoa_invert+0x86>
 ca0:	00 97       	sbiw	r24, 0x00	; 0
 ca2:	61 05       	cpc	r22, r1
 ca4:	71 05       	cpc	r23, r1
 ca6:	08 95       	ret
 ca8:	9b 01       	movw	r18, r22
 caa:	ac 01       	movw	r20, r24
 cac:	0a 2e       	mov	r0, r26
 cae:	06 94       	lsr	r0
 cb0:	57 95       	ror	r21
 cb2:	47 95       	ror	r20
 cb4:	37 95       	ror	r19
 cb6:	27 95       	ror	r18
 cb8:	ba 95       	dec	r27
 cba:	c9 f7       	brne	.-14     	; 0xcae <__ultoa_invert+0xa2>
 cbc:	62 0f       	add	r22, r18
 cbe:	73 1f       	adc	r23, r19
 cc0:	84 1f       	adc	r24, r20
 cc2:	95 1f       	adc	r25, r21
 cc4:	a0 1d       	adc	r26, r0
 cc6:	08 95       	ret

00000cc8 <_exit>:
 cc8:	f8 94       	cli

00000cca <__stop_program>:
 cca:	ff cf       	rjmp	.-2      	; 0xcca <__stop_program>
