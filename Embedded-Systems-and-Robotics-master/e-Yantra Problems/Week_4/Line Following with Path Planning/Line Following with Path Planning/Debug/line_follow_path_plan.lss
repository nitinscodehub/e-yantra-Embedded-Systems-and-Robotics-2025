
line_follow_path_plan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b68  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021a5  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000870  00000000  00000000  00002ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001289  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  0000499c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000587  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ed7  00000000  00000000  000050a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00006f7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	4e d0       	rcall	.+156    	; 0x112 <main>
  76:	76 c5       	rjmp	.+2796   	; 0xb64 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <wl_sensors_port_config>:
 */
void wl_sensors_port_config(){
	
	// Make three white line sensor pins as input
	
	cbit(wl_sensors_left_ddr_reg,left_wl_sensor_pin);
  7a:	23 98       	cbi	0x04, 3	; 4
	cbit(wl_sensors_center_ddr_reg,center_wl_sensor_pin);
  7c:	24 98       	cbi	0x04, 4	; 4
	cbit(wl_sensors_right_ddr_reg,right_wl_sensor_pin);
  7e:	38 98       	cbi	0x07, 0	; 7
	
	// Deactivate pull-up for for three white line sensor pins
	
	cbit(wl_sensors_left_port_reg,left_wl_sensor_pin);
  80:	2b 98       	cbi	0x05, 3	; 5
	cbit(wl_sensors_center_port_reg,center_wl_sensor_pin);
  82:	2c 98       	cbi	0x05, 4	; 5
	cbit(wl_sensors_right_port_reg,right_wl_sensor_pin);
  84:	40 98       	cbi	0x08, 0	; 8
  86:	08 95       	ret

00000088 <ultrasonic_sensor_port_config>:
/**
 * @brief      Makes Trigger pin as output and echo pin as input and activates pull-up for the echo pin
 */
void ultrasonic_sensor_port_config(){
	
	ultrasonic_sensor_ddr_reg |= (1 << trigger_pin);
  88:	20 9a       	sbi	0x04, 0	; 4
	ultrasonic_sensor_ddr_reg &= ~(1 << echo_pin);
  8a:	21 98       	cbi	0x04, 1	; 4
	ultrasonic_sensor_port_reg |= (1 << echo_pin);
  8c:	29 9a       	sbi	0x05, 1	; 5
  8e:	08 95       	ret

00000090 <motors_pin_config>:
	// Set LF, reset RB,RF and LB
	
	cbit(motors_dir_port_reg,motors_RF_pin);
	cbit(motors_dir_port_reg,motors_LB_pin);
	cbit(motors_dir_port_reg,motors_RB_pin);
	sbit(motors_dir_port_reg,motors_LF_pin);
  90:	57 9a       	sbi	0x0a, 7	; 10
  92:	56 9a       	sbi	0x0a, 6	; 10
  94:	52 9a       	sbi	0x0a, 2	; 10
  96:	54 9a       	sbi	0x0a, 4	; 10
  98:	5f 98       	cbi	0x0b, 7	; 11
  9a:	5e 98       	cbi	0x0b, 6	; 11
  9c:	5a 98       	cbi	0x0b, 2	; 11
  9e:	5c 98       	cbi	0x0b, 4	; 11
  a0:	08 95       	ret

000000a2 <servo_pin_config>:
  a2:	22 9a       	sbi	0x04, 2	; 4
  a4:	2a 98       	cbi	0x05, 2	; 5
  a6:	08 95       	ret

000000a8 <pwm_pin_config>:
  a8:	55 9a       	sbi	0x0a, 5	; 10
  aa:	53 9a       	sbi	0x0a, 3	; 10
  ac:	5d 9a       	sbi	0x0b, 5	; 11
  ae:	5b 9a       	sbi	0x0b, 3	; 11
  b0:	08 95       	ret

000000b2 <timer_pwm_init>:
  b2:	91 e2       	ldi	r25, 0x21	; 33
  b4:	94 bd       	out	0x24, r25	; 36
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	85 bd       	out	0x25, r24	; 37
  ba:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  c2:	16 bc       	out	0x26, r1	; 38
  c4:	18 bc       	out	0x28, r1	; 40
  c6:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
  ca:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
  ce:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
  d2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
  d6:	08 95       	ret

000000d8 <speed>:
  d8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
  dc:	68 bd       	out	0x28, r22	; 40
  de:	08 95       	ret

000000e0 <motors_move_forward>:
  e0:	5f 98       	cbi	0x0b, 7	; 11
  e2:	5c 98       	cbi	0x0b, 4	; 11
  e4:	5e 9a       	sbi	0x0b, 6	; 11
  e6:	5a 9a       	sbi	0x0b, 2	; 11
  e8:	08 95       	ret

000000ea <motors_move_backward>:
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5a 98       	cbi	0x0b, 2	; 11
  ee:	5f 9a       	sbi	0x0b, 7	; 11
  f0:	5c 9a       	sbi	0x0b, 4	; 11
  f2:	08 95       	ret

000000f4 <motors_move_left>:
  f4:	5f 98       	cbi	0x0b, 7	; 11
  f6:	5a 98       	cbi	0x0b, 2	; 11
  f8:	5e 9a       	sbi	0x0b, 6	; 11
  fa:	5c 9a       	sbi	0x0b, 4	; 11
  fc:	08 95       	ret

000000fe <motors_move_right>:
  fe:	5e 98       	cbi	0x0b, 6	; 11
 100:	5c 98       	cbi	0x0b, 4	; 11
 102:	5f 9a       	sbi	0x0b, 7	; 11
 104:	5a 9a       	sbi	0x0b, 2	; 11
 106:	08 95       	ret

00000108 <motors_stop>:
 */
void motors_stop(void) {
	
	// reset RB,RF,LF and LB
	
	cbit(motors_dir_port_reg,motors_RF_pin);
 108:	5e 98       	cbi	0x0b, 6	; 11
	cbit(motors_dir_port_reg,motors_LB_pin);
 10a:	5c 98       	cbi	0x0b, 4	; 11
	cbit(motors_dir_port_reg,motors_RB_pin);
 10c:	5f 98       	cbi	0x0b, 7	; 11
	cbit(motors_dir_port_reg,motors_LF_pin);
 10e:	5a 98       	cbi	0x0b, 2	; 11
 110:	08 95       	ret

00000112 <main>:
 * @return     0
 */


int main(void)
{
 112:	af 92       	push	r10
 114:	bf 92       	push	r11
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	
	wl_sensors_port_config();			// Initializes the three white line sensors
 126:	a9 df       	rcall	.-174    	; 0x7a <wl_sensors_port_config>
	ultrasonic_sensor_port_config();	// Initializes the Ultrasonic sensor
 128:	af df       	rcall	.-162    	; 0x88 <ultrasonic_sensor_port_config>
	servo_pin_config();					// Initializes the servo motor connected to ultrasonic sensor
 12a:	bb df       	rcall	.-138    	; 0xa2 <servo_pin_config>
	pwm_pin_config();					// Initializes pwm pins as output
 12c:	bd df       	rcall	.-134    	; 0xa8 <pwm_pin_config>
 12e:	c1 df       	rcall	.-126    	; 0xb2 <timer_pwm_init>
	timer_pwm_init();					// Initializes Timer 0 and Timer 2
 130:	af df       	rcall	.-162    	; 0x90 <motors_pin_config>
 132:	c0 e0       	ldi	r28, 0x00	; 0
	motors_pin_config();				// Initializes the motor pins
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	00 e0       	ldi	r16, 0x00	; 0
   

	int flag1=0;						// set the flag so that further white line sensor comparison is enabled or disabled
	int count1=0;						// count1 is set when takes a left or right turn when it is at an angle 90 or 180
	int count2=0;						// count2 is set when takes a left or right turn when it is at an angle 0
	int junction=0;						// counts the number of junctions the turtle crossed
 138:	10 e0       	ldi	r17, 0x00	; 0
 13a:	e1 2c       	mov	r14, r1
	timer_pwm_init();					// Initializes Timer 0 and Timer 2
	motors_pin_config();				// Initializes the motor pins
   

	int flag1=0;						// set the flag so that further white line sensor comparison is enabled or disabled
	int count1=0;						// count1 is set when takes a left or right turn when it is at an angle 90 or 180
 13c:	f1 2c       	mov	r15, r1
 13e:	cc 24       	eor	r12, r12
	

    while(1)
    {
		
		flag1=0;
 140:	c3 94       	inc	r12
 142:	d1 2c       	mov	r13, r1
			{
				motors_move_forward();
				speed(110,110);
				_delay_ms(165);
			
				count1=1;
 144:	68 94       	set
 146:	aa 24       	eor	r10, r10
 148:	a1 f8       	bld	r10, 1
			if( (Path[0]<5) && (count1>0))
			{
				motors_move_forward();
				speed(110,110);
				_delay_ms(165);
				count1=2;
 14a:	b1 2c       	mov	r11, r1
 14c:	83 b1       	in	r24, 0x03	; 3
 14e:	88 70       	andi	r24, 0x08	; 8
 150:	23 b1       	in	r18, 0x03	; 3
    while(1)
    {
		
		flag1=0;
	
		left_wl_sensor_data  = wl_sensors_left_pin_reg & (1 << left_wl_sensor_pin);
 152:	96 b1       	in	r25, 0x06	; 6
 154:	91 70       	andi	r25, 0x01	; 1
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 156:	32 2f       	mov	r19, r18
		right_wl_sensor_data = wl_sensors_right_pin_reg & (1 << right_wl_sensor_pin);
 158:	30 71       	andi	r19, 0x10	; 16
 15a:	24 ff       	sbrs	r18, 4
		
		
		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 15c:	c0 c4       	rjmp	.+2432   	; 0xade <__stack+0x1df>
 15e:	88 23       	and	r24, r24
 160:	09 f4       	brne	.+2      	; 0x164 <main+0x52>
 162:	95 c4       	rjmp	.+2346   	; 0xa8e <__stack+0x18f>
 164:	99 23       	and	r25, r25
 166:	09 f4       	brne	.+2      	; 0x16a <main+0x58>
 168:	b4 c4       	rjmp	.+2408   	; 0xad2 <__stack+0x1d3>
 16a:	ce df       	rcall	.-100    	; 0x108 <motors_stop>
 16c:	2f ef       	ldi	r18, 0xFF	; 255
		{
			flag1=1;
			motors_stop();
 16e:	83 ed       	ldi	r24, 0xD3	; 211
 170:	90 e3       	ldi	r25, 0x30	; 48
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x60>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x6a>
 17c:	00 00       	nop
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	c4 30       	cpi	r28, 0x04	; 4
			_delay_ms(1000);
			junction++;
 182:	d1 05       	cpc	r29, r1
		
		
			if(((junction==6-Path[0]) && (Path[0]<5)) || ((junction==Path[0]-3) && (Path[0]>=5)))
 184:	49 f4       	brne	.+18     	; 0x198 <main+0x86>
 186:	c0 df       	rcall	.-128    	; 0x108 <motors_stop>
 188:	00 e0       	ldi	r16, 0x00	; 0
			{
				motors_stop();
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	cc 24       	eor	r12, r12
	motors_pin_config();				// Initializes the motor pins
   

	int flag1=0;						// set the flag so that further white line sensor comparison is enabled or disabled
	int count1=0;						// count1 is set when takes a left or right turn when it is at an angle 90 or 180
	int count2=0;						// count2 is set when takes a left or right turn when it is at an angle 0
 18e:	c3 94       	inc	r12
 190:	d1 2c       	mov	r13, r1
				_delay_ms(532);

				motors_move_right();
				speed(215,0);
				_delay_ms(1000);
				count2=1;
 192:	e1 2c       	mov	r14, r1
 194:	f1 2c       	mov	r15, r1
		
	*/

	while(1)
	{
		flag1=0;
 196:	5b c0       	rjmp	.+182    	; 0x24e <main+0x13c>
		
		
			if(((junction==6-Path[0]) && (Path[0]<5)) || ((junction==Path[0]-3) && (Path[0]>=5)))
			{
				motors_stop();
				break;
 198:	01 15       	cp	r16, r1
			}
		
			if(Path[0]<5 && count1==0)
 19a:	11 05       	cpc	r17, r1
 19c:	41 f5       	brne	.+80     	; 0x1ee <main+0xdc>
 19e:	a5 df       	rcall	.-182    	; 0xea <motors_move_backward>
			{
				motors_move_backward();
 1a0:	64 e6       	ldi	r22, 0x64	; 100
 1a2:	84 e6       	ldi	r24, 0x64	; 100
				speed(100,100);
 1a4:	99 df       	rcall	.-206    	; 0xd8 <speed>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	8a ea       	ldi	r24, 0xAA	; 170
 1aa:	92 e2       	ldi	r25, 0x22	; 34
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x9a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xa4>
 1b6:	00 00       	nop
 1b8:	9d df       	rcall	.-198    	; 0xf4 <motors_move_left>
				_delay_ms(710);
			
				motors_move_left();
 1ba:	60 ed       	ldi	r22, 0xD0	; 208
 1bc:	80 e0       	ldi	r24, 0x00	; 0
				speed(0,208);
 1be:	8c df       	rcall	.-232    	; 0xd8 <speed>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	83 ed       	ldi	r24, 0xD3	; 211
 1c4:	90 e3       	ldi	r25, 0x30	; 48
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0xb4>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xbe>
 1d0:	00 00       	nop
 1d2:	86 df       	rcall	.-244    	; 0xe0 <motors_move_forward>
				_delay_ms(1000);
			
				motors_move_forward();
 1d4:	64 e6       	ldi	r22, 0x64	; 100
 1d6:	84 e6       	ldi	r24, 0x64	; 100
				speed(100,100);
 1d8:	7f df       	rcall	.-258    	; 0xd8 <speed>
 1da:	2f e7       	ldi	r18, 0x7F	; 127
 1dc:	8b e8       	ldi	r24, 0x8B	; 139
 1de:	98 e0       	ldi	r25, 0x08	; 8
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0xce>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0xd8>
 1ea:	00 00       	nop
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <main+0xe4>
 1ee:	10 16       	cp	r1, r16
				
			}


			
			if( (Path[0]<5) && (count1>0))
 1f0:	11 06       	cpc	r1, r17
 1f2:	0c f0       	brlt	.+2      	; 0x1f6 <main+0xe4>
 1f4:	49 c4       	rjmp	.+2194   	; 0xa88 <__stack+0x189>
 1f6:	74 df       	rcall	.-280    	; 0xe0 <motors_move_forward>
			{
				motors_move_forward();
 1f8:	6e e6       	ldi	r22, 0x6E	; 110
 1fa:	8e e6       	ldi	r24, 0x6E	; 110
				speed(110,110);
 1fc:	6d df       	rcall	.-294    	; 0xd8 <speed>
 1fe:	2f e7       	ldi	r18, 0x7F	; 127
 200:	8e e0       	ldi	r24, 0x0E	; 14
 202:	98 e0       	ldi	r25, 0x08	; 8
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0xf2>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0xfc>
 20e:	00 00       	nop
 210:	0a 2d       	mov	r16, r10
				_delay_ms(165);
				count1=2;
 212:	1b 2d       	mov	r17, r11
 214:	39 c4       	rjmp	.+2162   	; 0xa88 <__stack+0x189>
		}
		
		if(center_wl_sensor_data && !right_wl_sensor_data && !left_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 216:	64 df       	rcall	.-312    	; 0xe0 <motors_move_forward>
			speed(100,100);
 218:	64 e6       	ldi	r22, 0x64	; 100
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	5d df       	rcall	.-326    	; 0xd8 <speed>
 21e:	0d c0       	rjmp	.+26     	; 0x23a <main+0x128>
 220:	33 23       	and	r19, r19
		}
		
		if((left_wl_sensor_data || (center_wl_sensor_data && left_wl_sensor_data)) && flag1==0)
 222:	09 f4       	brne	.+2      	; 0x226 <main+0x114>
 224:	3b c4       	rjmp	.+2166   	; 0xa9c <__stack+0x19d>
 226:	36 c4       	rjmp	.+2156   	; 0xa94 <__stack+0x195>
 228:	5b df       	rcall	.-330    	; 0xe0 <motors_move_forward>
		{
			flag1=1;
			motors_move_forward();
 22a:	6c e3       	ldi	r22, 0x3C	; 60
 22c:	8f e0       	ldi	r24, 0x0F	; 15
			speed(15,60);
 22e:	54 df       	rcall	.-344    	; 0xd8 <speed>
 230:	04 c0       	rjmp	.+8      	; 0x23a <main+0x128>
 232:	56 df       	rcall	.-340    	; 0xe0 <motors_move_forward>
 234:	6f e0       	ldi	r22, 0x0F	; 15
		}
		
		if((right_wl_sensor_data || (center_wl_sensor_data && right_wl_sensor_data)) && flag1==0)
		{	
			flag1=1;
			motors_move_forward();
 236:	8c e3       	ldi	r24, 0x3C	; 60
			speed(60,15);
 238:	4f df       	rcall	.-354    	; 0xd8 <speed>
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	84 e3       	ldi	r24, 0x34	; 52
 23e:	9c e0       	ldi	r25, 0x0C	; 12
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x12e>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x138>
 24a:	00 00       	nop
 24c:	7f cf       	rjmp	.-258    	; 0x14c <main+0x3a>
 24e:	01 15       	cp	r16, r1

	while(1)
	{
		flag1=0;

		if(count2==0)
 250:	11 05       	cpc	r17, r1
 252:	e1 f4       	brne	.+56     	; 0x28c <main+0x17a>
 254:	4a df       	rcall	.-364    	; 0xea <motors_move_backward>

			}

			if(Path[0]<5)
			{
				motors_move_backward();
 256:	64 e6       	ldi	r22, 0x64	; 100
 258:	84 e6       	ldi	r24, 0x64	; 100
				speed(100,100);
 25a:	3e df       	rcall	.-388    	; 0xd8 <speed>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	89 ef       	ldi	r24, 0xF9	; 249
 260:	99 e1       	ldi	r25, 0x19	; 25
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x150>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x15a>
 26c:	00 00       	nop
 26e:	47 df       	rcall	.-370    	; 0xfe <motors_move_right>
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	87 ed       	ldi	r24, 0xD7	; 215
				_delay_ms(532);

				motors_move_right();
 274:	31 df       	rcall	.-414    	; 0xd8 <speed>
 276:	2f ef       	ldi	r18, 0xFF	; 255
				speed(215,0);
 278:	83 ed       	ldi	r24, 0xD3	; 211
 27a:	90 e3       	ldi	r25, 0x30	; 48
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x16a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x174>
 286:	00 00       	nop
 288:	0c 2d       	mov	r16, r12
 28a:	1d 2d       	mov	r17, r13
 28c:	c3 b1       	in	r28, 0x03	; 3
 28e:	c8 70       	andi	r28, 0x08	; 8
				_delay_ms(1000);
				count2=1;
 290:	93 b1       	in	r25, 0x03	; 3
 292:	86 b1       	in	r24, 0x06	; 6

			}

		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg &   (1 << left_wl_sensor_pin);
 294:	d8 2f       	mov	r29, r24
 296:	d1 70       	andi	r29, 0x01	; 1
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 298:	94 ff       	sbrs	r25, 4
		right_wl_sensor_data = wl_sensors_right_pin_reg &  (1 << right_wl_sensor_pin);
 29a:	25 c4       	rjmp	.+2122   	; 0xae6 <__stack+0x1e7>
 29c:	cc 23       	and	r28, r28

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 29e:	a1 f0       	breq	.+40     	; 0x2c8 <main+0x1b6>
 2a0:	dd 23       	and	r29, r29
 2a2:	91 f0       	breq	.+36     	; 0x2c8 <main+0x1b6>
 2a4:	31 df       	rcall	.-414    	; 0x108 <motors_stop>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
		{

			motors_stop();
 2a8:	83 ed       	ldi	r24, 0xD3	; 211
 2aa:	90 e3       	ldi	r25, 0x30	; 48
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x19a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x1a4>
 2b6:	00 00       	nop
 2b8:	00 e0       	ldi	r16, 0x00	; 0
		Path[0]==Path[1] then loop 3 breaks without executing.
	
	*/
	
	
	count1=0;					// Resetting count1
 2ba:	10 e0       	ldi	r17, 0x00	; 0
			
			motors_move_forward();
			speed(100,100);
			_delay_ms(175);

			count1=1;
 2bc:	cc 24       	eor	r12, r12
 2be:	c3 94       	inc	r12
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 2c0:	d1 2c       	mov	r13, r1
 2c2:	e1 2c       	mov	r14, r1
 2c4:	f1 2c       	mov	r15, r1
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 2c6:	19 c0       	rjmp	.+50     	; 0x2fa <main+0x1e8>
			speed(50,50);
 2c8:	0b df       	rcall	.-490    	; 0xe0 <motors_move_forward>
 2ca:	62 e3       	ldi	r22, 0x32	; 50
 2cc:	82 e3       	ldi	r24, 0x32	; 50
		}
		 
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
 2ce:	04 df       	rcall	.-504    	; 0xd8 <speed>
 2d0:	c1 11       	cpse	r28, r1
			
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 2d2:	bd cf       	rjmp	.-134    	; 0x24e <main+0x13c>
 2d4:	8c 2d       	mov	r24, r12
 2d6:	9d 2d       	mov	r25, r13
		}
		 
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
		{
			flag1=1;
			motors_move_left();
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <main+0x1d2>
 2da:	0c df       	rcall	.-488    	; 0xf4 <motors_move_left>
			speed(31,50);
 2dc:	62 e3       	ldi	r22, 0x32	; 50
 2de:	8f e1       	ldi	r24, 0x1F	; 31
 2e0:	fb de       	rcall	.-522    	; 0xd8 <speed>
 2e2:	b5 cf       	rjmp	.-150    	; 0x24e <main+0x13c>
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 2e4:	dd 23       	and	r29, r29
 2e6:	09 f4       	brne	.+2      	; 0x2ea <main+0x1d8>
 2e8:	b2 cf       	rjmp	.-156    	; 0x24e <main+0x13c>
 2ea:	89 2b       	or	r24, r25
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <main+0x1de>
 2ee:	af cf       	rjmp	.-162    	; 0x24e <main+0x13c>
		{
			flag1=1;
			motors_move_right();
 2f0:	06 df       	rcall	.-500    	; 0xfe <motors_move_right>
 2f2:	6f e1       	ldi	r22, 0x1F	; 31
			speed(50,31);
 2f4:	82 e3       	ldi	r24, 0x32	; 50
 2f6:	f0 de       	rcall	.-544    	; 0xd8 <speed>
 2f8:	aa cf       	rjmp	.-172    	; 0x24e <main+0x13c>
 2fa:	01 15       	cp	r16, r1
			
			count1=1;
			
		}

		if(Path[1] > Path[0] && count1==0) 
 2fc:	11 05       	cpc	r17, r1
 2fe:	49 f5       	brne	.+82     	; 0x352 <main+0x240>
 300:	f4 de       	rcall	.-536    	; 0xea <motors_move_backward>
		{
			motors_move_backward();
 302:	64 e6       	ldi	r22, 0x64	; 100
 304:	84 e6       	ldi	r24, 0x64	; 100
			speed(100,100);
 306:	e8 de       	rcall	.-560    	; 0xd8 <speed>
 308:	2f e7       	ldi	r18, 0x7F	; 127
 30a:	88 ed       	ldi	r24, 0xD8	; 216
 30c:	90 e1       	ldi	r25, 0x10	; 16
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x1fc>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x206>
 318:	00 00       	nop
 31a:	f1 de       	rcall	.-542    	; 0xfe <motors_move_right>
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	83 ed       	ldi	r24, 0xD3	; 211
			_delay_ms(345);
			
			motors_move_right();
 320:	db de       	rcall	.-586    	; 0xd8 <speed>
 322:	2f e7       	ldi	r18, 0x7F	; 127
			speed(211,0);
 324:	88 e8       	ldi	r24, 0x88	; 136
 326:	9e e2       	ldi	r25, 0x2E	; 46
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x216>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x220>
 332:	00 00       	nop
 334:	d5 de       	rcall	.-598    	; 0xe0 <motors_move_forward>
 336:	64 e6       	ldi	r22, 0x64	; 100
 338:	84 e6       	ldi	r24, 0x64	; 100
 33a:	ce de       	rcall	.-612    	; 0xd8 <speed>
			_delay_ms(953);
			
			motors_move_forward();
 33c:	2f e7       	ldi	r18, 0x7F	; 127
			speed(100,100);
 33e:	8b e8       	ldi	r24, 0x8B	; 139
 340:	98 e0       	ldi	r25, 0x08	; 8
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x230>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x23a>
 34c:	00 00       	nop
 34e:	0c 2d       	mov	r16, r12
 350:	1d 2d       	mov	r17, r13
 352:	c3 b1       	in	r28, 0x03	; 3
			_delay_ms(175);

			count1=1;
 354:	c8 70       	andi	r28, 0x08	; 8
 356:	93 b1       	in	r25, 0x03	; 3
			
		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg & (1 << left_wl_sensor_pin);
 358:	86 b1       	in	r24, 0x06	; 6
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 35a:	d8 2f       	mov	r29, r24
		right_wl_sensor_data = wl_sensors_right_pin_reg & (1 << right_wl_sensor_pin);
 35c:	d1 70       	andi	r29, 0x01	; 1
 35e:	94 ff       	sbrs	r25, 4
		

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 360:	c7 c3       	rjmp	.+1934   	; 0xaf0 <__stack+0x1f1>
 362:	cc 23       	and	r28, r28
 364:	a9 f0       	breq	.+42     	; 0x390 <main+0x27e>
 366:	dd 23       	and	r29, r29
 368:	99 f0       	breq	.+38     	; 0x390 <main+0x27e>
		{

			flag1=1;
			motors_stop();
 36a:	ce de       	rcall	.-612    	; 0x108 <motors_stop>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	83 ed       	ldi	r24, 0xD3	; 211
 370:	90 e3       	ldi	r25, 0x30	; 48
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x260>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x26a>
 37c:	00 00       	nop
			_delay_ms(1000);
			junction++;
	
			if (((junction==Path[0]-Path[1]) && (Path[1]<Path[0])) || ((junction==Path[1]-Path[0]) && (Path[1]>=Path[0])))
			{
				motors_stop();
 37e:	c4 de       	rcall	.-632    	; 0x108 <motors_stop>
 380:	00 e0       	ldi	r16, 0x00	; 0
		right or left in this loop.
	
	*/
	
	
	count2=0;		// Resetting count2
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	cc 24       	eor	r12, r12
 386:	c3 94       	inc	r12
 388:	d1 2c       	mov	r13, r1

	while(1)		
	{
		flag1=0;
 38a:	e1 2c       	mov	r14, r1
 38c:	f1 2c       	mov	r15, r1
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 38e:	20 c0       	rjmp	.+64     	; 0x3d0 <main+0x2be>
 390:	a7 de       	rcall	.-690    	; 0xe0 <motors_move_forward>
			speed(100,100);
 392:	64 e6       	ldi	r22, 0x64	; 100
 394:	84 e6       	ldi	r24, 0x64	; 100
 396:	a0 de       	rcall	.-704    	; 0xd8 <speed>
 398:	c1 11       	cpse	r28, r1
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 39a:	10 c0       	rjmp	.+32     	; 0x3bc <main+0x2aa>
			
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 39c:	8c 2d       	mov	r24, r12
 39e:	9d 2d       	mov	r25, r13
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <main+0x29a>
 3a2:	9e de       	rcall	.-708    	; 0xe0 <motors_move_forward>
			speed(15,60);
 3a4:	6c e3       	ldi	r22, 0x3C	; 60
 3a6:	8f e0       	ldi	r24, 0x0F	; 15
 3a8:	97 de       	rcall	.-722    	; 0xd8 <speed>
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <main+0x2aa>
 3ac:	dd 23       	and	r29, r29
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 3ae:	31 f0       	breq	.+12     	; 0x3bc <main+0x2aa>
 3b0:	89 2b       	or	r24, r25
 3b2:	21 f4       	brne	.+8      	; 0x3bc <main+0x2aa>
 3b4:	95 de       	rcall	.-726    	; 0xe0 <motors_move_forward>
		{
			flag1=1;
			motors_move_forward();
 3b6:	6f e0       	ldi	r22, 0x0F	; 15
 3b8:	8c e3       	ldi	r24, 0x3C	; 60
			speed(60,15);
 3ba:	8e de       	rcall	.-740    	; 0xd8 <speed>
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	84 e3       	ldi	r24, 0x34	; 52
 3c0:	9c e0       	ldi	r25, 0x0C	; 12
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x2b0>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x2ba>
 3cc:	00 00       	nop
 3ce:	95 cf       	rjmp	.-214    	; 0x2fa <main+0x1e8>
 3d0:	01 15       	cp	r16, r1
 3d2:	11 05       	cpc	r17, r1

	while(1)		
	{
		flag1=0;

		if(count2==0 && (Path[0] != Path[1]))
 3d4:	e1 f4       	brne	.+56     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3d6:	89 de       	rcall	.-750    	; 0xea <motors_move_backward>
 3d8:	64 e6       	ldi	r22, 0x64	; 100
		{
			if(Path[0]<Path[1])
			{
				motors_move_backward();
 3da:	84 e6       	ldi	r24, 0x64	; 100
 3dc:	7d de       	rcall	.-774    	; 0xd8 <speed>
				speed(100,100);
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	8a ed       	ldi	r24, 0xDA	; 218
 3e2:	9a e1       	ldi	r25, 0x1A	; 26
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <main+0x2d2>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x2dc>
 3ee:	00 00       	nop
 3f0:	81 de       	rcall	.-766    	; 0xf4 <motors_move_left>
 3f2:	60 ed       	ldi	r22, 0xD0	; 208
 3f4:	80 e0       	ldi	r24, 0x00	; 0
				_delay_ms(550);

				motors_move_left();
 3f6:	70 de       	rcall	.-800    	; 0xd8 <speed>
				speed(0,208);
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	87 e3       	ldi	r24, 0x37	; 55
 3fc:	91 e3       	ldi	r25, 0x31	; 49
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	80 40       	sbci	r24, 0x00	; 0
 402:	90 40       	sbci	r25, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <main+0x2ec>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	0c 2d       	mov	r16, r12
 40c:	1d 2d       	mov	r17, r13
 40e:	c3 b1       	in	r28, 0x03	; 3
 410:	c8 70       	andi	r28, 0x08	; 8

			}

		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg &   (1 << left_wl_sensor_pin);
 412:	93 b1       	in	r25, 0x03	; 3
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 414:	86 b1       	in	r24, 0x06	; 6
		right_wl_sensor_data = wl_sensors_right_pin_reg &  (1 << right_wl_sensor_pin);
 416:	d8 2f       	mov	r29, r24
 418:	d1 70       	andi	r29, 0x01	; 1

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 41a:	94 ff       	sbrs	r25, 4
 41c:	6e c3       	rjmp	.+1756   	; 0xafa <__stack+0x1fb>
 41e:	cc 23       	and	r28, r28
 420:	b1 f0       	breq	.+44     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 422:	dd 23       	and	r29, r29
		{

			motors_stop();
 424:	a1 f0       	breq	.+40     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 426:	70 de       	rcall	.-800    	; 0x108 <motors_stop>
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	83 ed       	ldi	r24, 0xD3	; 211
 42c:	90 e3       	ldi	r25, 0x30	; 48
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	
	*/
	
	
	count1=0;			// Resetting count1
	junction=0;			// Resetting junction
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
		Path[1]==Path[2] then loop 3 breaks without executing.
	
	*/
	
	
	count1=0;			// Resetting count1
 43a:	e1 2c       	mov	r14, r1
			
			motors_move_forward();
			speed(100,100);
			_delay_ms(175);

			count1=1;
 43c:	f1 2c       	mov	r15, r1
 43e:	00 e0       	ldi	r16, 0x00	; 0
 440:	10 e0       	ldi	r17, 0x00	; 0


	while(1)	
	{
		
		flag1=0;
 442:	cc 24       	eor	r12, r12
 444:	c3 94       	inc	r12
 446:	d1 2c       	mov	r13, r1
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 448:	a1 2c       	mov	r10, r1
 44a:	b1 2c       	mov	r11, r1
			speed(50,50);
 44c:	19 c0       	rjmp	.+50     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 44e:	48 de       	rcall	.-880    	; 0xe0 <motors_move_forward>
 450:	62 e3       	ldi	r22, 0x32	; 50
		}
		
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
 452:	82 e3       	ldi	r24, 0x32	; 50
 454:	41 de       	rcall	.-894    	; 0xd8 <speed>
			
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 456:	c1 11       	cpse	r28, r1
 458:	bb cf       	rjmp	.-138    	; 0x3d0 <main+0x2be>
 45a:	8c 2d       	mov	r24, r12
		}
		
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
		{
			flag1=1;
			motors_move_left();
 45c:	9d 2d       	mov	r25, r13
 45e:	05 c0       	rjmp	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
			speed(31,50);
 460:	49 de       	rcall	.-878    	; 0xf4 <motors_move_left>
 462:	62 e3       	ldi	r22, 0x32	; 50
 464:	8f e1       	ldi	r24, 0x1F	; 31
 466:	38 de       	rcall	.-912    	; 0xd8 <speed>
 468:	b3 cf       	rjmp	.-154    	; 0x3d0 <main+0x2be>
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 46a:	dd 23       	and	r29, r29
 46c:	09 f4       	brne	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	b0 cf       	rjmp	.-160    	; 0x3d0 <main+0x2be>
 470:	89 2b       	or	r24, r25
 472:	09 f0       	breq	.+2      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 474:	ad cf       	rjmp	.-166    	; 0x3d0 <main+0x2be>
		{
			flag1=1;
			motors_move_right();
 476:	43 de       	rcall	.-890    	; 0xfe <motors_move_right>
 478:	6f e1       	ldi	r22, 0x1F	; 31
			speed(50,31);
 47a:	82 e3       	ldi	r24, 0x32	; 50
 47c:	2d de       	rcall	.-934    	; 0xd8 <speed>
 47e:	a8 cf       	rjmp	.-176    	; 0x3d0 <main+0x2be>
 480:	01 15       	cp	r16, r1
 482:	11 05       	cpc	r17, r1
			
			count1=1;
			
		}

		if(Path[2] > Path[1] && count1==0)
 484:	49 f5       	brne	.+82     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 486:	31 de       	rcall	.-926    	; 0xea <motors_move_backward>
		{
			motors_move_backward();
 488:	64 e6       	ldi	r22, 0x64	; 100
 48a:	84 e6       	ldi	r24, 0x64	; 100
			speed(100,100);
 48c:	25 de       	rcall	.-950    	; 0xd8 <speed>
 48e:	2f ef       	ldi	r18, 0xFF	; 255
 490:	8d ef       	ldi	r24, 0xFD	; 253
 492:	90 e1       	ldi	r25, 0x10	; 16
 494:	21 50       	subi	r18, 0x01	; 1
 496:	80 40       	sbci	r24, 0x00	; 0
 498:	90 40       	sbci	r25, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
 4a0:	2e de       	rcall	.-932    	; 0xfe <motors_move_right>
 4a2:	60 e0       	ldi	r22, 0x00	; 0
			_delay_ms(348);
			
			motors_move_right();
 4a4:	83 ed       	ldi	r24, 0xD3	; 211
 4a6:	18 de       	rcall	.-976    	; 0xd8 <speed>
			speed(211,0);
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	86 e5       	ldi	r24, 0x56	; 86
 4ac:	90 e3       	ldi	r25, 0x30	; 48
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
 4ba:	12 de       	rcall	.-988    	; 0xe0 <motors_move_forward>
 4bc:	64 e6       	ldi	r22, 0x64	; 100
			_delay_ms(990);
			
			motors_move_forward();
 4be:	84 e6       	ldi	r24, 0x64	; 100
 4c0:	0b de       	rcall	.-1002   	; 0xd8 <speed>
			speed(100,100);
 4c2:	2f e7       	ldi	r18, 0x7F	; 127
 4c4:	8b e8       	ldi	r24, 0x8B	; 139
 4c6:	98 e0       	ldi	r25, 0x08	; 8
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
 4d4:	0c 2d       	mov	r16, r12
 4d6:	1d 2d       	mov	r17, r13
			_delay_ms(175);

			count1=1;
 4d8:	c3 b1       	in	r28, 0x03	; 3
 4da:	c8 70       	andi	r28, 0x08	; 8
			
		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg & (1 << left_wl_sensor_pin);
 4dc:	93 b1       	in	r25, 0x03	; 3
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 4de:	86 b1       	in	r24, 0x06	; 6
		right_wl_sensor_data = wl_sensors_right_pin_reg & (1 << right_wl_sensor_pin);
 4e0:	d8 2f       	mov	r29, r24
 4e2:	d1 70       	andi	r29, 0x01	; 1
		

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 4e4:	94 ff       	sbrs	r25, 4
 4e6:	0e c3       	rjmp	.+1564   	; 0xb04 <__stack+0x205>
 4e8:	cc 23       	and	r28, r28
 4ea:	09 f4       	brne	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ec:	db c2       	rjmp	.+1462   	; 0xaa4 <__stack+0x1a5>
 4ee:	dd 23       	and	r29, r29
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f2:	d8 c2       	rjmp	.+1456   	; 0xaa4 <__stack+0x1a5>
		{

			flag1=1;
			motors_stop();
 4f4:	09 de       	rcall	.-1006   	; 0x108 <motors_stop>
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	83 ed       	ldi	r24, 0xD3	; 211
 4fa:	90 e3       	ldi	r25, 0x30	; 48
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 504:	00 c0       	rjmp	.+0      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
			_delay_ms(1000);
			
			junction++;
 506:	00 00       	nop
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	e2 1a       	sub	r14, r18
			
			if (((junction==Path[1]-Path[2]) && (Path[2]<Path[1])) || ((junction==Path[2]-Path[1]) && (Path[2]>=Path[1])))
 50c:	f2 0a       	sbc	r15, r18
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	e8 16       	cp	r14, r24
			{
				motors_stop();
 512:	f1 04       	cpc	r15, r1
	
	
	*/
	
	
	count2=0;		// Resetting count2
 514:	31 f4       	brne	.+12     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 516:	f8 dd       	rcall	.-1040   	; 0x108 <motors_stop>
 518:	c0 e0       	ldi	r28, 0x00	; 0
 51a:	d0 e0       	ldi	r29, 0x00	; 0
 51c:	01 e0       	ldi	r16, 0x01	; 1
				motors_stop();
				break;
			}

			
			if(count1>0)
 51e:	10 e0       	ldi	r17, 0x00	; 0
 520:	2a c0       	rjmp	.+84     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 522:	10 16       	cp	r1, r16
			{
				motors_move_forward();
 524:	11 06       	cpc	r1, r17
 526:	ec f4       	brge	.+58     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
				speed(110,110);
 528:	db dd       	rcall	.-1098   	; 0xe0 <motors_move_forward>
 52a:	6e e6       	ldi	r22, 0x6E	; 110
 52c:	8e e6       	ldi	r24, 0x6E	; 110
 52e:	d4 dd       	rcall	.-1112   	; 0xd8 <speed>
 530:	9f e7       	ldi	r25, 0x7F	; 127
 532:	2e e0       	ldi	r18, 0x0E	; 14
 534:	88 e0       	ldi	r24, 0x08	; 8
 536:	91 50       	subi	r25, 0x01	; 1
 538:	20 40       	sbci	r18, 0x00	; 0
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
				_delay_ms(165);
				count1=1;
 540:	00 00       	nop
 542:	0c 2d       	mov	r16, r12
 544:	1d 2d       	mov	r17, r13
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 546:	0d c0       	rjmp	.+26     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 548:	cb dd       	rcall	.-1130   	; 0xe0 <motors_move_forward>
			speed(15,60);
 54a:	6c e3       	ldi	r22, 0x3C	; 60
 54c:	8f e0       	ldi	r24, 0x0F	; 15
 54e:	c4 dd       	rcall	.-1144   	; 0xd8 <speed>
 550:	08 c0       	rjmp	.+16     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 552:	dd 23       	and	r29, r29
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 554:	31 f0       	breq	.+12     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 556:	89 2b       	or	r24, r25
 558:	21 f4       	brne	.+8      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 55a:	c2 dd       	rcall	.-1148   	; 0xe0 <motors_move_forward>
		{
			flag1=1;
			motors_move_forward();
 55c:	6f e0       	ldi	r22, 0x0F	; 15
 55e:	8c e3       	ldi	r24, 0x3C	; 60
			speed(60,15);
 560:	bb dd       	rcall	.-1162   	; 0xd8 <speed>
 562:	9f ef       	ldi	r25, 0xFF	; 255
 564:	24 e3       	ldi	r18, 0x34	; 52
 566:	8c e0       	ldi	r24, 0x0C	; 12
 568:	91 50       	subi	r25, 0x01	; 1
 56a:	20 40       	sbci	r18, 0x00	; 0
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	e1 f7       	brne	.-8      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 570:	00 c0       	rjmp	.+0      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 572:	00 00       	nop
 574:	85 cf       	rjmp	.-246    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 576:	20 97       	sbiw	r28, 0x00	; 0
	count2=0;		// Resetting count2

	while(1)		
	{

		if(count2==0 && (Path[1] != Path[2]))
 578:	e1 f4       	brne	.+56     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 57a:	b7 dd       	rcall	.-1170   	; 0xea <motors_move_backward>
		{
			if(Path[1] < Path[2])
			{
				motors_move_backward();
 57c:	64 e6       	ldi	r22, 0x64	; 100
 57e:	84 e6       	ldi	r24, 0x64	; 100
				speed(100,100);
 580:	ab dd       	rcall	.-1194   	; 0xd8 <speed>
 582:	9f ef       	ldi	r25, 0xFF	; 255
 584:	28 ef       	ldi	r18, 0xF8	; 248
 586:	85 e1       	ldi	r24, 0x15	; 21
 588:	91 50       	subi	r25, 0x01	; 1
 58a:	20 40       	sbci	r18, 0x00	; 0
 58c:	80 40       	sbci	r24, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 590:	00 c0       	rjmp	.+0      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 592:	00 00       	nop
 594:	af dd       	rcall	.-1186   	; 0xf4 <motors_move_left>
 596:	60 ed       	ldi	r22, 0xD0	; 208
				_delay_ms(450);

				motors_move_left();
 598:	80 e0       	ldi	r24, 0x00	; 0
				speed(0,208);
 59a:	9e dd       	rcall	.-1220   	; 0xd8 <speed>
 59c:	9f ef       	ldi	r25, 0xFF	; 255
 59e:	2d ec       	ldi	r18, 0xCD	; 205
 5a0:	81 e3       	ldi	r24, 0x31	; 49
 5a2:	91 50       	subi	r25, 0x01	; 1
 5a4:	20 40       	sbci	r18, 0x00	; 0
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 5ac:	00 00       	nop
 5ae:	c0 2f       	mov	r28, r16
 5b0:	d1 2f       	mov	r29, r17
 5b2:	93 b1       	in	r25, 0x03	; 3

			}

		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg &   (1 << left_wl_sensor_pin);
 5b4:	83 b1       	in	r24, 0x03	; 3
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 5b6:	26 b1       	in	r18, 0x06	; 6
		right_wl_sensor_data = wl_sensors_right_pin_reg &  (1 << right_wl_sensor_pin);
 5b8:	84 ff       	sbrs	r24, 4

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data)
 5ba:	18 c0       	rjmp	.+48     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5bc:	93 ff       	sbrs	r25, 3
 5be:	16 c0       	rjmp	.+44     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5c0:	20 ff       	sbrs	r18, 0
 5c2:	14 c0       	rjmp	.+40     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5c4:	a1 dd       	rcall	.-1214   	; 0x108 <motors_stop>
		{

			motors_stop();
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	93 ed       	ldi	r25, 0xD3	; 211
 5ca:	20 e3       	ldi	r18, 0x30	; 48
 5cc:	81 50       	subi	r24, 0x01	; 1
 5ce:	90 40       	sbci	r25, 0x00	; 0
 5d0:	20 40       	sbci	r18, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d6:	00 00       	nop
 5d8:	e1 2c       	mov	r14, r1
 5da:	f1 2c       	mov	r15, r1
		Path[2]==Path[3] then loop 3 breaks without executing.
	
	*/
	
	count1=0;			// Resetting count1
	junction=0;			// Resetting junction
 5dc:	00 e0       	ldi	r16, 0x00	; 0
 5de:	10 e0       	ldi	r17, 0x00	; 0
		START and STOP positions, then there is no need to run the odd numbered loops. So initially if
		Path[2]==Path[3] then loop 3 breaks without executing.
	
	*/
	
	count1=0;			// Resetting count1
 5e0:	aa 24       	eor	r10, r10
 5e2:	a3 94       	inc	r10
			
			motors_move_forward();
			speed(100,100);
			_delay_ms(175);
			
			count1=1;
 5e4:	b1 2c       	mov	r11, r1
 5e6:	c1 2c       	mov	r12, r1
	junction=0;			// Resetting junction


	while(1)
	{
		flag1=0;
 5e8:	d1 2c       	mov	r13, r1
 5ea:	0e c0       	rjmp	.+28     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5ec:	79 dd       	rcall	.-1294   	; 0xe0 <motors_move_forward>
			
		}
		
		else
		{
			motors_move_forward();
 5ee:	62 e3       	ldi	r22, 0x32	; 50
 5f0:	82 e3       	ldi	r24, 0x32	; 50
			speed(50,50);
 5f2:	72 dd       	rcall	.-1308   	; 0xd8 <speed>
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	94 e3       	ldi	r25, 0x34	; 52
 5f8:	2c e0       	ldi	r18, 0x0C	; 12
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	20 40       	sbci	r18, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
 602:	00 c0       	rjmp	.+0      	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 604:	00 00       	nop
 606:	b7 cf       	rjmp	.-146    	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 608:	01 15       	cp	r16, r1
 60a:	11 05       	cpc	r17, r1
	while(1)
	{
		flag1=0;
		

		if(Path[3]<Path[2] && count1==0)
 60c:	49 f5       	brne	.+82     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 60e:	6d dd       	rcall	.-1318   	; 0xea <motors_move_backward>
 610:	64 e6       	ldi	r22, 0x64	; 100
		{
			motors_move_backward();
 612:	84 e6       	ldi	r24, 0x64	; 100
 614:	61 dd       	rcall	.-1342   	; 0xd8 <speed>
			speed(100,100);
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	90 e2       	ldi	r25, 0x20	; 32
 61a:	20 e2       	ldi	r18, 0x20	; 32
 61c:	81 50       	subi	r24, 0x01	; 1
 61e:	90 40       	sbci	r25, 0x00	; 0
 620:	20 40       	sbci	r18, 0x00	; 0
 622:	e1 f7       	brne	.-8      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 624:	00 c0       	rjmp	.+0      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 626:	00 00       	nop
 628:	65 dd       	rcall	.-1334   	; 0xf4 <motors_move_left>
 62a:	60 ed       	ldi	r22, 0xD0	; 208
			_delay_ms(658);
			
			motors_move_left();
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	54 dd       	rcall	.-1368   	; 0xd8 <speed>
			speed(0,208);
 630:	8f ef       	ldi	r24, 0xFF	; 255
 632:	93 ed       	ldi	r25, 0xD3	; 211
 634:	20 e3       	ldi	r18, 0x30	; 48
 636:	81 50       	subi	r24, 0x01	; 1
 638:	90 40       	sbci	r25, 0x00	; 0
 63a:	20 40       	sbci	r18, 0x00	; 0
 63c:	e1 f7       	brne	.-8      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 640:	00 00       	nop
 642:	4e dd       	rcall	.-1380   	; 0xe0 <motors_move_forward>
 644:	64 e6       	ldi	r22, 0x64	; 100
			_delay_ms(1000);
			
			motors_move_forward();
 646:	84 e6       	ldi	r24, 0x64	; 100
 648:	47 dd       	rcall	.-1394   	; 0xd8 <speed>
			speed(100,100);
 64a:	8f e7       	ldi	r24, 0x7F	; 127
 64c:	9b e8       	ldi	r25, 0x8B	; 139
 64e:	28 e0       	ldi	r18, 0x08	; 8
 650:	81 50       	subi	r24, 0x01	; 1
 652:	90 40       	sbci	r25, 0x00	; 0
 654:	20 40       	sbci	r18, 0x00	; 0
 656:	e1 f7       	brne	.-8      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 658:	00 c0       	rjmp	.+0      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 65a:	00 00       	nop
 65c:	0a 2d       	mov	r16, r10
 65e:	1b 2d       	mov	r17, r11
 660:	c3 b1       	in	r28, 0x03	; 3
			_delay_ms(175);
			
			count1=1;
 662:	c8 70       	andi	r28, 0x08	; 8
 664:	93 b1       	in	r25, 0x03	; 3

			count1=1;
			
		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg & (1 << left_wl_sensor_pin);
 666:	86 b1       	in	r24, 0x06	; 6
 668:	d8 2f       	mov	r29, r24
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
		right_wl_sensor_data = wl_sensors_right_pin_reg & (1 << right_wl_sensor_pin);
 66a:	d1 70       	andi	r29, 0x01	; 1
 66c:	94 ff       	sbrs	r25, 4
		

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 66e:	4f c2       	rjmp	.+1182   	; 0xb0e <__stack+0x20f>
 670:	cc 23       	and	r28, r28
 672:	09 f4       	brne	.+2      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 674:	20 c2       	rjmp	.+1088   	; 0xab6 <__stack+0x1b7>
 676:	dd 23       	and	r29, r29
 678:	09 f4       	brne	.+2      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 67a:	1d c2       	rjmp	.+1082   	; 0xab6 <__stack+0x1b7>
 67c:	45 dd       	rcall	.-1398   	; 0x108 <motors_stop>
		{

			flag1=1;
			motors_stop();
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	93 ed       	ldi	r25, 0xD3	; 211
 682:	20 e3       	ldi	r18, 0x30	; 48
 684:	81 50       	subi	r24, 0x01	; 1
 686:	90 40       	sbci	r25, 0x00	; 0
 688:	20 40       	sbci	r18, 0x00	; 0
 68a:	e1 f7       	brne	.-8      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68e:	00 00       	nop
			_delay_ms(1000);
			junction++;
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	e8 1a       	sub	r14, r24
 694:	f8 0a       	sbc	r15, r24
			
			
			if (((junction==Path[2]-Path[3]) && (Path[3]<Path[2])) || ((junction==Path[3]-Path[2]) && (Path[3]>=Path[2])))
 696:	94 e0       	ldi	r25, 0x04	; 4
 698:	e9 16       	cp	r14, r25
 69a:	f1 04       	cpc	r15, r1
 69c:	49 f4       	brne	.+18     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
			{
				motors_stop();
 69e:	34 dd       	rcall	.-1432   	; 0x108 <motors_stop>
 6a0:	00 e0       	ldi	r16, 0x00	; 0
		
	
	*/
	
	
	count2=0;		// Resetting count2
 6a2:	10 e0       	ldi	r17, 0x00	; 0
 6a4:	cc 24       	eor	r12, r12
				_delay_ms(532);

				motors_move_right();
				speed(215,0);
				_delay_ms(990);
				count2=1;
 6a6:	c3 94       	inc	r12
 6a8:	d1 2c       	mov	r13, r1
 6aa:	e1 2c       	mov	r14, r1
	
	count2=0;		// Resetting count2

	while(1)		
	{
		flag1=0;
 6ac:	f1 2c       	mov	r15, r1
 6ae:	2c c0       	rjmp	.+88     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 6b0:	10 16       	cp	r1, r16
				motors_stop();
				break;
			}

			
			if((count1>0))
 6b2:	11 06       	cpc	r1, r17
 6b4:	fc f4       	brge	.+62     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
			{
				motors_move_forward();
 6b6:	14 dd       	rcall	.-1496   	; 0xe0 <motors_move_forward>
 6b8:	6e e6       	ldi	r22, 0x6E	; 110
				speed(110,110);
 6ba:	8e e6       	ldi	r24, 0x6E	; 110
 6bc:	0d dd       	rcall	.-1510   	; 0xd8 <speed>
 6be:	2f e7       	ldi	r18, 0x7F	; 127
 6c0:	8e e0       	ldi	r24, 0x0E	; 14
 6c2:	98 e0       	ldi	r25, 0x08	; 8
 6c4:	21 50       	subi	r18, 0x01	; 1
 6c6:	80 40       	sbci	r24, 0x00	; 0
 6c8:	90 40       	sbci	r25, 0x00	; 0
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6ce:	00 00       	nop
 6d0:	0a 2d       	mov	r16, r10
 6d2:	1b 2d       	mov	r17, r11
				_delay_ms(165);
				count1=1;
 6d4:	0f c0       	rjmp	.+30     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6d6:	04 dd       	rcall	.-1528   	; 0xe0 <motors_move_forward>
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 6d8:	6c e3       	ldi	r22, 0x3C	; 60
 6da:	8f e0       	ldi	r24, 0x0F	; 15
			speed(15,60);
 6dc:	fd dc       	rcall	.-1542   	; 0xd8 <speed>
 6de:	0a c0       	rjmp	.+20     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6e0:	8a 2d       	mov	r24, r10
 6e2:	9b 2d       	mov	r25, r11
			}
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 6e4:	dd 23       	and	r29, r29
			flag1=1;
			motors_move_forward();
			speed(15,60);
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 6e6:	31 f0       	breq	.+12     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6e8:	89 2b       	or	r24, r25
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
		{
			flag1=1;
			motors_move_forward();
 6ec:	f9 dc       	rcall	.-1550   	; 0xe0 <motors_move_forward>
 6ee:	6f e0       	ldi	r22, 0x0F	; 15
			speed(60,15);
 6f0:	8c e3       	ldi	r24, 0x3C	; 60
 6f2:	f2 dc       	rcall	.-1564   	; 0xd8 <speed>
 6f4:	2f ef       	ldi	r18, 0xFF	; 255
 6f6:	84 e3       	ldi	r24, 0x34	; 52
 6f8:	9c e0       	ldi	r25, 0x0C	; 12
 6fa:	21 50       	subi	r18, 0x01	; 1
 6fc:	80 40       	sbci	r24, 0x00	; 0
 6fe:	90 40       	sbci	r25, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 702:	00 c0       	rjmp	.+0      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 704:	00 00       	nop
 706:	80 cf       	rjmp	.-256    	; 0x608 <__LOCK_REGION_LENGTH__+0x208>

	while(1)		
	{
		flag1=0;

		if(count2==0 && (Path[2] != Path[3]))
 708:	01 15       	cp	r16, r1
 70a:	11 05       	cpc	r17, r1
 70c:	e1 f4       	brne	.+56     	; 0x746 <__LOCK_REGION_LENGTH__+0x346>

			}

			if(Path[2] > Path[3])
			{
				motors_move_backward();
 70e:	ed dc       	rcall	.-1574   	; 0xea <motors_move_backward>
 710:	64 e6       	ldi	r22, 0x64	; 100
				speed(100,100);
 712:	84 e6       	ldi	r24, 0x64	; 100
 714:	e1 dc       	rcall	.-1598   	; 0xd8 <speed>
 716:	2f ef       	ldi	r18, 0xFF	; 255
 718:	89 ef       	ldi	r24, 0xF9	; 249
 71a:	99 e1       	ldi	r25, 0x19	; 25
 71c:	21 50       	subi	r18, 0x01	; 1
 71e:	80 40       	sbci	r24, 0x00	; 0
 720:	90 40       	sbci	r25, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 724:	00 c0       	rjmp	.+0      	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
 726:	00 00       	nop
 728:	ea dc       	rcall	.-1580   	; 0xfe <motors_move_right>
				_delay_ms(532);

				motors_move_right();
 72a:	60 e0       	ldi	r22, 0x00	; 0
				speed(215,0);
 72c:	87 ed       	ldi	r24, 0xD7	; 215
 72e:	d4 dc       	rcall	.-1624   	; 0xd8 <speed>
 730:	2f ef       	ldi	r18, 0xFF	; 255
 732:	86 e5       	ldi	r24, 0x56	; 86
 734:	90 e3       	ldi	r25, 0x30	; 48
 736:	21 50       	subi	r18, 0x01	; 1
 738:	80 40       	sbci	r24, 0x00	; 0
 73a:	90 40       	sbci	r25, 0x00	; 0
 73c:	e1 f7       	brne	.-8      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 740:	00 00       	nop
				_delay_ms(990);
				count2=1;
 742:	0c 2d       	mov	r16, r12

			}

		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg &   (1 << left_wl_sensor_pin);
 744:	1d 2d       	mov	r17, r13
 746:	c3 b1       	in	r28, 0x03	; 3
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 748:	c8 70       	andi	r28, 0x08	; 8
		right_wl_sensor_data = wl_sensors_right_pin_reg &  (1 << right_wl_sensor_pin);
 74a:	93 b1       	in	r25, 0x03	; 3
 74c:	86 b1       	in	r24, 0x06	; 6
 74e:	d8 2f       	mov	r29, r24

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && flag1==0)
 750:	d1 70       	andi	r29, 0x01	; 1
 752:	94 ff       	sbrs	r25, 4
 754:	e1 c1       	rjmp	.+962    	; 0xb18 <__stack+0x219>
 756:	cc 23       	and	r28, r28
 758:	b1 f0       	breq	.+44     	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
 75a:	dd 23       	and	r29, r29
		{

			motors_stop();
 75c:	a1 f0       	breq	.+40     	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
 75e:	d4 dc       	rcall	.-1624   	; 0x108 <motors_stop>
 760:	2f ef       	ldi	r18, 0xFF	; 255
 762:	83 ed       	ldi	r24, 0xD3	; 211
 764:	90 e3       	ldi	r25, 0x30	; 48
 766:	21 50       	subi	r18, 0x01	; 1
 768:	80 40       	sbci	r24, 0x00	; 0
 76a:	90 40       	sbci	r25, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 770:	00 00       	nop
	
	*/
	
	
	count1=0;		// Resetting count1
	junction=0;		// Resetting junction
 772:	e1 2c       	mov	r14, r1
 774:	f1 2c       	mov	r15, r1
	
	
	*/
	
	
	count1=0;		// Resetting count1
 776:	00 e0       	ldi	r16, 0x00	; 0
			motors_move_forward();
			speed(100,100);
			_delay_ms(175);

		
			count1=1;
 778:	10 e0       	ldi	r17, 0x00	; 0
 77a:	aa 24       	eor	r10, r10
 77c:	a3 94       	inc	r10
	count1=0;		// Resetting count1
	junction=0;		// Resetting junction

	while(1)	
	{
		flag1=0;
 77e:	b1 2c       	mov	r11, r1
 780:	c1 2c       	mov	r12, r1
 782:	d1 2c       	mov	r13, r1
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 784:	20 c0       	rjmp	.+64     	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
 786:	ac dc       	rcall	.-1704   	; 0xe0 <motors_move_forward>
			speed(50,50);
 788:	62 e3       	ldi	r22, 0x32	; 50
 78a:	82 e3       	ldi	r24, 0x32	; 50
 78c:	a5 dc       	rcall	.-1718   	; 0xd8 <speed>
 78e:	c1 11       	cpse	r28, r1
		}
		
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
 790:	10 c0       	rjmp	.+32     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 792:	8c 2d       	mov	r24, r12
			
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 794:	9d 2d       	mov	r25, r13
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
		}
		
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
		{
			flag1=1;
			motors_move_left();
 798:	ad dc       	rcall	.-1702   	; 0xf4 <motors_move_left>
 79a:	62 e3       	ldi	r22, 0x32	; 50
			speed(31,50);
 79c:	8f e1       	ldi	r24, 0x1F	; 31
 79e:	9c dc       	rcall	.-1736   	; 0xd8 <speed>
 7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7a2:	dd 23       	and	r29, r29
 7a4:	31 f0       	breq	.+12     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 7a6:	89 2b       	or	r24, r25
 7a8:	21 f4       	brne	.+8      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
		{
			flag1=1;
			motors_move_right();
 7aa:	a9 dc       	rcall	.-1710   	; 0xfe <motors_move_right>
 7ac:	6f e1       	ldi	r22, 0x1F	; 31
			speed(50,31);
 7ae:	82 e3       	ldi	r24, 0x32	; 50
 7b0:	93 dc       	rcall	.-1754   	; 0xd8 <speed>
 7b2:	2f ef       	ldi	r18, 0xFF	; 255
 7b4:	84 e3       	ldi	r24, 0x34	; 52
 7b6:	9c e0       	ldi	r25, 0x0C	; 12
 7b8:	21 50       	subi	r18, 0x01	; 1
 7ba:	80 40       	sbci	r24, 0x00	; 0
 7bc:	90 40       	sbci	r25, 0x00	; 0
 7be:	e1 f7       	brne	.-8      	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
 7c2:	00 00       	nop
 7c4:	a1 cf       	rjmp	.-190    	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
 7c6:	01 15       	cp	r16, r1
		
			count1=1;
			
		}

		if(Path[4] > Path[3] && count1==0)
 7c8:	11 05       	cpc	r17, r1
 7ca:	49 f5       	brne	.+82     	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
 7cc:	8e dc       	rcall	.-1764   	; 0xea <motors_move_backward>
		{
			motors_move_backward();
 7ce:	64 e6       	ldi	r22, 0x64	; 100
 7d0:	84 e6       	ldi	r24, 0x64	; 100
			speed(100,100);
 7d2:	82 dc       	rcall	.-1788   	; 0xd8 <speed>
 7d4:	2f e7       	ldi	r18, 0x7F	; 127
 7d6:	81 e3       	ldi	r24, 0x31	; 49
 7d8:	97 e1       	ldi	r25, 0x17	; 23
 7da:	21 50       	subi	r18, 0x01	; 1
 7dc:	80 40       	sbci	r24, 0x00	; 0
 7de:	90 40       	sbci	r25, 0x00	; 0
 7e0:	e1 f7       	brne	.-8      	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
 7e4:	00 00       	nop
 7e6:	8b dc       	rcall	.-1770   	; 0xfe <motors_move_right>
			_delay_ms(475);
			
			motors_move_right();
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	83 ed       	ldi	r24, 0xD3	; 211
			speed(211,0);
 7ec:	75 dc       	rcall	.-1814   	; 0xd8 <speed>
 7ee:	2f ef       	ldi	r18, 0xFF	; 255
 7f0:	8d e3       	ldi	r24, 0x3D	; 61
 7f2:	90 e3       	ldi	r25, 0x30	; 48
 7f4:	21 50       	subi	r18, 0x01	; 1
 7f6:	80 40       	sbci	r24, 0x00	; 0
 7f8:	90 40       	sbci	r25, 0x00	; 0
 7fa:	e1 f7       	brne	.-8      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
 7fe:	00 00       	nop
 800:	6f dc       	rcall	.-1826   	; 0xe0 <motors_move_forward>
			_delay_ms(988);
			
			motors_move_forward();
 802:	64 e6       	ldi	r22, 0x64	; 100
 804:	84 e6       	ldi	r24, 0x64	; 100
			speed(100,100);
 806:	68 dc       	rcall	.-1840   	; 0xd8 <speed>
 808:	2f e7       	ldi	r18, 0x7F	; 127
 80a:	8b e8       	ldi	r24, 0x8B	; 139
 80c:	98 e0       	ldi	r25, 0x08	; 8
 80e:	21 50       	subi	r18, 0x01	; 1
 810:	80 40       	sbci	r24, 0x00	; 0
 812:	90 40       	sbci	r25, 0x00	; 0
 814:	e1 f7       	brne	.-8      	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
 816:	00 c0       	rjmp	.+0      	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 818:	00 00       	nop
 81a:	0a 2d       	mov	r16, r10
			_delay_ms(175);

		
			count1=1;
 81c:	1b 2d       	mov	r17, r11
 81e:	c3 b1       	in	r28, 0x03	; 3
			
		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg & (1 << left_wl_sensor_pin);
 820:	c8 70       	andi	r28, 0x08	; 8
 822:	93 b1       	in	r25, 0x03	; 3
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 824:	86 b1       	in	r24, 0x06	; 6
		right_wl_sensor_data = wl_sensors_right_pin_reg & (1 << right_wl_sensor_pin);
 826:	d8 2f       	mov	r29, r24
 828:	d1 70       	andi	r29, 0x01	; 1
 82a:	94 ff       	sbrs	r25, 4
		

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 82c:	7a c1       	rjmp	.+756    	; 0xb22 <__stack+0x223>
 82e:	cc 23       	and	r28, r28
 830:	09 f4       	brne	.+2      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
 832:	48 c1       	rjmp	.+656    	; 0xac4 <__stack+0x1c5>
 834:	dd 23       	and	r29, r29
 836:	09 f4       	brne	.+2      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
 838:	45 c1       	rjmp	.+650    	; 0xac4 <__stack+0x1c5>
		{

			flag1=1;
			motors_stop();
 83a:	66 dc       	rcall	.-1844   	; 0x108 <motors_stop>
 83c:	2f ef       	ldi	r18, 0xFF	; 255
 83e:	83 ed       	ldi	r24, 0xD3	; 211
 840:	90 e3       	ldi	r25, 0x30	; 48
 842:	21 50       	subi	r18, 0x01	; 1
 844:	80 40       	sbci	r24, 0x00	; 0
 846:	90 40       	sbci	r25, 0x00	; 0
 848:	e1 f7       	brne	.-8      	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
 84a:	00 c0       	rjmp	.+0      	; 0x84c <__LOCK_REGION_LENGTH__+0x44c>
 84c:	00 00       	nop
 84e:	2f ef       	ldi	r18, 0xFF	; 255
			_delay_ms(1000);
			junction++;
 850:	e2 1a       	sub	r14, r18
 852:	f2 0a       	sbc	r15, r18
 854:	82 e0       	ldi	r24, 0x02	; 2
			
			if (((junction==Path[3]-Path[4]) && (Path[4]<Path[3])) || ((junction==Path[4]-Path[3]) && (Path[4]>=Path[3])))
 856:	e8 16       	cp	r14, r24
 858:	f1 04       	cpc	r15, r1
 85a:	31 f4       	brne	.+12     	; 0x868 <__LOCK_REGION_LENGTH__+0x468>
			{
				motors_stop();
 85c:	55 dc       	rcall	.-1878   	; 0x108 <motors_stop>
 85e:	c0 e0       	ldi	r28, 0x00	; 0
		and the loop breaks. If Path[3]==Path[4], then robot will never turn right or left in this loop.
	
	*/
	
	
	count2=0;		// Resetting count2
 860:	d0 e0       	ldi	r29, 0x00	; 0
 862:	01 e0       	ldi	r16, 0x01	; 1
 864:	10 e0       	ldi	r17, 0x00	; 0
 866:	2c c0       	rjmp	.+88     	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
 868:	10 16       	cp	r1, r16
	
				count1=1;
				
			}

			if( (Path[4] > Path[3]) && (count1>0))
 86a:	11 06       	cpc	r1, r17
 86c:	fc f4       	brge	.+62     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
 86e:	38 dc       	rcall	.-1936   	; 0xe0 <motors_move_forward>
			{
				motors_move_forward();
 870:	6e e6       	ldi	r22, 0x6E	; 110
 872:	8e e6       	ldi	r24, 0x6E	; 110
				speed(110,110);
 874:	31 dc       	rcall	.-1950   	; 0xd8 <speed>
 876:	9f e7       	ldi	r25, 0x7F	; 127
 878:	2e e0       	ldi	r18, 0x0E	; 14
 87a:	88 e0       	ldi	r24, 0x08	; 8
 87c:	91 50       	subi	r25, 0x01	; 1
 87e:	20 40       	sbci	r18, 0x00	; 0
 880:	80 40       	sbci	r24, 0x00	; 0
 882:	e1 f7       	brne	.-8      	; 0x87c <__LOCK_REGION_LENGTH__+0x47c>
 884:	00 c0       	rjmp	.+0      	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
 886:	00 00       	nop
 888:	0a 2d       	mov	r16, r10
				_delay_ms(165);
			
				count1=1;
 88a:	1b 2d       	mov	r17, r11
 88c:	0f c0       	rjmp	.+30     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 88e:	28 dc       	rcall	.-1968   	; 0xe0 <motors_move_forward>
			speed(15,60);
 890:	6c e3       	ldi	r22, 0x3C	; 60
 892:	8f e0       	ldi	r24, 0x0F	; 15
 894:	21 dc       	rcall	.-1982   	; 0xd8 <speed>
 896:	0a c0       	rjmp	.+20     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
 898:	8a 2d       	mov	r24, r10
			
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 89a:	9b 2d       	mov	r25, r11
 89c:	dd 23       	and	r29, r29
			flag1=1;
			motors_move_forward();
			speed(15,60);
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 89e:	31 f0       	breq	.+12     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
 8a0:	89 2b       	or	r24, r25
 8a2:	21 f4       	brne	.+8      	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
		{
			flag1=1;
			motors_move_forward();
 8a4:	1d dc       	rcall	.-1990   	; 0xe0 <motors_move_forward>
			speed(60,15);
 8a6:	6f e0       	ldi	r22, 0x0F	; 15
 8a8:	8c e3       	ldi	r24, 0x3C	; 60
 8aa:	16 dc       	rcall	.-2004   	; 0xd8 <speed>
 8ac:	9f ef       	ldi	r25, 0xFF	; 255
 8ae:	24 e3       	ldi	r18, 0x34	; 52
 8b0:	8c e0       	ldi	r24, 0x0C	; 12
 8b2:	91 50       	subi	r25, 0x01	; 1
 8b4:	20 40       	sbci	r18, 0x00	; 0
 8b6:	80 40       	sbci	r24, 0x00	; 0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <__LOCK_REGION_LENGTH__+0x4bc>
 8bc:	00 00       	nop
 8be:	83 cf       	rjmp	.-250    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
 8c0:	20 97       	sbiw	r28, 0x00	; 0
	count2=0;		// Resetting count2

	while(1)		
	{

		if(count2==0 && (Path[3] != Path[4]))
 8c2:	e1 f4       	brne	.+56     	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
 8c4:	12 dc       	rcall	.-2012   	; 0xea <motors_move_backward>
		{
			if(Path[3] < Path[4])
			{
				motors_move_backward();
 8c6:	64 e6       	ldi	r22, 0x64	; 100
 8c8:	84 e6       	ldi	r24, 0x64	; 100
				speed(100,100);
 8ca:	06 dc       	rcall	.-2036   	; 0xd8 <speed>
 8cc:	9f ef       	ldi	r25, 0xFF	; 255
 8ce:	2e ec       	ldi	r18, 0xCE	; 206
 8d0:	8c e1       	ldi	r24, 0x1C	; 28
 8d2:	91 50       	subi	r25, 0x01	; 1
 8d4:	20 40       	sbci	r18, 0x00	; 0
 8d6:	80 40       	sbci	r24, 0x00	; 0
 8d8:	e1 f7       	brne	.-8      	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <__LOCK_REGION_LENGTH__+0x4dc>
 8dc:	00 00       	nop
 8de:	0a dc       	rcall	.-2028   	; 0xf4 <motors_move_left>
 8e0:	60 ed       	ldi	r22, 0xD0	; 208
				_delay_ms(590);

				motors_move_left();
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	f9 db       	rcall	.-2062   	; 0xd8 <speed>
				speed(0,208);
 8e6:	9f ef       	ldi	r25, 0xFF	; 255
 8e8:	23 ed       	ldi	r18, 0xD3	; 211
 8ea:	80 e3       	ldi	r24, 0x30	; 48
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	20 40       	sbci	r18, 0x00	; 0
 8f0:	80 40       	sbci	r24, 0x00	; 0
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__LOCK_REGION_LENGTH__+0x4f6>
 8f6:	00 00       	nop
 8f8:	c0 2f       	mov	r28, r16
 8fa:	d1 2f       	mov	r29, r17
 8fc:	93 b1       	in	r25, 0x03	; 3
			}

		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg &   (1 << left_wl_sensor_pin);
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 8fe:	83 b1       	in	r24, 0x03	; 3
		right_wl_sensor_data = wl_sensors_right_pin_reg &  (1 << right_wl_sensor_pin);
 900:	26 b1       	in	r18, 0x06	; 6

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data)
 902:	84 ff       	sbrs	r24, 4
 904:	16 c0       	rjmp	.+44     	; 0x932 <__stack+0x33>
 906:	93 ff       	sbrs	r25, 3
 908:	14 c0       	rjmp	.+40     	; 0x932 <__stack+0x33>
 90a:	20 ff       	sbrs	r18, 0
		{

			motors_stop();
 90c:	12 c0       	rjmp	.+36     	; 0x932 <__stack+0x33>
 90e:	fc db       	rcall	.-2056   	; 0x108 <motors_stop>
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	93 ed       	ldi	r25, 0xD3	; 211
 914:	20 e3       	ldi	r18, 0x30	; 48
 916:	81 50       	subi	r24, 0x01	; 1
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	20 40       	sbci	r18, 0x00	; 0
 91c:	e1 f7       	brne	.-8      	; 0x916 <__stack+0x17>
		end point. After reaching end point, the loop breaks.

	*/
	
	
	count1=0;			// Resetting count1
 91e:	00 c0       	rjmp	.+0      	; 0x920 <__stack+0x21>
 920:	00 00       	nop
			
			motors_move_forward();
			speed(100,100);
			_delay_ms(175);

			count1=1;
 922:	00 e0       	ldi	r16, 0x00	; 0
 924:	10 e0       	ldi	r17, 0x00	; 0
 926:	cc 24       	eor	r12, r12
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 928:	c3 94       	inc	r12
 92a:	d1 2c       	mov	r13, r1
			
		}
		
		else
		{
			motors_move_forward();
 92c:	e1 2c       	mov	r14, r1
			speed(50,50);
 92e:	f1 2c       	mov	r15, r1
 930:	0e c0       	rjmp	.+28     	; 0x94e <__stack+0x4f>
 932:	d6 db       	rcall	.-2132   	; 0xe0 <motors_move_forward>
 934:	62 e3       	ldi	r22, 0x32	; 50
 936:	82 e3       	ldi	r24, 0x32	; 50
 938:	cf db       	rcall	.-2146   	; 0xd8 <speed>
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	94 e3       	ldi	r25, 0x34	; 52
 93e:	2c e0       	ldi	r18, 0x0C	; 12
 940:	81 50       	subi	r24, 0x01	; 1
 942:	90 40       	sbci	r25, 0x00	; 0
 944:	20 40       	sbci	r18, 0x00	; 0
			
			count1=1;
			
		}

		if(Path[4] > Path[3] && count1==0)
 946:	e1 f7       	brne	.-8      	; 0x940 <__stack+0x41>
 948:	00 c0       	rjmp	.+0      	; 0x94a <__stack+0x4b>
 94a:	00 00       	nop
		{
			motors_move_backward();
 94c:	b9 cf       	rjmp	.-142    	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
 94e:	01 15       	cp	r16, r1
			speed(100,100);
 950:	11 05       	cpc	r17, r1
 952:	49 f5       	brne	.+82     	; 0x9a6 <__stack+0xa7>
 954:	ca db       	rcall	.-2156   	; 0xea <motors_move_backward>
 956:	64 e6       	ldi	r22, 0x64	; 100
 958:	84 e6       	ldi	r24, 0x64	; 100
 95a:	be db       	rcall	.-2180   	; 0xd8 <speed>
 95c:	8f e7       	ldi	r24, 0x7F	; 127
 95e:	91 e3       	ldi	r25, 0x31	; 49
 960:	27 e1       	ldi	r18, 0x17	; 23
 962:	81 50       	subi	r24, 0x01	; 1
 964:	90 40       	sbci	r25, 0x00	; 0
 966:	20 40       	sbci	r18, 0x00	; 0
 968:	e1 f7       	brne	.-8      	; 0x962 <__stack+0x63>
			_delay_ms(475);
			
			motors_move_right();
 96a:	00 c0       	rjmp	.+0      	; 0x96c <__stack+0x6d>
			speed(211,0);
 96c:	00 00       	nop
 96e:	c7 db       	rcall	.-2162   	; 0xfe <motors_move_right>
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	83 ed       	ldi	r24, 0xD3	; 211
 974:	b1 db       	rcall	.-2206   	; 0xd8 <speed>
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	90 e5       	ldi	r25, 0x50	; 80
 97a:	21 e3       	ldi	r18, 0x31	; 49
 97c:	81 50       	subi	r24, 0x01	; 1
 97e:	90 40       	sbci	r25, 0x00	; 0
 980:	20 40       	sbci	r18, 0x00	; 0
 982:	e1 f7       	brne	.-8      	; 0x97c <__stack+0x7d>
			_delay_ms(1010);
			
			motors_move_forward();
 984:	00 c0       	rjmp	.+0      	; 0x986 <__stack+0x87>
 986:	00 00       	nop
			speed(100,100);
 988:	ab db       	rcall	.-2218   	; 0xe0 <motors_move_forward>
 98a:	64 e6       	ldi	r22, 0x64	; 100
 98c:	84 e6       	ldi	r24, 0x64	; 100
 98e:	a4 db       	rcall	.-2232   	; 0xd8 <speed>
 990:	8f e7       	ldi	r24, 0x7F	; 127
 992:	9b e8       	ldi	r25, 0x8B	; 139
 994:	28 e0       	ldi	r18, 0x08	; 8
 996:	81 50       	subi	r24, 0x01	; 1
 998:	90 40       	sbci	r25, 0x00	; 0
 99a:	20 40       	sbci	r18, 0x00	; 0
 99c:	e1 f7       	brne	.-8      	; 0x996 <__stack+0x97>
 99e:	00 c0       	rjmp	.+0      	; 0x9a0 <__stack+0xa1>
			_delay_ms(175);

			count1=1;
 9a0:	00 00       	nop
			
		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg & (1 << left_wl_sensor_pin);
 9a2:	0c 2d       	mov	r16, r12
 9a4:	1d 2d       	mov	r17, r13
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 9a6:	c3 b1       	in	r28, 0x03	; 3
		right_wl_sensor_data = wl_sensors_right_pin_reg & (1 << right_wl_sensor_pin);
 9a8:	c8 70       	andi	r28, 0x08	; 8
 9aa:	93 b1       	in	r25, 0x03	; 3
		

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data && (flag1==0))
 9ac:	86 b1       	in	r24, 0x06	; 6
 9ae:	d8 2f       	mov	r29, r24
 9b0:	d1 70       	andi	r29, 0x01	; 1
 9b2:	94 ff       	sbrs	r25, 4
 9b4:	bb c0       	rjmp	.+374    	; 0xb2c <__stack+0x22d>
		{

			flag1=1;
			motors_stop();
 9b6:	cc 23       	and	r28, r28
 9b8:	91 f0       	breq	.+36     	; 0x9de <__stack+0xdf>
 9ba:	dd 23       	and	r29, r29
 9bc:	81 f0       	breq	.+32     	; 0x9de <__stack+0xdf>
 9be:	a4 db       	rcall	.-2232   	; 0x108 <motors_stop>
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	93 ed       	ldi	r25, 0xD3	; 211
 9c4:	20 e3       	ldi	r18, 0x30	; 48
 9c6:	81 50       	subi	r24, 0x01	; 1
			_delay_ms(1000);
			junction++;
			
			if (((junction==5-Path[4]) && (Path[4]<5)) || ((junction==Path[4]-4) && (Path[4]>=5)))
			{
				motors_stop();
 9c8:	90 40       	sbci	r25, 0x00	; 0
 9ca:	20 40       	sbci	r18, 0x00	; 0
		turns left and continues to move forward until it meets the STOP point. After meeting the junction, the turtle stops
		and the loop breaks.

	*/
	
	count2=0;		// Resetting count2
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <__stack+0xc7>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <__stack+0xd1>
 9d0:	00 00       	nop
 9d2:	9a db       	rcall	.-2252   	; 0x108 <motors_stop>
 9d4:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 9d6:	d0 e0       	ldi	r29, 0x00	; 0
 9d8:	01 e0       	ldi	r16, 0x01	; 1
			speed(100,100);
 9da:	10 e0       	ldi	r17, 0x00	; 0
 9dc:	20 c0       	rjmp	.+64     	; 0xa1e <__stack+0x11f>
 9de:	80 db       	rcall	.-2304   	; 0xe0 <motors_move_forward>
 9e0:	64 e6       	ldi	r22, 0x64	; 100
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 9e2:	84 e6       	ldi	r24, 0x64	; 100
 9e4:	79 db       	rcall	.-2318   	; 0xd8 <speed>

		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 9e6:	c1 11       	cpse	r28, r1
 9e8:	10 c0       	rjmp	.+32     	; 0xa0a <__stack+0x10b>
 9ea:	8c 2d       	mov	r24, r12
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 9ec:	9d 2d       	mov	r25, r13
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <__stack+0xfb>
			speed(15,60);
 9f0:	77 db       	rcall	.-2322   	; 0xe0 <motors_move_forward>
 9f2:	6c e3       	ldi	r22, 0x3C	; 60
 9f4:	8f e0       	ldi	r24, 0x0F	; 15
 9f6:	70 db       	rcall	.-2336   	; 0xd8 <speed>
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__stack+0x10b>
		}
		
		if(( right_wl_sensor_data || ( right_wl_sensor_data && center_wl_sensor_data)) && flag1==0)
 9fa:	dd 23       	and	r29, r29
 9fc:	31 f0       	breq	.+12     	; 0xa0a <__stack+0x10b>
 9fe:	89 2b       	or	r24, r25
 a00:	21 f4       	brne	.+8      	; 0xa0a <__stack+0x10b>
		{
			flag1=1;
			motors_move_forward();
 a02:	6e db       	rcall	.-2340   	; 0xe0 <motors_move_forward>
 a04:	6f e0       	ldi	r22, 0x0F	; 15
			speed(60,15);
 a06:	8c e3       	ldi	r24, 0x3C	; 60
 a08:	67 db       	rcall	.-2354   	; 0xd8 <speed>
 a0a:	8f ef       	ldi	r24, 0xFF	; 255
 a0c:	94 e3       	ldi	r25, 0x34	; 52
 a0e:	2c e0       	ldi	r18, 0x0C	; 12
 a10:	81 50       	subi	r24, 0x01	; 1
 a12:	90 40       	sbci	r25, 0x00	; 0
 a14:	20 40       	sbci	r18, 0x00	; 0
 a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x111>
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <__stack+0x11b>
 a1a:	00 00       	nop
 a1c:	98 cf       	rjmp	.-208    	; 0x94e <__stack+0x4f>
 a1e:	20 97       	sbiw	r28, 0x00	; 0
 a20:	e1 f4       	brne	.+56     	; 0xa5a <__stack+0x15b>
	count2=0;		// Resetting count2

	while(1)		
	{

		if(count2==0)
 a22:	63 db       	rcall	.-2362   	; 0xea <motors_move_backward>
		{
			if(Path[4]<5)
			{
				motors_move_backward();
 a24:	64 e6       	ldi	r22, 0x64	; 100
 a26:	84 e6       	ldi	r24, 0x64	; 100
				speed(100,100);
 a28:	57 db       	rcall	.-2386   	; 0xd8 <speed>
 a2a:	8f e7       	ldi	r24, 0x7F	; 127
 a2c:	96 e6       	ldi	r25, 0x66	; 102
 a2e:	23 e2       	ldi	r18, 0x23	; 35
 a30:	81 50       	subi	r24, 0x01	; 1
 a32:	90 40       	sbci	r25, 0x00	; 0
 a34:	20 40       	sbci	r18, 0x00	; 0
 a36:	e1 f7       	brne	.-8      	; 0xa30 <__stack+0x131>
 a38:	00 c0       	rjmp	.+0      	; 0xa3a <__stack+0x13b>
 a3a:	00 00       	nop
 a3c:	5b db       	rcall	.-2378   	; 0xf4 <motors_move_left>
 a3e:	60 ed       	ldi	r22, 0xD0	; 208
 a40:	80 e0       	ldi	r24, 0x00	; 0
				_delay_ms(725);

				motors_move_left();
 a42:	4a db       	rcall	.-2412   	; 0xd8 <speed>
 a44:	8f ef       	ldi	r24, 0xFF	; 255
				speed(0,208);
 a46:	93 ed       	ldi	r25, 0xD3	; 211
 a48:	20 e3       	ldi	r18, 0x30	; 48
 a4a:	81 50       	subi	r24, 0x01	; 1
 a4c:	90 40       	sbci	r25, 0x00	; 0
 a4e:	20 40       	sbci	r18, 0x00	; 0
 a50:	e1 f7       	brne	.-8      	; 0xa4a <__stack+0x14b>
 a52:	00 c0       	rjmp	.+0      	; 0xa54 <__stack+0x155>
 a54:	00 00       	nop
 a56:	c0 2f       	mov	r28, r16
 a58:	d1 2f       	mov	r29, r17
 a5a:	93 b1       	in	r25, 0x03	; 3
 a5c:	83 b1       	in	r24, 0x03	; 3
 a5e:	26 b1       	in	r18, 0x06	; 6
 a60:	84 ff       	sbrs	r24, 4
 a62:	04 c0       	rjmp	.+8      	; 0xa6c <__stack+0x16d>

			}

		}
		
		left_wl_sensor_data  = wl_sensors_left_pin_reg &   (1 << left_wl_sensor_pin);
 a64:	93 ff       	sbrs	r25, 3
		center_wl_sensor_data= wl_sensors_center_pin_reg & (1 << center_wl_sensor_pin);
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <__stack+0x16d>
		right_wl_sensor_data = wl_sensors_right_pin_reg &  (1 << right_wl_sensor_pin);
 a68:	20 fd       	sbrc	r18, 0

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data)
 a6a:	65 c0       	rjmp	.+202    	; 0xb36 <__stack+0x237>
 a6c:	39 db       	rcall	.-2446   	; 0xe0 <motors_move_forward>
 a6e:	62 e3       	ldi	r22, 0x32	; 50
 a70:	82 e3       	ldi	r24, 0x32	; 50
 a72:	32 db       	rcall	.-2460   	; 0xd8 <speed>
 a74:	2f ef       	ldi	r18, 0xFF	; 255
			
		}
		
		else
		{
			motors_move_forward();
 a76:	84 e3       	ldi	r24, 0x34	; 52
 a78:	9c e0       	ldi	r25, 0x0C	; 12
			speed(50,50);
 a7a:	21 50       	subi	r18, 0x01	; 1
 a7c:	80 40       	sbci	r24, 0x00	; 0
 a7e:	90 40       	sbci	r25, 0x00	; 0
 a80:	e1 f7       	brne	.-8      	; 0xa7a <__stack+0x17b>
 a82:	00 c0       	rjmp	.+0      	; 0xa84 <__stack+0x185>
 a84:	00 00       	nop
 a86:	cb cf       	rjmp	.-106    	; 0xa1e <__stack+0x11f>
 a88:	8c 2d       	mov	r24, r12
 a8a:	9d 2d       	mov	r25, r13
 a8c:	24 c0       	rjmp	.+72     	; 0xad6 <__stack+0x1d7>
 a8e:	91 11       	cpse	r25, r1
 a90:	d0 cb       	rjmp	.-2144   	; 0x232 <main+0x120>
 a92:	c1 cb       	rjmp	.-2174   	; 0x216 <main+0x104>
 a94:	99 23       	and	r25, r25
			{
				motors_move_forward();
				speed(110,110);
				_delay_ms(165);
			
				count1=1;
 a96:	09 f4       	brne	.+2      	; 0xa9a <__stack+0x19b>
 a98:	d0 cb       	rjmp	.-2144   	; 0x23a <main+0x128>
 a9a:	cb cb       	rjmp	.-2154   	; 0x232 <main+0x120>
				
			}
				
		}
		
		if(center_wl_sensor_data && !right_wl_sensor_data && !left_wl_sensor_data && flag1==0)
 a9c:	99 23       	and	r25, r25
 a9e:	09 f4       	brne	.+2      	; 0xaa2 <__stack+0x1a3>
 aa0:	cc cb       	rjmp	.-2152   	; 0x23a <main+0x128>
			flag1=1;
			motors_move_forward();
			speed(15,60);
		}
		
		if((right_wl_sensor_data || (center_wl_sensor_data && right_wl_sensor_data)) && flag1==0)
 aa2:	c7 cb       	rjmp	.-2162   	; 0x232 <main+0x120>
 aa4:	1d db       	rcall	.-2502   	; 0xe0 <motors_move_forward>
 aa6:	64 e6       	ldi	r22, 0x64	; 100
 aa8:	84 e6       	ldi	r24, 0x64	; 100
 aaa:	16 db       	rcall	.-2516   	; 0xd8 <speed>
 aac:	c1 11       	cpse	r28, r1
 aae:	59 cd       	rjmp	.-1358   	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 ab0:	8c 2d       	mov	r24, r12
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 ab2:	9d 2d       	mov	r25, r13
 ab4:	4e cd       	rjmp	.-1380   	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
			speed(100,100);
 ab6:	14 db       	rcall	.-2520   	; 0xe0 <motors_move_forward>
 ab8:	64 e6       	ldi	r22, 0x64	; 100
 aba:	84 e6       	ldi	r24, 0x64	; 100
 abc:	0d db       	rcall	.-2534   	; 0xd8 <speed>
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 abe:	c1 11       	cpse	r28, r1
 ac0:	19 ce       	rjmp	.-974    	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
			
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
 ac2:	0e ce       	rjmp	.-996    	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 ac4:	0d db       	rcall	.-2534   	; 0xe0 <motors_move_forward>
 ac6:	64 e6       	ldi	r22, 0x64	; 100
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 ac8:	84 e6       	ldi	r24, 0x64	; 100
 aca:	06 db       	rcall	.-2548   	; 0xd8 <speed>
			speed(100,100);
 acc:	c1 11       	cpse	r28, r1
 ace:	ee ce       	rjmp	.-548    	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
 ad0:	e3 ce       	rjmp	.-570    	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
 ad2:	8e 2d       	mov	r24, r14
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 ad4:	9f 2d       	mov	r25, r15
 ad6:	89 2b       	or	r24, r25
 ad8:	09 f0       	breq	.+2      	; 0xadc <__stack+0x1dd>
		}
		
		if(center_wl_sensor_data && flag1==0)
		{
			flag1=1;
			motors_move_forward();
 ada:	af cb       	rjmp	.-2210   	; 0x23a <main+0x128>
 adc:	a5 cb       	rjmp	.-2230   	; 0x228 <main+0x116>
			speed(100,100);
 ade:	88 23       	and	r24, r24
 ae0:	09 f4       	brne	.+2      	; 0xae4 <__stack+0x1e5>
 ae2:	9e cb       	rjmp	.-2244   	; 0x220 <main+0x10e>
 ae4:	a1 cb       	rjmp	.-2238   	; 0x228 <main+0x116>
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 ae6:	c1 11       	cpse	r28, r1
 ae8:	f8 cb       	rjmp	.-2064   	; 0x2da <main+0x1c8>
 aea:	8e 2d       	mov	r24, r14
	

    while(1)
    {
		
		flag1=0;
 aec:	9f 2d       	mov	r25, r15
 aee:	fa cb       	rjmp	.-2060   	; 0x2e4 <main+0x1d2>
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if((left_wl_sensor_data || (center_wl_sensor_data && left_wl_sensor_data)) && flag1==0)
 af0:	c1 11       	cpse	r28, r1
 af2:	57 cc       	rjmp	.-1874   	; 0x3a2 <main+0x290>
 af4:	8e 2d       	mov	r24, r14
 af6:	9f 2d       	mov	r25, r15
 af8:	59 cc       	rjmp	.-1870   	; 0x3ac <main+0x29a>
 afa:	c1 11       	cpse	r28, r1
 afc:	b1 cc       	rjmp	.-1694   	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 afe:	8e 2d       	mov	r24, r14
			flag1=1;
			motors_move_forward();
			speed(50,50);
		}
		 
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
 b00:	9f 2d       	mov	r25, r15
 b02:	b3 cc       	rjmp	.-1690   	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		
	*/

	while(1)
	{
		flag1=0;
 b04:	c1 11       	cpse	r28, r1
 b06:	20 cd       	rjmp	.-1472   	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 b08:	8a 2d       	mov	r24, r10
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 b0a:	9b 2d       	mov	r25, r11
 b0c:	22 cd       	rjmp	.-1468   	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 b0e:	c1 11       	cpse	r28, r1
 b10:	e2 cd       	rjmp	.-1084   	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 b12:	8c 2d       	mov	r24, r12
			flag1=1;
			motors_move_forward();
			speed(50,50);
		}
		
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
 b14:	9d 2d       	mov	r25, r13
 b16:	e6 cd       	rjmp	.-1076   	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
	
	count2=0;		// Resetting count2

	while(1)		
	{
		flag1=0;
 b18:	c1 11       	cpse	r28, r1
 b1a:	3e ce       	rjmp	.-900    	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
 b1c:	8e 2d       	mov	r24, r14
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 b1e:	9f 2d       	mov	r25, r15
 b20:	40 ce       	rjmp	.-896    	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>


	while(1)	
	{
		
		flag1=0;
 b22:	c1 11       	cpse	r28, r1
 b24:	b4 ce       	rjmp	.-664    	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
 b26:	8c 2d       	mov	r24, r12
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 b28:	9d 2d       	mov	r25, r13
 b2a:	b8 ce       	rjmp	.-656    	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
	junction=0;			// Resetting junction


	while(1)
	{
		flag1=0;
 b2c:	c1 11       	cpse	r28, r1
 b2e:	60 cf       	rjmp	.-320    	; 0x9f0 <__stack+0xf1>
 b30:	8e 2d       	mov	r24, r14
			flag1=1;
			motors_move_forward();
			speed(50,50);
		}
		
		if( ( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data ) ) && flag1==0)
 b32:	9f 2d       	mov	r25, r15
 b34:	62 cf       	rjmp	.-316    	; 0x9fa <__stack+0xfb>
	
	count2=0;		// Resetting count2

	while(1)		
	{
		flag1=0;
 b36:	e8 da       	rcall	.-2608   	; 0x108 <motors_stop>
 b38:	2f ef       	ldi	r18, 0xFF	; 255
 b3a:	83 ed       	ldi	r24, 0xD3	; 211
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 b3c:	90 e3       	ldi	r25, 0x30	; 48
 b3e:	21 50       	subi	r18, 0x01	; 1
	count1=0;		// Resetting count1
	junction=0;		// Resetting junction

	while(1)	
	{
		flag1=0;
 b40:	80 40       	sbci	r24, 0x00	; 0
 b42:	90 40       	sbci	r25, 0x00	; 0
 b44:	e1 f7       	brne	.-8      	; 0xb3e <__stack+0x23f>
			flag1=1;
			motors_move_forward();
			speed(100,100);
		}
		
		if(( left_wl_sensor_data ||  ( left_wl_sensor_data && center_wl_sensor_data )) && flag1==0)
 b46:	00 c0       	rjmp	.+0      	; 0xb48 <__stack+0x249>
 b48:	00 00       	nop
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	df 91       	pop	r29
		right_wl_sensor_data = wl_sensors_right_pin_reg &  (1 << right_wl_sensor_pin);

		if(center_wl_sensor_data && left_wl_sensor_data && right_wl_sensor_data)
		{

			motors_stop();
 b50:	cf 91       	pop	r28
 b52:	1f 91       	pop	r17
 b54:	0f 91       	pop	r16
 b56:	ff 90       	pop	r15
 b58:	ef 90       	pop	r14
 b5a:	df 90       	pop	r13
 b5c:	cf 90       	pop	r12
 b5e:	bf 90       	pop	r11
 b60:	af 90       	pop	r10
 b62:	08 95       	ret

00000b64 <_exit>:
 b64:	f8 94       	cli

00000b66 <__stop_program>:
		
	}
	

	return 0;
}
 b66:	ff cf       	rjmp	.-2      	; 0xb66 <__stop_program>
