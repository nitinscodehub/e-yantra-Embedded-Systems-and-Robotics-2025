
lcd_special_char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  0000089c  00000910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d8b  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f9  00000000  00000000  0000286b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bbf  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00003d24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000134c  00000000  00000000  00004376  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3c       	cpi	r26, 0xC6	; 198
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 ec       	ldi	r26, 0xC6	; 198
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3c       	cpi	r26, 0xC6	; 198
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 91 01 	call	0x322	; 0x322 <main>
  9e:	0c 94 4c 04 	jmp	0x898	; 0x898 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_port_config>:
	if(digits > 5)
	{
		lcd_wr_char(row, column, 'E');
		column+=1;
	}
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	87 60       	ori	r24, 0x07	; 7
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 6f       	ori	r24, 0xF0	; 240
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	08 95       	ret

000000c0 <lcd_set_4bit>:
  c0:	8f e9       	ldi	r24, 0x9F	; 159
  c2:	9f e0       	ldi	r25, 0x0F	; 15
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_set_4bit+0x4>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_set_4bit+0xa>
  ca:	00 00       	nop
  cc:	28 98       	cbi	0x05, 0	; 5
  ce:	2a 98       	cbi	0x05, 2	; 5
  d0:	80 e3       	ldi	r24, 0x30	; 48
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	29 9a       	sbi	0x05, 1	; 5
  d6:	ef e1       	ldi	r30, 0x1F	; 31
  d8:	fe e4       	ldi	r31, 0x4E	; 78
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_set_4bit+0x1a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_set_4bit+0x20>
  e0:	00 00       	nop
  e2:	29 98       	cbi	0x05, 1	; 5
  e4:	ef e9       	ldi	r30, 0x9F	; 159
  e6:	ff e0       	ldi	r31, 0x0F	; 15
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_set_4bit+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_set_4bit+0x2e>
  ee:	00 00       	nop
  f0:	28 98       	cbi	0x05, 0	; 5
  f2:	2a 98       	cbi	0x05, 2	; 5
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	29 9a       	sbi	0x05, 1	; 5
  f8:	ef e1       	ldi	r30, 0x1F	; 31
  fa:	fe e4       	ldi	r31, 0x4E	; 78
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_set_4bit+0x3c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_set_4bit+0x42>
 102:	00 00       	nop
 104:	29 98       	cbi	0x05, 1	; 5
 106:	ef e9       	ldi	r30, 0x9F	; 159
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_set_4bit+0x4a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_set_4bit+0x50>
 110:	00 00       	nop
 112:	28 98       	cbi	0x05, 0	; 5
 114:	2a 98       	cbi	0x05, 2	; 5
 116:	8b b9       	out	0x0b, r24	; 11
 118:	29 9a       	sbi	0x05, 1	; 5
 11a:	8f e1       	ldi	r24, 0x1F	; 31
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_set_4bit+0x5e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_set_4bit+0x64>
 124:	00 00       	nop
 126:	29 98       	cbi	0x05, 1	; 5
 128:	ef e9       	ldi	r30, 0x9F	; 159
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_set_4bit+0x6c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_set_4bit+0x72>
 132:	00 00       	nop
 134:	28 98       	cbi	0x05, 0	; 5
 136:	2a 98       	cbi	0x05, 2	; 5
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	29 9a       	sbi	0x05, 1	; 5
 13e:	8f e1       	ldi	r24, 0x1F	; 31
 140:	9e e4       	ldi	r25, 0x4E	; 78
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x82>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x88>
 148:	00 00       	nop
 14a:	29 98       	cbi	0x05, 1	; 5
 14c:	08 95       	ret

0000014e <lcd_wr_command>:
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	9b b9       	out	0x0b, r25	; 11
 154:	9b b1       	in	r25, 0x0b	; 11
 156:	28 2f       	mov	r18, r24
 158:	20 7f       	andi	r18, 0xF0	; 240
 15a:	92 2b       	or	r25, r18
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	28 98       	cbi	0x05, 0	; 5
 160:	2a 98       	cbi	0x05, 2	; 5
 162:	29 9a       	sbi	0x05, 1	; 5
 164:	ef e1       	ldi	r30, 0x1F	; 31
 166:	fe e4       	ldi	r31, 0x4E	; 78
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_wr_command+0x1a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_wr_command+0x20>
 16e:	00 00       	nop
 170:	29 98       	cbi	0x05, 1	; 5
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	9f 70       	andi	r25, 0x0F	; 15
 176:	9b b9       	out	0x0b, r25	; 11
 178:	9b b1       	in	r25, 0x0b	; 11
 17a:	82 95       	swap	r24
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	89 2b       	or	r24, r25
 180:	8b b9       	out	0x0b, r24	; 11
 182:	28 98       	cbi	0x05, 0	; 5
 184:	2a 98       	cbi	0x05, 2	; 5
 186:	29 9a       	sbi	0x05, 1	; 5
 188:	8f e1       	ldi	r24, 0x1F	; 31
 18a:	9e e4       	ldi	r25, 0x4E	; 78
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_wr_command+0x3e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_wr_command+0x44>
 192:	00 00       	nop
 194:	29 98       	cbi	0x05, 1	; 5
 196:	08 95       	ret

00000198 <lcd_init>:
 198:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_set_4bit>
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x8>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_init+0xe>
 1a6:	00 00       	nop
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ba:	8e e0       	ldi	r24, 0x0E	; 14
 1bc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1c6:	08 95       	ret

000001c8 <lcd_home>:
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ce:	08 95       	ret

000001d0 <lcd_cursor>:
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	71 f0       	breq	.+28     	; 0x1f0 <lcd_cursor+0x20>
 1d4:	18 f4       	brcc	.+6      	; 0x1dc <lcd_cursor+0xc>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <lcd_cursor+0x16>
 1da:	08 95       	ret
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	69 f0       	breq	.+26     	; 0x1fa <lcd_cursor+0x2a>
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	81 f0       	breq	.+32     	; 0x204 <lcd_cursor+0x34>
 1e4:	08 95       	ret
 1e6:	8f e7       	ldi	r24, 0x7F	; 127
 1e8:	86 0f       	add	r24, r22
 1ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1ee:	08 95       	ret
 1f0:	8f eb       	ldi	r24, 0xBF	; 191
 1f2:	86 0f       	add	r24, r22
 1f4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 1f8:	08 95       	ret
 1fa:	83 e9       	ldi	r24, 0x93	; 147
 1fc:	86 0f       	add	r24, r22
 1fe:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 202:	08 95       	ret
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	86 0f       	add	r24, r22
 208:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 20c:	08 95       	ret

0000020e <lcd_clear>:
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 214:	08 95       	ret

00000216 <lcd_wr_char>:
 216:	cf 93       	push	r28
 218:	c4 2f       	mov	r28, r20
 21a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_cursor>
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8f 70       	andi	r24, 0x0F	; 15
 222:	8b b9       	out	0x0b, r24	; 11
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	9c 2f       	mov	r25, r28
 228:	90 7f       	andi	r25, 0xF0	; 240
 22a:	89 2b       	or	r24, r25
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	28 9a       	sbi	0x05, 0	; 5
 230:	2a 98       	cbi	0x05, 2	; 5
 232:	29 9a       	sbi	0x05, 1	; 5
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_wr_char+0x22>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_wr_char+0x28>
 23e:	00 00       	nop
 240:	29 98       	cbi	0x05, 1	; 5
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	8b b9       	out	0x0b, r24	; 11
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	c2 95       	swap	r28
 24c:	c0 7f       	andi	r28, 0xF0	; 240
 24e:	c8 2b       	or	r28, r24
 250:	cb b9       	out	0x0b, r28	; 11
 252:	28 9a       	sbi	0x05, 0	; 5
 254:	2a 98       	cbi	0x05, 2	; 5
 256:	29 9a       	sbi	0x05, 1	; 5
 258:	8f e1       	ldi	r24, 0x1F	; 31
 25a:	9e e4       	ldi	r25, 0x4E	; 78
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_wr_char+0x46>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_wr_char+0x4c>
 262:	00 00       	nop
 264:	29 98       	cbi	0x05, 1	; 5
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <lcd_char>:
 26a:	9b b1       	in	r25, 0x0b	; 11
 26c:	9f 70       	andi	r25, 0x0F	; 15
 26e:	9b b9       	out	0x0b, r25	; 11
 270:	9b b1       	in	r25, 0x0b	; 11
 272:	28 2f       	mov	r18, r24
 274:	20 7f       	andi	r18, 0xF0	; 240
 276:	92 2b       	or	r25, r18
 278:	9b b9       	out	0x0b, r25	; 11
 27a:	28 9a       	sbi	0x05, 0	; 5
 27c:	2a 98       	cbi	0x05, 2	; 5
 27e:	29 9a       	sbi	0x05, 1	; 5
 280:	ef e1       	ldi	r30, 0x1F	; 31
 282:	fe e4       	ldi	r31, 0x4E	; 78
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_char+0x1a>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_char+0x20>
 28a:	00 00       	nop
 28c:	29 98       	cbi	0x05, 1	; 5
 28e:	9b b1       	in	r25, 0x0b	; 11
 290:	9f 70       	andi	r25, 0x0F	; 15
 292:	9b b9       	out	0x0b, r25	; 11
 294:	9b b1       	in	r25, 0x0b	; 11
 296:	82 95       	swap	r24
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	89 2b       	or	r24, r25
 29c:	8b b9       	out	0x0b, r24	; 11
 29e:	28 9a       	sbi	0x05, 0	; 5
 2a0:	2a 98       	cbi	0x05, 2	; 5
 2a2:	29 9a       	sbi	0x05, 1	; 5
 2a4:	8f e1       	ldi	r24, 0x1F	; 31
 2a6:	9e e4       	ldi	r25, 0x4E	; 78
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_char+0x3e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcd_char+0x44>
 2ae:	00 00       	nop
 2b0:	29 98       	cbi	0x05, 1	; 5
 2b2:	08 95       	ret

000002b4 <lcd_string>:
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	d8 2f       	mov	r29, r24
 2be:	c6 2f       	mov	r28, r22
 2c0:	fa 01       	movw	r30, r20
 2c2:	40 81       	ld	r20, Z
 2c4:	44 23       	and	r20, r20
 2c6:	69 f0       	breq	.+26     	; 0x2e2 <lcd_string+0x2e>
 2c8:	8f 01       	movw	r16, r30
 2ca:	0f 5f       	subi	r16, 0xFF	; 255
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
 2ce:	6c 2f       	mov	r22, r28
 2d0:	8d 2f       	mov	r24, r29
 2d2:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 2d6:	cf 5f       	subi	r28, 0xFF	; 255
 2d8:	f8 01       	movw	r30, r16
 2da:	41 91       	ld	r20, Z+
 2dc:	8f 01       	movw	r16, r30
 2de:	41 11       	cpse	r20, r1
 2e0:	f6 cf       	rjmp	.-20     	; 0x2ce <lcd_string+0x1a>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <LCD_Custom_Char>:
 * Logic: This function will be used to store custom character in CGRAM.
 * Example Call: LCD_Custom_Char(1,Character1);
 */

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
	unsigned char i;
	if(loc<8)
 2f4:	88 30       	cpi	r24, 0x08	; 8
 2f6:	80 f4       	brcc	.+32     	; 0x318 <LCD_Custom_Char+0x2c>
 2f8:	8b 01       	movw	r16, r22
	{
		lcd_wr_command(0x40 + (loc*8));		// Command 0x40 and onwards forces the device to point CGRAM address 
 2fa:	88 0f       	add	r24, r24
 2fc:	88 0f       	add	r24, r24
 2fe:	88 0f       	add	r24, r24
 300:	80 5c       	subi	r24, 0xC0	; 192
 302:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 306:	e8 01       	movw	r28, r16
 308:	08 5f       	subi	r16, 0xF8	; 248
 30a:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)					// Write 8 byte for generation of the character */
		lcd_char(msg[i]);
 30c:	89 91       	ld	r24, Y+
 30e:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
{
	unsigned char i;
	if(loc<8)
	{
		lcd_wr_command(0x40 + (loc*8));		// Command 0x40 and onwards forces the device to point CGRAM address 
		for(i=0;i<8;i++)					// Write 8 byte for generation of the character */
 312:	c0 17       	cp	r28, r16
 314:	d1 07       	cpc	r29, r17
 316:	d1 f7       	brne	.-12     	; 0x30c <LCD_Custom_Char+0x20>
		lcd_char(msg[i]);
	}
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <main>:
 *
 *
 * @return     0
 */

int main(void) {
 322:	ef 92       	push	r14
 324:	ff 92       	push	r15
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	c8 54       	subi	r28, 0x48	; 72
 334:	d1 09       	sbc	r29, r1
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	
	// Custom char set for LCD Module   
	
	unsigned char Character1[8] = {0x03,0x04,0x08,0x10,0x00,0x00,0x00,0x00};	// Positive sine wave part1
 340:	88 e0       	ldi	r24, 0x08	; 8
 342:	e0 e0       	ldi	r30, 0x00	; 0
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	de 01       	movw	r26, r28
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	01 90       	ld	r0, Z+
 34c:	0d 92       	st	X+, r0
 34e:	8a 95       	dec	r24
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x28>
	unsigned char Character2[8] = {0x18,0x04,0x02,0x01,0x00,0x00,0x00,0x00};	// Positive sine wave part2
 352:	88 e0       	ldi	r24, 0x08	; 8
 354:	e8 e0       	ldi	r30, 0x08	; 8
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	de 01       	movw	r26, r28
 35a:	19 96       	adiw	r26, 0x09	; 9
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x3a>
	unsigned char Character3[8] = {0x00,0x00,0x00,0x00,0x10,0x08,0x07,0x00};	// Negative sine wave part1
 364:	88 e0       	ldi	r24, 0x08	; 8
 366:	e0 e1       	ldi	r30, 0x10	; 16
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	de 01       	movw	r26, r28
 36c:	51 96       	adiw	r26, 0x11	; 17
 36e:	01 90       	ld	r0, Z+
 370:	0d 92       	st	X+, r0
 372:	8a 95       	dec	r24
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x4c>
	unsigned char Character4[8] = {0x00,0x00,0x00,0x00,0x01,0x02,0x1C,0x00};	// Negative sine wave part2
 376:	88 e0       	ldi	r24, 0x08	; 8
 378:	e8 e1       	ldi	r30, 0x18	; 24
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	de 01       	movw	r26, r28
 37e:	59 96       	adiw	r26, 0x19	; 25
 380:	01 90       	ld	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	8a 95       	dec	r24
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x5e>
	unsigned char Character5[8] = {0x1F,0x19,0x15,0x13,0x17,0x10,0x1F,0x00};	// e-Yantra Logo
 388:	88 e0       	ldi	r24, 0x08	; 8
 38a:	e0 e2       	ldi	r30, 0x20	; 32
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	de 01       	movw	r26, r28
 390:	91 96       	adiw	r26, 0x21	; 33
 392:	01 90       	ld	r0, Z+
 394:	0d 92       	st	X+, r0
 396:	8a 95       	dec	r24
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x70>
	unsigned char Character6[8] = {0x0E,0x1B,0x1E,0x1C,0x1E,0x1F,0x0E,0x00};	// Pacman Right
 39a:	88 e0       	ldi	r24, 0x08	; 8
 39c:	e8 e2       	ldi	r30, 0x28	; 40
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	de 01       	movw	r26, r28
 3a2:	99 96       	adiw	r26, 0x29	; 41
 3a4:	01 90       	ld	r0, Z+
 3a6:	0d 92       	st	X+, r0
 3a8:	8a 95       	dec	r24
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x82>
	unsigned char Character7[8] = {0x0E,0x1B,0x0F,0x07,0x0F,0x1F,0x0E,0x00};	// Pacman Left
 3ac:	88 e0       	ldi	r24, 0x08	; 8
 3ae:	e0 e3       	ldi	r30, 0x30	; 48
 3b0:	f1 e0       	ldi	r31, 0x01	; 1
 3b2:	de 01       	movw	r26, r28
 3b4:	d1 96       	adiw	r26, 0x31	; 49
 3b6:	01 90       	ld	r0, Z+
 3b8:	0d 92       	st	X+, r0
 3ba:	8a 95       	dec	r24
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <main+0x94>
		
	

	lcd_port_config();					// Initialize the LCD port
 3be:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_port_config>
	lcd_init();							// Initialize the LCD
 3c2:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init>
	
	
	LCD_Custom_Char(1, Character1);		// Build Character1 at position 1 
 3c6:	be 01       	movw	r22, r28
 3c8:	6f 5f       	subi	r22, 0xFF	; 255
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Custom_Char>
	LCD_Custom_Char(2, Character2);		// Build Character2 at position 2 
 3d2:	be 01       	movw	r22, r28
 3d4:	67 5f       	subi	r22, 0xF7	; 247
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Custom_Char>
	LCD_Custom_Char(3, Character3);		// Build Character3 at position 3 
 3de:	be 01       	movw	r22, r28
 3e0:	6f 5e       	subi	r22, 0xEF	; 239
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Custom_Char>
	LCD_Custom_Char(4, Character4);		// Build Character4 at position 4 
 3ea:	be 01       	movw	r22, r28
 3ec:	67 5e       	subi	r22, 0xE7	; 231
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Custom_Char>
	LCD_Custom_Char(5, Character5);		// Build Character4 at position 5
 3f6:	be 01       	movw	r22, r28
 3f8:	6f 5d       	subi	r22, 0xDF	; 223
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Custom_Char>
	LCD_Custom_Char(6, Character6);		// Build Character4 at position 6
 402:	be 01       	movw	r22, r28
 404:	67 5d       	subi	r22, 0xD7	; 215
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	86 e0       	ldi	r24, 0x06	; 6
 40a:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Custom_Char>
	LCD_Custom_Char(7, Character7);		// Build Character4 at position 7
 40e:	be 01       	movw	r22, r28
 410:	6f 5c       	subi	r22, 0xCF	; 207
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_Custom_Char>


	lcd_clear();						// Clears LCD
 41a:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	lcd_home();							// Sets the cursor's to home i.e. 1st row, 1st position
 41e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_home>
	lcd_wr_command(0x0C);				// Command for Display ON and Cursor OFF
 422:	8c e0       	ldi	r24, 0x0C	; 12
 424:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
	int count=0;						// Counter that counts the number of LCD bits printed
	
	
	// Displays the text "Sine wave" in the first row for 5 seconds
	
	lcd_string(1,4,"Sine wave");
 428:	48 e3       	ldi	r20, 0x38	; 56
 42a:	51 e0       	ldi	r21, 0x01	; 1
 42c:	64 e0       	ldi	r22, 0x04	; 4
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 434:	2f ef       	ldi	r18, 0xFF	; 255
 436:	83 e2       	ldi	r24, 0x23	; 35
 438:	94 ef       	ldi	r25, 0xF4	; 244
 43a:	21 50       	subi	r18, 0x01	; 1
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
		
	_delay_ms(5000);				
	
	lcd_clear();						// Clears LCD
 446:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	lcd_home();							// Sets the cursor's to home i.e. 1st row, 1st position
 44a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_home>
 44e:	68 94       	set
 450:	ee 24       	eor	r14, r14
 452:	e2 f8       	bld	r14, 2
 454:	f1 2c       	mov	r15, r1
 456:	0a c0       	rjmp	.+20     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	
	// Sine wave in the first row and second row for 5 seconds
	
	while(count<16){
		for(int i=0;i<4;i++){
			lcd_char(i+1);
 458:	81 2f       	mov	r24, r17
 45a:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
 45e:	1f 5f       	subi	r17, 0xFF	; 255
	count=0;							// Counter that counts the number of LCD bits printed	
	
	// Sine wave in the first row and second row for 5 seconds
	
	while(count<16){
		for(int i=0;i<4;i++){
 460:	15 30       	cpi	r17, 0x05	; 5
 462:	d1 f7       	brne	.-12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	e2 1a       	sub	r14, r18
 468:	f1 08       	sbc	r15, r1

	count=0;							// Counter that counts the number of LCD bits printed	
	
	// Sine wave in the first row and second row for 5 seconds
	
	while(count<16){
 46a:	11 f0       	breq	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 *
 *
 * @return     0
 */

int main(void) {
 46c:	11 e0       	ldi	r17, 0x01	; 1
 46e:	f4 cf       	rjmp	.-24     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		}
	}
	
	count=0;							// Resetting the counter
	
	lcd_wr_command(0xC0);				// Sets the cursor to 2nd row 1st position
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 476:	68 94       	set
 478:	ee 24       	eor	r14, r14
 47a:	e2 f8       	bld	r14, 2
 47c:	f1 2c       	mov	r15, r1
 47e:	0a c0       	rjmp	.+20     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	
	
	while(count<16){
		for(int i=0;i<4;i++){
			lcd_char(i+1);
 480:	81 2f       	mov	r24, r17
 482:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
 486:	1f 5f       	subi	r17, 0xFF	; 255
	
	lcd_wr_command(0xC0);				// Sets the cursor to 2nd row 1st position
	
	
	while(count<16){
		for(int i=0;i<4;i++){
 488:	15 30       	cpi	r17, 0x05	; 5
 48a:	d1 f7       	brne	.-12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	e8 1a       	sub	r14, r24
 490:	f1 08       	sbc	r15, r1
	count=0;							// Resetting the counter
	
	lcd_wr_command(0xC0);				// Sets the cursor to 2nd row 1st position
	
	
	while(count<16){
 492:	11 f0       	breq	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	lcd_string(1,4,"Sine wave");
		
	_delay_ms(5000);				
	
	lcd_clear();						// Clears LCD
	lcd_home();							// Sets the cursor's to home i.e. 1st row, 1st position
 494:	11 e0       	ldi	r17, 0x01	; 1
 496:	f4 cf       	rjmp	.-24     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	23 e2       	ldi	r18, 0x23	; 35
 49c:	84 ef       	ldi	r24, 0xF4	; 244
 49e:	91 50       	subi	r25, 0x01	; 1
 4a0:	20 40       	sbci	r18, 0x00	; 0
 4a2:	80 40       	sbci	r24, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
		}
	}
	
	_delay_ms(5000);
	
	lcd_clear();						// Clears LCD
 4aa:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>

	// Displays the text "Special" in the first row and "Characters" in the second row for 5 seconds
	
	lcd_string(1,5,"Special");
 4ae:	42 e4       	ldi	r20, 0x42	; 66
 4b0:	51 e0       	ldi	r21, 0x01	; 1
 4b2:	65 e0       	ldi	r22, 0x05	; 5
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	lcd_string(2,4,"Characters");
 4ba:	4a e4       	ldi	r20, 0x4A	; 74
 4bc:	51 e0       	ldi	r21, 0x01	; 1
 4be:	64 e0       	ldi	r22, 0x04	; 4
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
 4c6:	9f ef       	ldi	r25, 0xFF	; 255
 4c8:	23 e2       	ldi	r18, 0x23	; 35
 4ca:	84 ef       	ldi	r24, 0xF4	; 244
 4cc:	91 50       	subi	r25, 0x01	; 1
 4ce:	20 40       	sbci	r18, 0x00	; 0
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
	
	_delay_ms(5000);
	
	
	lcd_clear();						// Clears the display
 4d8:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	lcd_cursor(1,5);					// Sets the cursor to its appropriate position
 4dc:	65 e0       	ldi	r22, 0x05	; 5
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_cursor>
	
	
	lcd_char(0x21);						// Character code for '!'
 4e4:	81 e2       	ldi	r24, 0x21	; 33
 4e6:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
	lcd_char(0x40);						// Character code for '@'
 4ea:	80 e4       	ldi	r24, 0x40	; 64
 4ec:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
	lcd_char(0x23);						// Character code for '#'
 4f0:	83 e2       	ldi	r24, 0x23	; 35
 4f2:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
	lcd_char(0x24);						// Character code for '$'
 4f6:	84 e2       	ldi	r24, 0x24	; 36
 4f8:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
	lcd_char(0x25);						// Character code for '%'
 4fc:	85 e2       	ldi	r24, 0x25	; 37
 4fe:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
	lcd_char(0x26);						// Character code for '&'
 502:	86 e2       	ldi	r24, 0x26	; 38
 504:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
	lcd_char(0x2A);						// Character code for '*'
 508:	8a e2       	ldi	r24, 0x2A	; 42
 50a:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
 50e:	9f ef       	ldi	r25, 0xFF	; 255
 510:	23 e2       	ldi	r18, 0x23	; 35
 512:	84 ef       	ldi	r24, 0xF4	; 244
 514:	91 50       	subi	r25, 0x01	; 1
 516:	20 40       	sbci	r18, 0x00	; 0
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51e:	00 00       	nop
	
	
	_delay_ms(5000);
	
	lcd_clear();						// Clears LCD
 520:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	
	// Displays the text "Additional part" in the first row for 5 seconds
	
	lcd_string(1,2,"Additional part");
 524:	45 e5       	ldi	r20, 0x55	; 85
 526:	51 e0       	ldi	r21, 0x01	; 1
 528:	62 e0       	ldi	r22, 0x02	; 2
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
 530:	9f ef       	ldi	r25, 0xFF	; 255
 532:	23 e2       	ldi	r18, 0x23	; 35
 534:	84 ef       	ldi	r24, 0xF4	; 244
 536:	91 50       	subi	r25, 0x01	; 1
 538:	20 40       	sbci	r18, 0x00	; 0
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 540:	00 00       	nop
	
	_delay_ms(5000);
	
	
	lcd_clear();						// Clears LCD
 542:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	//displays the text "Scrolling text" in the first row and then
	//"with Custom char" in the second row for 5 seconds and the it scrolls display
	//left and right simultaneously with e-Yantra custom logo. It displays
	//the text e-Yantra where 'e' is replaced with Custom character 5
	
	lcd_string(1,2,"Scrolling text");
 546:	45 e6       	ldi	r20, 0x65	; 101
 548:	51 e0       	ldi	r21, 0x01	; 1
 54a:	62 e0       	ldi	r22, 0x02	; 2
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	lcd_string(2,1,"with Custom Char");
 552:	44 e7       	ldi	r20, 0x74	; 116
 554:	51 e0       	ldi	r21, 0x01	; 1
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
 55e:	9f ef       	ldi	r25, 0xFF	; 255
 560:	23 e2       	ldi	r18, 0x23	; 35
 562:	84 ef       	ldi	r24, 0xF4	; 244
 564:	91 50       	subi	r25, 0x01	; 1
 566:	20 40       	sbci	r18, 0x00	; 0
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	e1 f7       	brne	.-8      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56e:	00 00       	nop
	
	_delay_ms(5000);
	
	lcd_clear();						// Clears LCD
 570:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	
	lcd_wr_char(1,1,5);					// 5 is the Custom character for e-Yantra logo
 574:	45 e0       	ldi	r20, 0x05	; 5
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
	lcd_string(1,2,"-Yantra");
 57e:	4e ea       	ldi	r20, 0xAE	; 174
 580:	51 e0       	ldi	r21, 0x01	; 1
 582:	62 e0       	ldi	r22, 0x02	; 2
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
 58a:	9f ef       	ldi	r25, 0xFF	; 255
 58c:	24 e3       	ldi	r18, 0x34	; 52
 58e:	8c e0       	ldi	r24, 0x0C	; 12
 590:	91 50       	subi	r25, 0x01	; 1
 592:	20 40       	sbci	r18, 0x00	; 0
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 598:	00 c0       	rjmp	.+0      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 59a:	00 00       	nop
 59c:	68 94       	set
 59e:	ee 24       	eor	r14, r14
 5a0:	e1 f8       	bld	r14, 1
 5a2:	f1 2c       	mov	r15, r1
 5a4:	36 c0       	rjmp	.+108    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
	
	for(int x=0;x<2;x++)
	{
		for(int i=0;i<8;i++)
		{
			lcd_wr_command(0x1c);		// LCD command for right shift
 5a6:	8c e1       	ldi	r24, 0x1C	; 28
 5a8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 5ac:	9f ef       	ldi	r25, 0xFF	; 255
 5ae:	24 e3       	ldi	r18, 0x34	; 52
 5b0:	8c e0       	ldi	r24, 0x0C	; 12
 5b2:	91 50       	subi	r25, 0x01	; 1
 5b4:	20 40       	sbci	r18, 0x00	; 0
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5bc:	00 00       	nop
 5be:	01 50       	subi	r16, 0x01	; 1
 5c0:	11 09       	sbc	r17, r1
	lcd_string(1,2,"-Yantra");
	_delay_ms(250);
	
	for(int x=0;x<2;x++)
	{
		for(int i=0;i<8;i++)
 5c2:	89 f7       	brne	.-30     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	21 ee       	ldi	r18, 0xE1	; 225
 5c8:	84 e0       	ldi	r24, 0x04	; 4
 5ca:	91 50       	subi	r25, 0x01	; 1
 5cc:	20 40       	sbci	r18, 0x00	; 0
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5d4:	00 00       	nop
 5d6:	08 e0       	ldi	r16, 0x08	; 8
 5d8:	10 e0       	ldi	r17, 0x00	; 0
		
		_delay_ms(100);
		
		for(int i=0;i<8;i++)
		{
			lcd_wr_command(0x18);		// LCD command for left shift
 5da:	88 e1       	ldi	r24, 0x18	; 24
 5dc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_wr_command>
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	24 e3       	ldi	r18, 0x34	; 52
 5e4:	8c e0       	ldi	r24, 0x0C	; 12
 5e6:	91 50       	subi	r25, 0x01	; 1
 5e8:	20 40       	sbci	r18, 0x00	; 0
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5f0:	00 00       	nop
 5f2:	01 50       	subi	r16, 0x01	; 1
 5f4:	11 09       	sbc	r17, r1
			_delay_ms(250);
		}
		
		_delay_ms(100);
		
		for(int i=0;i<8;i++)
 5f6:	89 f7       	brne	.-30     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	23 ed       	ldi	r18, 0xD3	; 211
 5fc:	80 e3       	ldi	r24, 0x30	; 48
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	20 40       	sbci	r18, 0x00	; 0
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 606:	00 c0       	rjmp	.+0      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 608:	00 00       	nop
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	e9 1a       	sub	r14, r25
 60e:	f1 08       	sbc	r15, r1
	
	lcd_wr_char(1,1,5);					// 5 is the Custom character for e-Yantra logo
	lcd_string(1,2,"-Yantra");
	_delay_ms(250);
	
	for(int x=0;x<2;x++)
 610:	19 f0       	breq	.+6      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
		}
	}
	
	count=0;							// Resetting the counter
	
	lcd_wr_command(0xC0);				// Sets the cursor to 2nd row 1st position
 612:	08 e0       	ldi	r16, 0x08	; 8
 614:	10 e0       	ldi	r17, 0x00	; 0
 616:	c7 cf       	rjmp	.-114    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>

		_delay_ms(1000);
		
	}
	
	lcd_clear();						// Clears LCD
 618:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	
	//displays the text "PAC-MAN" in the first row and the custom characters
	//of the PAC-MAN(both left and right) in the second row for 3 seconds and the it displays PAC-MAN
	//animation moving right and left simultaneously for once
	
	lcd_string(1,6,"PAC-MAN");
 61c:	45 e8       	ldi	r20, 0x85	; 133
 61e:	51 e0       	ldi	r21, 0x01	; 1
 620:	66 e0       	ldi	r22, 0x06	; 6
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	lcd_wr_char(2,8,7);					// 7 is the Custom character for PAC-MAN left facing
 628:	47 e0       	ldi	r20, 0x07	; 7
 62a:	68 e0       	ldi	r22, 0x08	; 8
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
	lcd_wr_char(2,9,6);					// 5 is the Custom character for PAC-MAN right facing
 632:	46 e0       	ldi	r20, 0x06	; 6
 634:	69 e0       	ldi	r22, 0x09	; 9
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 63c:	2f ef       	ldi	r18, 0xFF	; 255
 63e:	8b e7       	ldi	r24, 0x7B	; 123
 640:	92 e9       	ldi	r25, 0x92	; 146
 642:	21 50       	subi	r18, 0x01	; 1
 644:	80 40       	sbci	r24, 0x00	; 0
 646:	90 40       	sbci	r25, 0x00	; 0
 648:	e1 f7       	brne	.-8      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 64c:	00 00       	nop
	
	_delay_ms(3000);
	
	lcd_clear();						// Clears LCD
 64e:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	
	char space=' ';
	char text[]="---------------";
 652:	80 e1       	ldi	r24, 0x10	; 16
 654:	e6 eb       	ldi	r30, 0xB6	; 182
 656:	f1 e0       	ldi	r31, 0x01	; 1
 658:	de 01       	movw	r26, r28
 65a:	d9 96       	adiw	r26, 0x39	; 57
 65c:	01 90       	ld	r0, Z+
 65e:	0d 92       	st	X+, r0
 660:	8a 95       	dec	r24
 662:	e1 f7       	brne	.-8      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
	lcd_clear();
 664:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
		
	lcd_wr_char(1,1,6);
 668:	46 e0       	ldi	r20, 0x06	; 6
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
	lcd_string(1,2,text);
 672:	ae 01       	movw	r20, r28
 674:	47 5c       	subi	r20, 0xC7	; 199
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	62 e0       	ldi	r22, 0x02	; 2
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	for(int i=2;i<17;i++)
 680:	68 94       	set
 682:	ee 24       	eor	r14, r14
 684:	e1 f8       	bld	r14, 1
 686:	f1 2c       	mov	r15, r1
 688:	21 c0       	rjmp	.+66     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
	{
		for(int x=1;x<i;x++)
 68a:	01 e0       	ldi	r16, 0x01	; 1
 68c:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_wr_char(1,x,space);
 68e:	40 e2       	ldi	r20, 0x20	; 32
 690:	60 2f       	mov	r22, r16
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
		
	lcd_wr_char(1,1,6);
	lcd_string(1,2,text);
	for(int i=2;i<17;i++)
	{
		for(int x=1;x<i;x++)
 698:	0f 5f       	subi	r16, 0xFF	; 255
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	0e 15       	cp	r16, r14
 69e:	1f 05       	cpc	r17, r15
 6a0:	b1 f7       	brne	.-20     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
		{
			lcd_wr_char(1,x,space);
		}
		lcd_wr_char(1,i,6);
 6a2:	46 e0       	ldi	r20, 0x06	; 6
 6a4:	6e 2d       	mov	r22, r14
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 6ac:	2f ef       	ldi	r18, 0xFF	; 255
 6ae:	84 e3       	ldi	r24, 0x34	; 52
 6b0:	9c e0       	ldi	r25, 0x0C	; 12
 6b2:	21 50       	subi	r18, 0x01	; 1
 6b4:	80 40       	sbci	r24, 0x00	; 0
 6b6:	90 40       	sbci	r25, 0x00	; 0
 6b8:	e1 f7       	brne	.-8      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6bc:	00 00       	nop
	char text[]="---------------";
	lcd_clear();
		
	lcd_wr_char(1,1,6);
	lcd_string(1,2,text);
	for(int i=2;i<17;i++)
 6be:	2f ef       	ldi	r18, 0xFF	; 255
 6c0:	e2 1a       	sub	r14, r18
 6c2:	f2 0a       	sbc	r15, r18
 6c4:	81 e1       	ldi	r24, 0x11	; 17
 6c6:	e8 16       	cp	r14, r24
 6c8:	f1 04       	cpc	r15, r1
 6ca:	29 f0       	breq	.+10     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
	{
		for(int x=1;x<i;x++)
 6cc:	92 e0       	ldi	r25, 0x02	; 2
 6ce:	e9 16       	cp	r14, r25
 6d0:	f1 04       	cpc	r15, r1
 6d2:	dc f6       	brge	.-74     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 6d4:	e6 cf       	rjmp	.-52     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 6d6:	2f ef       	ldi	r18, 0xFF	; 255
 6d8:	89 e6       	ldi	r24, 0x69	; 105
 6da:	98 e1       	ldi	r25, 0x18	; 24
 6dc:	21 50       	subi	r18, 0x01	; 1
 6de:	80 40       	sbci	r24, 0x00	; 0
 6e0:	90 40       	sbci	r25, 0x00	; 0
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6e6:	00 00       	nop
			
	}
		
	_delay_ms(500);
	
	lcd_clear();						// Clears LCD
 6e8:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	
	lcd_wr_char(2,16,7);
 6ec:	47 e0       	ldi	r20, 0x07	; 7
 6ee:	60 e1       	ldi	r22, 0x10	; 16
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
	lcd_string(2,1,text);
 6f6:	ae 01       	movw	r20, r28
 6f8:	47 5c       	subi	r20, 0xC7	; 199
 6fa:	5f 4f       	sbci	r21, 0xFF	; 255
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	for(int i=15;i>0;i--)
 704:	0f 2e       	mov	r0, r31
 706:	ff e0       	ldi	r31, 0x0F	; 15
 708:	ef 2e       	mov	r14, r31
 70a:	f1 2c       	mov	r15, r1
 70c:	f0 2d       	mov	r31, r0
 70e:	1e c0       	rjmp	.+60     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
	{
		for(int x=16;x>i;x--)
 710:	00 e1       	ldi	r16, 0x10	; 16
 712:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_wr_char(2,x,space);
 714:	40 e2       	ldi	r20, 0x20	; 32
 716:	60 2f       	mov	r22, r16
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
	
	lcd_wr_char(2,16,7);
	lcd_string(2,1,text);
	for(int i=15;i>0;i--)
	{
		for(int x=16;x>i;x--)
 71e:	01 50       	subi	r16, 0x01	; 1
 720:	11 09       	sbc	r17, r1
 722:	0e 15       	cp	r16, r14
 724:	1f 05       	cpc	r17, r15
 726:	b1 f7       	brne	.-20     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
		{
			lcd_wr_char(2,x,space);
		}
		lcd_wr_char(2,i,7);
 728:	47 e0       	ldi	r20, 0x07	; 7
 72a:	6e 2d       	mov	r22, r14
 72c:	82 e0       	ldi	r24, 0x02	; 2
 72e:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_wr_char>
 732:	2f ef       	ldi	r18, 0xFF	; 255
 734:	84 e3       	ldi	r24, 0x34	; 52
 736:	9c e0       	ldi	r25, 0x0C	; 12
 738:	21 50       	subi	r18, 0x01	; 1
 73a:	80 40       	sbci	r24, 0x00	; 0
 73c:	90 40       	sbci	r25, 0x00	; 0
 73e:	e1 f7       	brne	.-8      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
 740:	00 c0       	rjmp	.+0      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 742:	00 00       	nop
	
	lcd_clear();						// Clears LCD
	
	lcd_wr_char(2,16,7);
	lcd_string(2,1,text);
	for(int i=15;i>0;i--)
 744:	21 e0       	ldi	r18, 0x01	; 1
 746:	e2 1a       	sub	r14, r18
 748:	f1 08       	sbc	r15, r1
 74a:	29 f0       	breq	.+10     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
	{
		for(int x=16;x>i;x--)
 74c:	80 e1       	ldi	r24, 0x10	; 16
 74e:	e8 16       	cp	r14, r24
 750:	f1 04       	cpc	r15, r1
 752:	f4 f2       	brlt	.-68     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 754:	e9 cf       	rjmp	.-46     	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
 756:	9f ef       	ldi	r25, 0xFF	; 255
 758:	29 e6       	ldi	r18, 0x69	; 105
 75a:	88 e1       	ldi	r24, 0x18	; 24
 75c:	91 50       	subi	r25, 0x01	; 1
 75e:	20 40       	sbci	r18, 0x00	; 0
 760:	80 40       	sbci	r24, 0x00	; 0
 762:	e1 f7       	brne	.-8      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 764:	00 c0       	rjmp	.+0      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 766:	00 00       	nop
		
	}
	
	_delay_ms(500);
		
	lcd_clear();						// Clears LCD
 768:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	
	// displays the text "Running Sinewave" in the first row for 3 seconds
	// then it shows the running sine wave for 5 seconds
	
	lcd_string(1,1,"Running Sinewave");
 76c:	4d e8       	ldi	r20, 0x8D	; 141
 76e:	51 e0       	ldi	r21, 0x01	; 1
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
 778:	9f ef       	ldi	r25, 0xFF	; 255
 77a:	2b e7       	ldi	r18, 0x7B	; 123
 77c:	82 e9       	ldi	r24, 0x92	; 146
 77e:	91 50       	subi	r25, 0x01	; 1
 780:	20 40       	sbci	r18, 0x00	; 0
 782:	80 40       	sbci	r24, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
 786:	00 c0       	rjmp	.+0      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 788:	00 00       	nop
	
	_delay_ms(3000);
	
	lcd_clear();						// Clears LCD
 78a:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
 78e:	0f 2e       	mov	r0, r31
 790:	f5 e0       	ldi	r31, 0x05	; 5
 792:	ef 2e       	mov	r14, r31
 794:	f1 2c       	mov	r15, r1
 796:	f0 2d       	mov	r31, r0

	for(int i=0;i<5;i++)
	{
		lcd_cursor(1,1);
 798:	61 e0       	ldi	r22, 0x01	; 1
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_cursor>
 7a0:	04 e0       	ldi	r16, 0x04	; 4
 7a2:	10 e0       	ldi	r17, 0x00	; 0
		for(int i=0;i<4;i++)
		{
			lcd_char(1);
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(2);
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(3);
 7b0:	83 e0       	ldi	r24, 0x03	; 3
 7b2:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(4);
 7b6:	84 e0       	ldi	r24, 0x04	; 4
 7b8:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
 7bc:	01 50       	subi	r16, 0x01	; 1
 7be:	11 09       	sbc	r17, r1
	lcd_clear();						// Clears LCD

	for(int i=0;i<5;i++)
	{
		lcd_cursor(1,1);
		for(int i=0;i<4;i++)
 7c0:	89 f7       	brne	.-30     	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
			lcd_char(2);
			lcd_char(3);
			lcd_char(4);
		}
		
		lcd_cursor(1,1);
 7c2:	61 e0       	ldi	r22, 0x01	; 1
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_cursor>
 7ca:	04 e0       	ldi	r16, 0x04	; 4
 7cc:	10 e0       	ldi	r17, 0x00	; 0
		for(int i=0;i<4;i++)
		{
			lcd_char(2);
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(3);
 7d4:	83 e0       	ldi	r24, 0x03	; 3
 7d6:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(4);
 7da:	84 e0       	ldi	r24, 0x04	; 4
 7dc:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(1);
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
 7e6:	01 50       	subi	r16, 0x01	; 1
 7e8:	11 09       	sbc	r17, r1
			lcd_char(3);
			lcd_char(4);
		}
		
		lcd_cursor(1,1);
		for(int i=0;i<4;i++)
 7ea:	89 f7       	brne	.-30     	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
			lcd_char(3);
			lcd_char(4);
			lcd_char(1);
		}
		
		lcd_cursor(1,1);
 7ec:	61 e0       	ldi	r22, 0x01	; 1
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_cursor>
 7f4:	04 e0       	ldi	r16, 0x04	; 4
 7f6:	10 e0       	ldi	r17, 0x00	; 0
		for(int i=0;i<4;i++)
		{
			lcd_char(3);
 7f8:	83 e0       	ldi	r24, 0x03	; 3
 7fa:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(4);
 7fe:	84 e0       	ldi	r24, 0x04	; 4
 800:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(1);
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(2);
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
 810:	01 50       	subi	r16, 0x01	; 1
 812:	11 09       	sbc	r17, r1
			lcd_char(4);
			lcd_char(1);
		}
		
		lcd_cursor(1,1);
		for(int i=0;i<4;i++)
 814:	89 f7       	brne	.-30     	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
			lcd_char(4);
			lcd_char(1);
			lcd_char(2);
		}
		
		lcd_cursor(1,1);
 816:	61 e0       	ldi	r22, 0x01	; 1
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_cursor>
 81e:	04 e0       	ldi	r16, 0x04	; 4
 820:	10 e0       	ldi	r17, 0x00	; 0
		for(int i=0;i<4;i++)
		{
			lcd_char(4);
 822:	84 e0       	ldi	r24, 0x04	; 4
 824:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(1);
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(2);
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
			lcd_char(3);
 834:	83 e0       	ldi	r24, 0x03	; 3
 836:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_char>
 83a:	01 50       	subi	r16, 0x01	; 1
 83c:	11 09       	sbc	r17, r1
			lcd_char(1);
			lcd_char(2);
		}
		
		lcd_cursor(1,1);
		for(int i=0;i<4;i++)
 83e:	89 f7       	brne	.-30     	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	e9 1a       	sub	r14, r25
 844:	f1 08       	sbc	r15, r1
	
	_delay_ms(3000);
	
	lcd_clear();						// Clears LCD

	for(int i=0;i<5;i++)
 846:	09 f0       	breq	.+2      	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
 848:	a7 cf       	rjmp	.-178    	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
 84a:	2f ef       	ldi	r18, 0xFF	; 255
 84c:	83 ec       	ldi	r24, 0xC3	; 195
 84e:	99 e0       	ldi	r25, 0x09	; 9
 850:	21 50       	subi	r18, 0x01	; 1
 852:	80 40       	sbci	r24, 0x00	; 0
 854:	90 40       	sbci	r25, 0x00	; 0
 856:	e1 f7       	brne	.-8      	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
 858:	00 c0       	rjmp	.+0      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
 85a:	00 00       	nop
		
	}
	
	_delay_ms(200);
	
	lcd_clear();						// Clears LCD
 85c:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_clear>
	
	lcd_string(1,4,"Thank you");
 860:	4e e9       	ldi	r20, 0x9E	; 158
 862:	51 e0       	ldi	r21, 0x01	; 1
 864:	64 e0       	ldi	r22, 0x04	; 4
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	lcd_string(2,2,"Team e-Yantra");
 86c:	48 ea       	ldi	r20, 0xA8	; 168
 86e:	51 e0       	ldi	r21, 0x01	; 1
 870:	62 e0       	ldi	r22, 0x02	; 2
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <lcd_string>
	
	
	return 0;
}
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	c8 5b       	subi	r28, 0xB8	; 184
 87e:	df 4f       	sbci	r29, 0xFF	; 255
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	de bf       	out	0x3e, r29	; 62
 886:	0f be       	out	0x3f, r0	; 63
 888:	cd bf       	out	0x3d, r28	; 61
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	1f 91       	pop	r17
 890:	0f 91       	pop	r16
 892:	ff 90       	pop	r15
 894:	ef 90       	pop	r14
 896:	08 95       	ret

00000898 <_exit>:
 898:	f8 94       	cli

0000089a <__stop_program>:
 89a:	ff cf       	rjmp	.-2      	; 0x89a <__stop_program>
