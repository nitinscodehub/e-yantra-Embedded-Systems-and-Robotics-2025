
9_ADC_Sensor_Display_on_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000df6  00000e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800202  00800202  00000e8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ebc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d6  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e13  00000000  00000000  00002782  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b7  00000000  00000000  00003595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00003e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000756  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ba  00000000  00000000  00004712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
   2:	00 00       	nop
   4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
   6:	00 00       	nop
   8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
   a:	00 00       	nop
   c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
   e:	00 00       	nop
  10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
  12:	00 00       	nop
  14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
  16:	00 00       	nop
  18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
  22:	00 00       	nop
  24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
  26:	00 00       	nop
  28:	bd c0       	rjmp	.+378    	; 0x1a4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b9 c0       	rjmp	.+370    	; 0x1a4 <__bad_interrupt>
  32:	00 00       	nop
  34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
  36:	00 00       	nop
  38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
  42:	00 00       	nop
  44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
  46:	00 00       	nop
  48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
  52:	00 00       	nop
  54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
  56:	00 00       	nop
  58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
  62:	00 00       	nop
  64:	9f c0       	rjmp	.+318    	; 0x1a4 <__bad_interrupt>
  66:	00 00       	nop
  68:	9d c0       	rjmp	.+314    	; 0x1a4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
  72:	00 00       	nop
  74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
  76:	00 00       	nop
  78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
  82:	00 00       	nop
  84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
  86:	00 00       	nop
  88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	89 c0       	rjmp	.+274    	; 0x1a4 <__bad_interrupt>
  92:	00 00       	nop
  94:	87 c0       	rjmp	.+270    	; 0x1a4 <__bad_interrupt>
  96:	00 00       	nop
  98:	85 c0       	rjmp	.+266    	; 0x1a4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	83 c0       	rjmp	.+262    	; 0x1a4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	81 c0       	rjmp	.+258    	; 0x1a4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7f c0       	rjmp	.+254    	; 0x1a4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7d c0       	rjmp	.+250    	; 0x1a4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	7b c0       	rjmp	.+246    	; 0x1a4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	79 c0       	rjmp	.+242    	; 0x1a4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	77 c0       	rjmp	.+238    	; 0x1a4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	75 c0       	rjmp	.+234    	; 0x1a4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	73 c0       	rjmp	.+230    	; 0x1a4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	71 c0       	rjmp	.+226    	; 0x1a4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	6f c0       	rjmp	.+222    	; 0x1a4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	6d c0       	rjmp	.+218    	; 0x1a4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	6b c0       	rjmp	.+214    	; 0x1a4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	69 c0       	rjmp	.+210    	; 0x1a4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	67 c0       	rjmp	.+206    	; 0x1a4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	65 c0       	rjmp	.+202    	; 0x1a4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	63 c0       	rjmp	.+198    	; 0x1a4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	61 c0       	rjmp	.+194    	; 0x1a4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	07 63       	ori	r16, 0x37	; 55
  e6:	42 36       	cpi	r20, 0x62	; 98
  e8:	b7 9b       	sbis	0x16, 7	; 22
  ea:	d8 a7       	std	Y+40, r29	; 0x28
  ec:	1a 39       	cpi	r17, 0x9A	; 154
  ee:	68 56       	subi	r22, 0x68	; 104
  f0:	18 ae       	std	Y+56, r1	; 0x38
  f2:	ba ab       	std	Y+50, r27	; 0x32
  f4:	55 8c       	ldd	r5, Z+29	; 0x1d
  f6:	1d 3c       	cpi	r17, 0xCD	; 205
  f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
  fa:	57 63       	ori	r21, 0x37	; 55
  fc:	bd 6d       	ori	r27, 0xDD	; 221
  fe:	ed fd       	.word	0xfded	; ????
 100:	75 3e       	cpi	r23, 0xE5	; 229
 102:	f6 17       	cp	r31, r22
 104:	72 31       	cpi	r23, 0x12	; 18
 106:	bf 00       	.word	0x00bf	; ????
 108:	00 00       	nop
 10a:	80 3f       	cpi	r24, 0xF0	; 240
 10c:	08 00       	.word	0x0008	; ????
 10e:	00 00       	nop
 110:	be 92       	st	-X, r11
 112:	24 49       	sbci	r18, 0x94	; 148
 114:	12 3e       	cpi	r17, 0xE2	; 226
 116:	ab aa       	std	Y+51, r10	; 0x33
 118:	aa 2a       	or	r10, r26
 11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
 11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
 11e:	4c 3e       	cpi	r20, 0xEC	; 236
 120:	00 00       	nop
 122:	00 80       	ld	r0, Z
 124:	be ab       	std	Y+54, r27	; 0x36
 126:	aa aa       	std	Y+50, r10	; 0x32
 128:	aa 3e       	cpi	r26, 0xEA	; 234
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	bf 00       	.word	0x00bf	; ????
 130:	00 00       	nop
 132:	80 3f       	cpi	r24, 0xF0	; 240
 134:	00 00       	nop
 136:	00 00       	nop
 138:	00 08       	sbc	r0, r0
 13a:	41 78       	andi	r20, 0x81	; 129
 13c:	d3 bb       	out	0x13, r29	; 19
 13e:	43 87       	std	Z+11, r20	; 0x0b
 140:	d1 13       	cpse	r29, r17
 142:	3d 19       	sub	r19, r13
 144:	0e 3c       	cpi	r16, 0xCE	; 206
 146:	c3 bd       	out	0x23, r28	; 35
 148:	42 82       	std	Z+2, r4	; 0x02
 14a:	ad 2b       	or	r26, r29
 14c:	3e 68       	ori	r19, 0x8E	; 142
 14e:	ec 82       	std	Y+4, r14	; 0x04
 150:	76 be       	out	0x36, r7	; 54
 152:	d9 8f       	std	Y+25, r29	; 0x19
 154:	e1 a9       	ldd	r30, Z+49	; 0x31
 156:	3e 4c       	sbci	r19, 0xCE	; 206
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	ff be       	out	0x3f, r15	; 63
 15c:	01 c4       	rjmp	.+2050   	; 0x960 <__fp_nan>
 15e:	ff 7f       	andi	r31, 0xFF	; 255
 160:	3f 00       	.word	0x003f	; ????
 162:	00 00       	nop
	...

00000166 <__ctors_end>:
 166:	11 24       	eor	r1, r1
 168:	1f be       	out	0x3f, r1	; 63
 16a:	cf ef       	ldi	r28, 0xFF	; 255
 16c:	d1 e2       	ldi	r29, 0x21	; 33
 16e:	de bf       	out	0x3e, r29	; 62
 170:	cd bf       	out	0x3d, r28	; 61
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
 176:	12 e0       	ldi	r17, 0x02	; 2
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	b2 e0       	ldi	r27, 0x02	; 2
 17c:	e6 ef       	ldi	r30, 0xF6	; 246
 17e:	fd e0       	ldi	r31, 0x0D	; 13
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	0b bf       	out	0x3b, r16	; 59
 184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
 186:	07 90       	elpm	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	a2 30       	cpi	r26, 0x02	; 2
 18c:	b1 07       	cpc	r27, r17
 18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
 190:	22 e0       	ldi	r18, 0x02	; 2
 192:	a2 e0       	ldi	r26, 0x02	; 2
 194:	b2 e0       	ldi	r27, 0x02	; 2
 196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
 198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
 19a:	ac 31       	cpi	r26, 0x1C	; 28
 19c:	b2 07       	cpc	r27, r18
 19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
 1a0:	81 d0       	rcall	.+258    	; 0x2a4 <main>
 1a2:	27 c6       	rjmp	.+3150   	; 0xdf2 <_exit>

000001a4 <__bad_interrupt>:
 1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <adc_port_config>:
/**
 * @brief      Function to make all ADC sensor pins as input and deactivate pull up for all pins
 */
void adc_port_config (void)
{
	adc_sensor_low_ddr_reg		= 0x00;				// set PORTF direction as input
 1a6:	10 ba       	out	0x10, r1	; 16
	adc_sensor_low_port_reg		= 0x00;				// set PORTF pins floating
 1a8:	11 ba       	out	0x11, r1	; 17
	adc_sensor_high_ddr_reg		= 0x00;				// set PORTK direction as input
 1aa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	adc_sensor_high_port_reg	= 0x00;				// set PORTK pins floating
 1ae:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
 1b2:	08 95       	ret

000001b4 <adc_init>:
 */
void adc_init(){
	
	// enable ADC and pre-scalar = 64 (ADEN = 1, ADPS2 = 1, ADPS1 = 1, ADPS0 = 0)
	// and clear ADC start conversion bit, auto trigger enable bit, interrupt flag bit and interrupt enable bit
	ADCSRA_reg	|= ( (1 << ADEN_bit) | (1 << ADPS2_bit) | (1 << ADPS1_bit) );
 1b4:	ea e7       	ldi	r30, 0x7A	; 122
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	86 68       	ori	r24, 0x86	; 134
 1bc:	80 83       	st	Z, r24
	ADCSRA_reg	&= ~( (1 << ADSC_bit) | (1 << ADATE_bit) | (1 << ADIF_bit) | (1 << ADIE_bit) | (1 << ADPS0_bit) );
 1be:	80 81       	ld	r24, Z
 1c0:	86 78       	andi	r24, 0x86	; 134
 1c2:	80 83       	st	Z, r24
	
	// In ADCSRB, disable Analog Comparator Multiplexer, MUX5 bit and ADC Auto Trigger Source bits
	ADCSRB_reg	&= ~( (1 << ACME_bit) | (1 << MUX5_bit) | (1 << ADTS2_bit) | (1 << ADTS1_bit) | (1 << ADTS0_bit) );
 1c4:	eb e7       	ldi	r30, 0x7B	; 123
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 7b       	andi	r24, 0xB0	; 176
 1cc:	80 83       	st	Z, r24
	
	// In ADMUX, set the Reference Selection bits to use the AVCC as reference, and disable the channel selection bits MUX[4:0]
	ADMUX_reg	&= ~( (1 << REFS1_bit) | (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
 1ce:	ec e7       	ldi	r30, 0x7C	; 124
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 76       	andi	r24, 0x60	; 96
 1d6:	80 83       	st	Z, r24
	ADMUX_reg	|= (1 << REFS0_bit);
 1d8:	80 81       	ld	r24, Z
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	80 83       	st	Z, r24
	
	// In ADMUX, enable the ADLAR bit for 8-bit ADC result
	ADMUX_reg	|= (1 << ADLAR_bit);
 1de:	80 81       	ld	r24, Z
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	80 83       	st	Z, r24
	
	// In ACSR, disable the Analog Comparator by writing 1 to ACD_bit
	ACSR_reg	|= ( 1 << ACD_bit );
 1e4:	80 b7       	in	r24, 0x30	; 48
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	80 bf       	out	0x30, r24	; 48
 1ea:	08 95       	ret

000001ec <ADC_Conversion>:
unsigned char ADC_Conversion(unsigned char channel_num)
{
	unsigned char adc_8bit_data;
	
	// MUX[5:0] bits to select the ADC channel number
	if ( channel_num > 7 )
 1ec:	88 30       	cpi	r24, 0x08	; 8
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <ADC_Conversion+0xe>
	{
		ADCSRB_reg |= ( 1 << MUX5_bit );					// set the MUX5 bit for selecting channel if its greater than 7
 1f0:	eb e7       	ldi	r30, 0x7B	; 123
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	90 81       	ld	r25, Z
 1f6:	98 60       	ori	r25, 0x08	; 8
 1f8:	90 83       	st	Z, r25
	}
	channel_num	= channel_num & 0x07;						// retain the last 3 bits from the variable for MUX[2:0] bits
	ADMUX_reg	= ( ADMUX_reg | channel_num );
 1fa:	ec e7       	ldi	r30, 0x7C	; 124
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	87 70       	andi	r24, 0x07	; 7
 202:	89 2b       	or	r24, r25
 204:	80 83       	st	Z, r24
	
	// set the ADSC bit in ADCSRA register
	ADCSRA_reg		|= ( 1 << ADSC_bit );
 206:	ea e7       	ldi	r30, 0x7A	; 122
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 64       	ori	r24, 0x40	; 64
 20e:	80 83       	st	Z, r24
	
	//Wait for ADC conversion to complete
	while( ( ADCSRA_reg & ( 1 << ADIF_bit ) ) == 0x00 );
 210:	80 81       	ld	r24, Z
 212:	84 ff       	sbrs	r24, 4
 214:	fd cf       	rjmp	.-6      	; 0x210 <ADC_Conversion+0x24>
	
	adc_8bit_data = ADCH_reg;
 216:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
	// clear ADIF bit by writing 1 to it
	ADCSRA_reg		|= ( 1 << ADIF_bit );
 21a:	ea e7       	ldi	r30, 0x7A	; 122
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	90 81       	ld	r25, Z
 220:	90 61       	ori	r25, 0x10	; 16
 222:	90 83       	st	Z, r25
	
	// clear the MUX5 bit
	ADCSRB_reg		&= ~( 1 << MUX5_bit );
 224:	eb e7       	ldi	r30, 0x7B	; 123
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	90 81       	ld	r25, Z
 22a:	97 7f       	andi	r25, 0xF7	; 247
 22c:	90 83       	st	Z, r25
	
	// clear the MUX[4:0] bits
	ADMUX_reg		&= ~( (1 << MUX4_bit) | (1 << MUX3_bit) | (1 << MUX2_bit) | (1 << MUX1_bit) | (1 << MUX0_bit) );
 22e:	ec e7       	ldi	r30, 0x7C	; 124
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	90 81       	ld	r25, Z
 234:	90 7e       	andi	r25, 0xE0	; 224
 236:	90 83       	st	Z, r25
	
	return adc_8bit_data;
}
 238:	08 95       	ret

0000023a <Sharp_GP2D12_estimation>:
 */
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
 23a:	68 2f       	mov	r22, r24
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	4b d3       	rcall	.+1686   	; 0x8da <__floatunsisf>
 244:	2f ee       	ldi	r18, 0xEF	; 239
 246:	39 ec       	ldi	r19, 0xC9	; 201
 248:	43 e9       	ldi	r20, 0x93	; 147
 24a:	5f e3       	ldi	r21, 0x3F	; 63
 24c:	37 d4       	rcall	.+2158   	; 0xabc <pow>
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
	distanceInt = (int)distance;
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	9f e3       	ldi	r25, 0x3F	; 63
 25a:	a6 d2       	rcall	.+1356   	; 0x7a8 <__divsf3>
 25c:	2a e9       	ldi	r18, 0x9A	; 154
 25e:	39 ef       	ldi	r19, 0xF9	; 249
 260:	4e e2       	ldi	r20, 0x2E	; 46
 262:	55 e4       	ldi	r21, 0x45	; 69
 264:	c8 d3       	rcall	.+1936   	; 0x9f6 <__mulsf3>
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 e2       	ldi	r20, 0x20	; 32
 26c:	51 e4       	ldi	r21, 0x41	; 65
 26e:	c3 d3       	rcall	.+1926   	; 0x9f6 <__mulsf3>
 270:	03 d3       	rcall	.+1542   	; 0x878 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
 272:	cb 01       	movw	r24, r22
 274:	61 32       	cpi	r22, 0x21	; 33
 276:	73 40       	sbci	r23, 0x03	; 3
 278:	10 f0       	brcs	.+4      	; 0x27e <Sharp_GP2D12_estimation+0x44>
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	93 e0       	ldi	r25, 0x03	; 3
}
 27e:	08 95       	ret

00000280 <print_sensor>:
 * @param[in]  column LCD column 1 to 16
 * @param[in]  channel ADC channel number of sensor 0 to 15
 *
 */
void print_sensor(char row, char coloumn,unsigned char channel)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	c8 2f       	mov	r28, r24
 286:	d6 2f       	mov	r29, r22
 288:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
 28a:	b0 df       	rcall	.-160    	; 0x1ec <ADC_Conversion>
 28c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <ADC_Value>
	lcd_numeric_value(row, coloumn, ADC_Value, 3);
 290:	48 2f       	mov	r20, r24
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	23 e0       	ldi	r18, 0x03	; 3
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	6d 2f       	mov	r22, r29
 29a:	8c 2f       	mov	r24, r28
 29c:	40 d1       	rcall	.+640    	; 0x51e <lcd_numeric_value>
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <main>:
 * @details    Initializes ADC, LCD pins and displays the ADC converted data of all the sensors on LCD
 */
int main(void) {
	
	unsigned int value;
	adc_port_config();					// Initialize the ADC port
 2a4:	80 df       	rcall	.-256    	; 0x1a6 <adc_port_config>
	adc_init();							// Initialize the ADC
 2a6:	86 df       	rcall	.-244    	; 0x1b4 <adc_init>
	
	lcd_port_config();					// Initialize the LCD port
 2a8:	52 d0       	rcall	.+164    	; 0x34e <lcd_port_config>
	lcd_init();							// Initialize the LCD
 2aa:	c6 d0       	rcall	.+396    	; 0x438 <lcd_init>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
	
	while(1)
	{
		// get the ADC converted data of the sensors from the appropriate channel number
		
		BATT_V = ADC_Conversion(batt_sesnor_channel);
 2ae:	9e df       	rcall	.-196    	; 0x1ec <ADC_Conversion>
 2b0:	68 2f       	mov	r22, r24
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	10 d3       	rcall	.+1568   	; 0x8da <__floatunsisf>
 2ba:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <BATT_V>
 2be:	70 93 04 02 	sts	0x0204, r23	; 0x800204 <BATT_V+0x1>
 2c2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <BATT_V+0x2>
 2c6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <BATT_V+0x3>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
		BATT_Voltage = ( ( BATT_V * 100 ) * 0.07902 ) + 0.7;
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	48 ec       	ldi	r20, 0xC8	; 200
 2d0:	52 e4       	ldi	r21, 0x42	; 66
 2d2:	91 d3       	rcall	.+1826   	; 0x9f6 <__mulsf3>
 2d4:	2d e3       	ldi	r18, 0x3D	; 61
 2d6:	35 ed       	ldi	r19, 0xD5	; 213
 2d8:	41 ea       	ldi	r20, 0xA1	; 161
 2da:	5d e3       	ldi	r21, 0x3D	; 61
 2dc:	8c d3       	rcall	.+1816   	; 0x9f6 <__mulsf3>
 2de:	23 e3       	ldi	r18, 0x33	; 51
 2e0:	33 e3       	ldi	r19, 0x33	; 51
 2e2:	43 e3       	ldi	r20, 0x33	; 51
 2e4:	5f e3       	ldi	r21, 0x3F	; 63
 2e6:	fc d1       	rcall	.+1016   	; 0x6e0 <__addsf3>
 2e8:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <BATT_Voltage>
 2ec:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <BATT_Voltage+0x1>
 2f0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <BATT_Voltage+0x2>
 2f4:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <BATT_Voltage+0x3>
 2f8:	bf d2       	rcall	.+1406   	; 0x878 <__fixsfsi>
		lcd_numeric_value(1, 1, BATT_Voltage, 4);					// Prints Battery Voltage Status
 2fa:	24 e0       	ldi	r18, 0x04	; 4
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	ab 01       	movw	r20, r22
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0c d1       	rcall	.+536    	; 0x51e <lcd_numeric_value>
 306:	45 e0       	ldi	r20, 0x05	; 5

		print_sensor(1, 6, ir_prox_2_sensor_channel);				// Prints value of Analog IR Proximity Sensor 2
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	b9 df       	rcall	.-142    	; 0x280 <print_sensor>
 30e:	46 e0       	ldi	r20, 0x06	; 6
		print_sensor(1, 10, ir_prox_3_sensor_channel);				// Prints value of Analog IR Proximity Sensor 3
 310:	6a e0       	ldi	r22, 0x0A	; 10
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	b5 df       	rcall	.-150    	; 0x280 <print_sensor>
 316:	47 e0       	ldi	r20, 0x07	; 7
		print_sensor(1, 14, ir_prox_4_sensor_channel);				// Prints value of Analog IR Proximity Sensor 4
 318:	6e e0       	ldi	r22, 0x0E	; 14
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	b1 df       	rcall	.-158    	; 0x280 <print_sensor>
 31e:	43 e0       	ldi	r20, 0x03	; 3
		print_sensor(2, 2, left_wl_sensor_channel);					// Prints value of Left White Line Sensor
 320:	62 e0       	ldi	r22, 0x02	; 2
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	ad df       	rcall	.-166    	; 0x280 <print_sensor>
 326:	42 e0       	ldi	r20, 0x02	; 2
		print_sensor(2, 6, center_wl_sensor_channel);				// Prints Value of Center White Line Sensor
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	a9 df       	rcall	.-174    	; 0x280 <print_sensor>
 32e:	41 e0       	ldi	r20, 0x01	; 1
		print_sensor(2, 10, right_wl_sensor_channel);				// Prints Value of Right White Line Sensor
 330:	6a e0       	ldi	r22, 0x0A	; 10
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	a5 df       	rcall	.-182    	; 0x280 <print_sensor>
 336:	8a e0       	ldi	r24, 0x0A	; 10
 338:	59 df       	rcall	.-334    	; 0x1ec <ADC_Conversion>

		sharp = ADC_Conversion(sharp_sensor_channel);				// Stores the Analog value of front Sharp connected to ADC channel 11 into variable "sharp"
 33a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <sharp>
 33e:	7d df       	rcall	.-262    	; 0x23a <Sharp_GP2D12_estimation>
 340:	23 e0       	ldi	r18, 0x03	; 3
 342:	30 e0       	ldi	r19, 0x00	; 0
		value = Sharp_GP2D12_estimation(sharp);						// Stores Distance calculated in a variable "value"
 344:	ac 01       	movw	r20, r24
 346:	6e e0       	ldi	r22, 0x0E	; 14
		lcd_numeric_value(2,14,value,3); 							// Prints Value Of Distance in MM measured by Sharp Sensor
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	e9 d0       	rcall	.+466    	; 0x51e <lcd_numeric_value>
 34c:	af cf       	rjmp	.-162    	; 0x2ac <main+0x8>

0000034e <lcd_port_config>:
 34e:	87 b1       	in	r24, 0x07	; 7
 350:	87 60       	ori	r24, 0x07	; 7
 352:	87 b9       	out	0x07, r24	; 7
 354:	87 b1       	in	r24, 0x07	; 7
 356:	80 6f       	ori	r24, 0xF0	; 240
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 358:	87 b9       	out	0x07, r24	; 7
 35a:	88 b1       	in	r24, 0x08	; 8
 35c:	88 7f       	andi	r24, 0xF8	; 248
 35e:	88 b9       	out	0x08, r24	; 8
 360:	88 b1       	in	r24, 0x08	; 8
 362:	8f 70       	andi	r24, 0x0F	; 15
 364:	88 b9       	out	0x08, r24	; 8
 366:	08 95       	ret

00000368 <lcd_set_4bit>:
 368:	86 e6       	ldi	r24, 0x66	; 102
 36a:	9e e0       	ldi	r25, 0x0E	; 14
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_set_4bit+0x4>
 370:	00 00       	nop
 372:	40 98       	cbi	0x08, 0	; 8
 374:	41 98       	cbi	0x08, 1	; 8
 376:	80 e3       	ldi	r24, 0x30	; 48
 378:	88 b9       	out	0x08, r24	; 8
 37a:	42 9a       	sbi	0x08, 2	; 8
 37c:	ef ef       	ldi	r30, 0xFF	; 255
 37e:	f7 e4       	ldi	r31, 0x47	; 71
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_set_4bit+0x18>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_set_4bit+0x1e>
 386:	00 00       	nop
 388:	42 98       	cbi	0x08, 2	; 8
 38a:	e6 e6       	ldi	r30, 0x66	; 102
 38c:	fe e0       	ldi	r31, 0x0E	; 14
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <lcd_set_4bit+0x26>
 392:	00 00       	nop
 394:	40 98       	cbi	0x08, 0	; 8
 396:	41 98       	cbi	0x08, 1	; 8
 398:	88 b9       	out	0x08, r24	; 8
 39a:	42 9a       	sbi	0x08, 2	; 8
 39c:	ef ef       	ldi	r30, 0xFF	; 255
 39e:	f7 e4       	ldi	r31, 0x47	; 71
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <lcd_set_4bit+0x38>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <lcd_set_4bit+0x3e>
 3a6:	00 00       	nop
 3a8:	42 98       	cbi	0x08, 2	; 8
 3aa:	e6 e6       	ldi	r30, 0x66	; 102
 3ac:	fe e0       	ldi	r31, 0x0E	; 14
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_set_4bit+0x46>
 3b2:	00 00       	nop
 3b4:	40 98       	cbi	0x08, 0	; 8
 3b6:	41 98       	cbi	0x08, 1	; 8
 3b8:	88 b9       	out	0x08, r24	; 8
 3ba:	42 9a       	sbi	0x08, 2	; 8
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	97 e4       	ldi	r25, 0x47	; 71
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_set_4bit+0x58>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_set_4bit+0x5e>
 3c6:	00 00       	nop
 3c8:	42 98       	cbi	0x08, 2	; 8
 3ca:	e6 e6       	ldi	r30, 0x66	; 102
 3cc:	fe e0       	ldi	r31, 0x0E	; 14
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <lcd_set_4bit+0x66>
 3d2:	00 00       	nop
 3d4:	40 98       	cbi	0x08, 0	; 8
 3d6:	41 98       	cbi	0x08, 1	; 8
 3d8:	80 e2       	ldi	r24, 0x20	; 32
 3da:	88 b9       	out	0x08, r24	; 8
 3dc:	42 9a       	sbi	0x08, 2	; 8
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	97 e4       	ldi	r25, 0x47	; 71
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <lcd_set_4bit+0x7a>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <lcd_set_4bit+0x80>
 3e8:	00 00       	nop
 3ea:	42 98       	cbi	0x08, 2	; 8
 3ec:	08 95       	ret

000003ee <lcd_wr_command>:
 3ee:	98 b1       	in	r25, 0x08	; 8
 3f0:	9f 70       	andi	r25, 0x0F	; 15
 3f2:	98 b9       	out	0x08, r25	; 8
 3f4:	98 b1       	in	r25, 0x08	; 8
 3f6:	28 2f       	mov	r18, r24
 3f8:	20 7f       	andi	r18, 0xF0	; 240
 3fa:	92 2b       	or	r25, r18
 3fc:	98 b9       	out	0x08, r25	; 8
 3fe:	40 98       	cbi	0x08, 0	; 8
 400:	41 98       	cbi	0x08, 1	; 8
 402:	42 9a       	sbi	0x08, 2	; 8
 404:	ef ef       	ldi	r30, 0xFF	; 255
 406:	f7 e4       	ldi	r31, 0x47	; 71
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	42 98       	cbi	0x08, 2	; 8
 412:	98 b1       	in	r25, 0x08	; 8
 414:	9f 70       	andi	r25, 0x0F	; 15
 416:	98 b9       	out	0x08, r25	; 8
 418:	98 b1       	in	r25, 0x08	; 8
 41a:	82 95       	swap	r24
 41c:	80 7f       	andi	r24, 0xF0	; 240
 41e:	89 2b       	or	r24, r25
 420:	88 b9       	out	0x08, r24	; 8
 422:	40 98       	cbi	0x08, 0	; 8
 424:	41 98       	cbi	0x08, 1	; 8
 426:	42 9a       	sbi	0x08, 2	; 8
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	97 e4       	ldi	r25, 0x47	; 71
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
 434:	42 98       	cbi	0x08, 2	; 8
 436:	08 95       	ret

00000438 <lcd_init>:
 438:	97 df       	rcall	.-210    	; 0x368 <lcd_set_4bit>
 43a:	86 e6       	ldi	r24, 0x66	; 102
 43c:	9e e0       	ldi	r25, 0x0E	; 14
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <lcd_init+0x6>
 442:	00 00       	nop
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	d3 df       	rcall	.-90     	; 0x3ee <lcd_wr_command>
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	d1 df       	rcall	.-94     	; 0x3ee <lcd_wr_command>
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	cf df       	rcall	.-98     	; 0x3ee <lcd_wr_command>
 450:	8e e0       	ldi	r24, 0x0E	; 14
 452:	cd df       	rcall	.-102    	; 0x3ee <lcd_wr_command>
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	cb cf       	rjmp	.-106    	; 0x3ee <lcd_wr_command>
 458:	08 95       	ret

0000045a <lcd_home>:
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	c8 cf       	rjmp	.-112    	; 0x3ee <lcd_wr_command>
 45e:	08 95       	ret

00000460 <lcd_cursor>:
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	69 f0       	breq	.+26     	; 0x47e <lcd_cursor+0x1e>
 464:	18 f4       	brcc	.+6      	; 0x46c <lcd_cursor+0xc>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	31 f0       	breq	.+12     	; 0x476 <lcd_cursor+0x16>
 46a:	08 95       	ret
 46c:	83 30       	cpi	r24, 0x03	; 3
 46e:	59 f0       	breq	.+22     	; 0x486 <lcd_cursor+0x26>
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	69 f0       	breq	.+26     	; 0x48e <lcd_cursor+0x2e>
 474:	08 95       	ret
 476:	8f e7       	ldi	r24, 0x7F	; 127
 478:	86 0f       	add	r24, r22
 47a:	b9 cf       	rjmp	.-142    	; 0x3ee <lcd_wr_command>
 47c:	08 95       	ret
 47e:	8f eb       	ldi	r24, 0xBF	; 191
 480:	86 0f       	add	r24, r22
 482:	b5 cf       	rjmp	.-150    	; 0x3ee <lcd_wr_command>
 484:	08 95       	ret
 486:	83 e9       	ldi	r24, 0x93	; 147
 488:	86 0f       	add	r24, r22
 48a:	b1 cf       	rjmp	.-158    	; 0x3ee <lcd_wr_command>
 48c:	08 95       	ret
 48e:	83 ed       	ldi	r24, 0xD3	; 211
 490:	86 0f       	add	r24, r22
 492:	ad cf       	rjmp	.-166    	; 0x3ee <lcd_wr_command>
 494:	08 95       	ret

00000496 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 496:	cf 93       	push	r28
 498:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 49a:	e2 df       	rcall	.-60     	; 0x460 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 49c:	88 b1       	in	r24, 0x08	; 8
 49e:	8f 70       	andi	r24, 0x0F	; 15
 4a0:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= temp;
 4a2:	88 b1       	in	r24, 0x08	; 8
 4a4:	9c 2f       	mov	r25, r28
 4a6:	90 7f       	andi	r25, 0xF0	; 240
 4a8:	89 2b       	or	r24, r25
 4aa:	88 b9       	out	0x08, r24	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 4ac:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 4ae:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 4b0:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	97 e4       	ldi	r25, 0x47	; 71
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_wr_char+0x20>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <lcd_wr_char+0x26>
 4bc:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 4be:	42 98       	cbi	0x08, 2	; 8
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 4c0:	88 b1       	in	r24, 0x08	; 8
 4c2:	8f 70       	andi	r24, 0x0F	; 15
 4c4:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= alpha_num_char;
 4c6:	88 b1       	in	r24, 0x08	; 8
 4c8:	c2 95       	swap	r28
 4ca:	c0 7f       	andi	r28, 0xF0	; 240
 4cc:	c8 2b       	or	r28, r24
 4ce:	c8 b9       	out	0x08, r28	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 4d0:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 4d2:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 4d4:	42 9a       	sbi	0x08, 2	; 8
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	97 e4       	ldi	r25, 0x47	; 71
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <lcd_wr_char+0x44>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <lcd_wr_char+0x4a>
 4e0:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 4e2:	42 98       	cbi	0x08, 2	; 8
}
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	d8 2f       	mov	r29, r24
 4f2:	c6 2f       	mov	r28, r22
 4f4:	fa 01       	movw	r30, r20
	while(*str != '\0')
 4f6:	40 81       	ld	r20, Z
 4f8:	44 23       	and	r20, r20
 4fa:	61 f0       	breq	.+24     	; 0x514 <lcd_string+0x2c>
 4fc:	8f 01       	movw	r16, r30
 4fe:	0f 5f       	subi	r16, 0xFF	; 255
 500:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 502:	6c 2f       	mov	r22, r28
 504:	8d 2f       	mov	r24, r29
 506:	c7 df       	rcall	.-114    	; 0x496 <lcd_wr_char>
		str++;
		column+=1;
 508:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 50a:	f8 01       	movw	r30, r16
 50c:	41 91       	ld	r20, Z+
 50e:	8f 01       	movw	r16, r30
 510:	41 11       	cpse	r20, r1
 512:	f7 cf       	rjmp	.-18     	; 0x502 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	d8 2f       	mov	r29, r24
 52c:	c6 2f       	mov	r28, r22
 52e:	7a 01       	movw	r14, r20
 530:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
 532:	96 df       	rcall	.-212    	; 0x460 <lcd_cursor>
	
	if (val < 0)
 534:	ff 20       	and	r15, r15
 536:	4c f4       	brge	.+18     	; 0x54a <lcd_numeric_value+0x2c>
	{
		val = 0 - val;
 538:	f1 94       	neg	r15
 53a:	e1 94       	neg	r14
 53c:	f1 08       	sbc	r15, r1
		lcd_string(row, column, "-");
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	52 e0       	ldi	r21, 0x02	; 2
 542:	6c 2f       	mov	r22, r28
 544:	8d 2f       	mov	r24, r29
 546:	d0 df       	rcall	.-96     	; 0x4e8 <lcd_string>
		column+=1;
 548:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
 54a:	dd 23       	and	r29, r29
 54c:	11 f0       	breq	.+4      	; 0x552 <lcd_numeric_value+0x34>
 54e:	c1 11       	cpse	r28, r1
	{
		lcd_home();
 550:	02 c0       	rjmp	.+4      	; 0x556 <lcd_numeric_value+0x38>
 552:	83 df       	rcall	.-250    	; 0x45a <lcd_home>
	}
	
	else
	{
		lcd_cursor(row, column);
 554:	03 c0       	rjmp	.+6      	; 0x55c <lcd_numeric_value+0x3e>
 556:	6c 2f       	mov	r22, r28
 558:	8d 2f       	mov	r24, r29
 55a:	82 df       	rcall	.-252    	; 0x460 <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
 55c:	05 30       	cpi	r16, 0x05	; 5
 55e:	11 05       	cpc	r17, r1
 560:	09 f0       	breq	.+2      	; 0x564 <lcd_numeric_value+0x46>
	{
		million = val/10000+48;
 562:	ad c0       	rjmp	.+346    	; 0x6be <lcd_numeric_value+0x1a0>
 564:	c7 01       	movw	r24, r14
 566:	60 e1       	ldi	r22, 0x10	; 16
 568:	77 e2       	ldi	r23, 0x27	; 39
 56a:	0d d4       	rcall	.+2074   	; 0xd86 <__divmodhi4>
 56c:	ab 01       	movw	r20, r22
 56e:	40 5d       	subi	r20, 0xD0	; 208
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <million+0x1>
 576:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <million>
		lcd_wr_char(row ,column, million);
 57a:	6c 2f       	mov	r22, r28
 57c:	8d 2f       	mov	r24, r29
		column+=1;
 57e:	8b df       	rcall	.-234    	; 0x496 <lcd_wr_char>
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
	{
		temp = val/1000;
 580:	cf 5f       	subi	r28, 0xFF	; 255
 582:	c7 01       	movw	r24, r14
 584:	68 ee       	ldi	r22, 0xE8	; 232
 586:	73 e0       	ldi	r23, 0x03	; 3
 588:	fe d3       	rcall	.+2044   	; 0xd86 <__divmodhi4>
 58a:	ab 01       	movw	r20, r22
 58c:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <temp+0x1>
 590:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <temp>
		thousand = temp%10 + 48;
 594:	9b 01       	movw	r18, r22
 596:	ad ec       	ldi	r26, 0xCD	; 205
 598:	bc ec       	ldi	r27, 0xCC	; 204
 59a:	08 d4       	rcall	.+2064   	; 0xdac <__umulhisi3>
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	9c 01       	movw	r18, r24
 5aa:	22 0f       	add	r18, r18
 5ac:	33 1f       	adc	r19, r19
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	82 0f       	add	r24, r18
 5bc:	93 1f       	adc	r25, r19
 5be:	48 1b       	sub	r20, r24
 5c0:	59 0b       	sbc	r21, r25
 5c2:	40 5d       	subi	r20, 0xD0	; 208
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <thousand+0x1>
 5ca:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <thousand>
		lcd_wr_char(row, column, thousand);
 5ce:	6c 2f       	mov	r22, r28
 5d0:	8d 2f       	mov	r24, r29
		column+=1;
 5d2:	61 df       	rcall	.-318    	; 0x496 <lcd_wr_char>
 5d4:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <lcd_numeric_value+0xc0>
 5d8:	03 30       	cpi	r16, 0x03	; 3
 5da:	11 05       	cpc	r17, r1
	{
		temp = val/100;
 5dc:	59 f5       	brne	.+86     	; 0x634 <lcd_numeric_value+0x116>
 5de:	c7 01       	movw	r24, r14
 5e0:	64 e6       	ldi	r22, 0x64	; 100
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	d0 d3       	rcall	.+1952   	; 0xd86 <__divmodhi4>
 5e6:	ab 01       	movw	r20, r22
 5e8:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <temp+0x1>
 5ec:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <temp>
		hundred = temp%10 + 48;
 5f0:	9b 01       	movw	r18, r22
 5f2:	ad ec       	ldi	r26, 0xCD	; 205
 5f4:	bc ec       	ldi	r27, 0xCC	; 204
 5f6:	da d3       	rcall	.+1972   	; 0xdac <__umulhisi3>
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	96 95       	lsr	r25
 5fe:	87 95       	ror	r24
 600:	96 95       	lsr	r25
 602:	87 95       	ror	r24
 604:	9c 01       	movw	r18, r24
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	82 0f       	add	r24, r18
 618:	93 1f       	adc	r25, r19
 61a:	48 1b       	sub	r20, r24
 61c:	59 0b       	sbc	r21, r25
 61e:	40 5d       	subi	r20, 0xD0	; 208
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <hundred+0x1>
 626:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <hundred>
		lcd_wr_char(row, column, hundred);
 62a:	6c 2f       	mov	r22, r28
 62c:	8d 2f       	mov	r24, r29
		column+=1;
 62e:	33 df       	rcall	.-410    	; 0x496 <lcd_wr_char>
 630:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 2 || flag == 1)
 632:	04 c0       	rjmp	.+8      	; 0x63c <lcd_numeric_value+0x11e>
 634:	02 30       	cpi	r16, 0x02	; 2
 636:	11 05       	cpc	r17, r1
 638:	09 f0       	breq	.+2      	; 0x63c <lcd_numeric_value+0x11e>
	{
		temp = val/10;
 63a:	46 c0       	rjmp	.+140    	; 0x6c8 <lcd_numeric_value+0x1aa>
 63c:	c7 01       	movw	r24, r14
 63e:	6a e0       	ldi	r22, 0x0A	; 10
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	a1 d3       	rcall	.+1858   	; 0xd86 <__divmodhi4>
 644:	ab 01       	movw	r20, r22
 646:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <temp+0x1>
 64a:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <temp>
		tens = temp%10 + 48;
 64e:	9b 01       	movw	r18, r22
 650:	ad ec       	ldi	r26, 0xCD	; 205
 652:	bc ec       	ldi	r27, 0xCC	; 204
 654:	ab d3       	rcall	.+1878   	; 0xdac <__umulhisi3>
 656:	96 95       	lsr	r25
 658:	87 95       	ror	r24
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	9c 01       	movw	r18, r24
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	82 0f       	add	r24, r18
 676:	93 1f       	adc	r25, r19
 678:	48 1b       	sub	r20, r24
 67a:	59 0b       	sbc	r21, r25
 67c:	40 5d       	subi	r20, 0xD0	; 208
 67e:	5f 4f       	sbci	r21, 0xFF	; 255
 680:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <tens+0x1>
		lcd_wr_char(row, column, tens);
 684:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <tens>
 688:	6c 2f       	mov	r22, r28
		column+=1;
 68a:	8d 2f       	mov	r24, r29
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
	{
		unit = val%10 + 48;
 68c:	04 df       	rcall	.-504    	; 0x496 <lcd_wr_char>
 68e:	cf 5f       	subi	r28, 0xFF	; 255
 690:	c7 01       	movw	r24, r14
 692:	6a e0       	ldi	r22, 0x0A	; 10
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	77 d3       	rcall	.+1774   	; 0xd86 <__divmodhi4>
 698:	ac 01       	movw	r20, r24
 69a:	40 5d       	subi	r20, 0xD0	; 208
 69c:	5f 4f       	sbci	r21, 0xFF	; 255
 69e:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <unit+0x1>
		lcd_wr_char(row, column, unit);
 6a2:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <unit>
 6a6:	6c 2f       	mov	r22, r28
 6a8:	8d 2f       	mov	r24, r29
		column+=1;
 6aa:	f5 de       	rcall	.-534    	; 0x496 <lcd_wr_char>
	}
	
	if(digits > 5)
 6ac:	cf 5f       	subi	r28, 0xFF	; 255
 6ae:	06 30       	cpi	r16, 0x06	; 6
 6b0:	11 05       	cpc	r17, r1
	{
		lcd_wr_char(row, column, 'E');
 6b2:	74 f0       	brlt	.+28     	; 0x6d0 <lcd_numeric_value+0x1b2>
 6b4:	45 e4       	ldi	r20, 0x45	; 69
 6b6:	6c 2f       	mov	r22, r28
 6b8:	8d 2f       	mov	r24, r29
 6ba:	ed de       	rcall	.-550    	; 0x496 <lcd_wr_char>
		column+=1;
	}
 6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <lcd_numeric_value+0x1b2>
		lcd_wr_char(row ,column, million);
		column+=1;
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
 6be:	04 30       	cpi	r16, 0x04	; 4
 6c0:	11 05       	cpc	r17, r1
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <lcd_numeric_value+0x1a8>
 6c4:	89 cf       	rjmp	.-238    	; 0x5d8 <lcd_numeric_value+0xba>
 6c6:	5d cf       	rjmp	.-326    	; 0x582 <lcd_numeric_value+0x64>
		lcd_wr_char(row, column, tens);
		column+=1;
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
 6c8:	01 30       	cpi	r16, 0x01	; 1
 6ca:	11 05       	cpc	r17, r1
 6cc:	81 f7       	brne	.-32     	; 0x6ae <lcd_numeric_value+0x190>
 6ce:	e0 cf       	rjmp	.-64     	; 0x690 <lcd_numeric_value+0x172>
	if(digits > 5)
	{
		lcd_wr_char(row, column, 'E');
		column+=1;
	}
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	1f 91       	pop	r17
 6d6:	0f 91       	pop	r16
 6d8:	ff 90       	pop	r15
 6da:	ef 90       	pop	r14
 6dc:	08 95       	ret

000006de <__subsf3>:
 6de:	50 58       	subi	r21, 0x80	; 128

000006e0 <__addsf3>:
 6e0:	bb 27       	eor	r27, r27
 6e2:	aa 27       	eor	r26, r26
 6e4:	0e d0       	rcall	.+28     	; 0x702 <__addsf3x>
 6e6:	4d c1       	rjmp	.+666    	; 0x982 <__fp_round>
 6e8:	3e d1       	rcall	.+636    	; 0x966 <__fp_pscA>
 6ea:	30 f0       	brcs	.+12     	; 0x6f8 <__addsf3+0x18>
 6ec:	43 d1       	rcall	.+646    	; 0x974 <__fp_pscB>
 6ee:	20 f0       	brcs	.+8      	; 0x6f8 <__addsf3+0x18>
 6f0:	31 f4       	brne	.+12     	; 0x6fe <__addsf3+0x1e>
 6f2:	9f 3f       	cpi	r25, 0xFF	; 255
 6f4:	11 f4       	brne	.+4      	; 0x6fa <__addsf3+0x1a>
 6f6:	1e f4       	brtc	.+6      	; 0x6fe <__addsf3+0x1e>
 6f8:	33 c1       	rjmp	.+614    	; 0x960 <__fp_nan>
 6fa:	0e f4       	brtc	.+2      	; 0x6fe <__addsf3+0x1e>
 6fc:	e0 95       	com	r30
 6fe:	e7 fb       	bst	r30, 7
 700:	29 c1       	rjmp	.+594    	; 0x954 <__fp_inf>

00000702 <__addsf3x>:
 702:	e9 2f       	mov	r30, r25
 704:	4f d1       	rcall	.+670    	; 0x9a4 <__fp_split3>
 706:	80 f3       	brcs	.-32     	; 0x6e8 <__addsf3+0x8>
 708:	ba 17       	cp	r27, r26
 70a:	62 07       	cpc	r22, r18
 70c:	73 07       	cpc	r23, r19
 70e:	84 07       	cpc	r24, r20
 710:	95 07       	cpc	r25, r21
 712:	18 f0       	brcs	.+6      	; 0x71a <__addsf3x+0x18>
 714:	71 f4       	brne	.+28     	; 0x732 <__addsf3x+0x30>
 716:	9e f5       	brtc	.+102    	; 0x77e <__addsf3x+0x7c>
 718:	67 c1       	rjmp	.+718    	; 0x9e8 <__fp_zero>
 71a:	0e f4       	brtc	.+2      	; 0x71e <__addsf3x+0x1c>
 71c:	e0 95       	com	r30
 71e:	0b 2e       	mov	r0, r27
 720:	ba 2f       	mov	r27, r26
 722:	a0 2d       	mov	r26, r0
 724:	0b 01       	movw	r0, r22
 726:	b9 01       	movw	r22, r18
 728:	90 01       	movw	r18, r0
 72a:	0c 01       	movw	r0, r24
 72c:	ca 01       	movw	r24, r20
 72e:	a0 01       	movw	r20, r0
 730:	11 24       	eor	r1, r1
 732:	ff 27       	eor	r31, r31
 734:	59 1b       	sub	r21, r25
 736:	99 f0       	breq	.+38     	; 0x75e <__addsf3x+0x5c>
 738:	59 3f       	cpi	r21, 0xF9	; 249
 73a:	50 f4       	brcc	.+20     	; 0x750 <__addsf3x+0x4e>
 73c:	50 3e       	cpi	r21, 0xE0	; 224
 73e:	68 f1       	brcs	.+90     	; 0x79a <__addsf3x+0x98>
 740:	1a 16       	cp	r1, r26
 742:	f0 40       	sbci	r31, 0x00	; 0
 744:	a2 2f       	mov	r26, r18
 746:	23 2f       	mov	r18, r19
 748:	34 2f       	mov	r19, r20
 74a:	44 27       	eor	r20, r20
 74c:	58 5f       	subi	r21, 0xF8	; 248
 74e:	f3 cf       	rjmp	.-26     	; 0x736 <__addsf3x+0x34>
 750:	46 95       	lsr	r20
 752:	37 95       	ror	r19
 754:	27 95       	ror	r18
 756:	a7 95       	ror	r26
 758:	f0 40       	sbci	r31, 0x00	; 0
 75a:	53 95       	inc	r21
 75c:	c9 f7       	brne	.-14     	; 0x750 <__addsf3x+0x4e>
 75e:	7e f4       	brtc	.+30     	; 0x77e <__addsf3x+0x7c>
 760:	1f 16       	cp	r1, r31
 762:	ba 0b       	sbc	r27, r26
 764:	62 0b       	sbc	r22, r18
 766:	73 0b       	sbc	r23, r19
 768:	84 0b       	sbc	r24, r20
 76a:	ba f0       	brmi	.+46     	; 0x79a <__addsf3x+0x98>
 76c:	91 50       	subi	r25, 0x01	; 1
 76e:	a1 f0       	breq	.+40     	; 0x798 <__addsf3x+0x96>
 770:	ff 0f       	add	r31, r31
 772:	bb 1f       	adc	r27, r27
 774:	66 1f       	adc	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	c2 f7       	brpl	.-16     	; 0x76c <__addsf3x+0x6a>
 77c:	0e c0       	rjmp	.+28     	; 0x79a <__addsf3x+0x98>
 77e:	ba 0f       	add	r27, r26
 780:	62 1f       	adc	r22, r18
 782:	73 1f       	adc	r23, r19
 784:	84 1f       	adc	r24, r20
 786:	48 f4       	brcc	.+18     	; 0x79a <__addsf3x+0x98>
 788:	87 95       	ror	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b7 95       	ror	r27
 790:	f7 95       	ror	r31
 792:	9e 3f       	cpi	r25, 0xFE	; 254
 794:	08 f0       	brcs	.+2      	; 0x798 <__addsf3x+0x96>
 796:	b3 cf       	rjmp	.-154    	; 0x6fe <__addsf3+0x1e>
 798:	93 95       	inc	r25
 79a:	88 0f       	add	r24, r24
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <__addsf3x+0x9e>
 79e:	99 27       	eor	r25, r25
 7a0:	ee 0f       	add	r30, r30
 7a2:	97 95       	ror	r25
 7a4:	87 95       	ror	r24
 7a6:	08 95       	ret

000007a8 <__divsf3>:
 7a8:	0c d0       	rcall	.+24     	; 0x7c2 <__divsf3x>
 7aa:	eb c0       	rjmp	.+470    	; 0x982 <__fp_round>
 7ac:	e3 d0       	rcall	.+454    	; 0x974 <__fp_pscB>
 7ae:	40 f0       	brcs	.+16     	; 0x7c0 <__divsf3+0x18>
 7b0:	da d0       	rcall	.+436    	; 0x966 <__fp_pscA>
 7b2:	30 f0       	brcs	.+12     	; 0x7c0 <__divsf3+0x18>
 7b4:	21 f4       	brne	.+8      	; 0x7be <__divsf3+0x16>
 7b6:	5f 3f       	cpi	r21, 0xFF	; 255
 7b8:	19 f0       	breq	.+6      	; 0x7c0 <__divsf3+0x18>
 7ba:	cc c0       	rjmp	.+408    	; 0x954 <__fp_inf>
 7bc:	51 11       	cpse	r21, r1
 7be:	15 c1       	rjmp	.+554    	; 0x9ea <__fp_szero>
 7c0:	cf c0       	rjmp	.+414    	; 0x960 <__fp_nan>

000007c2 <__divsf3x>:
 7c2:	f0 d0       	rcall	.+480    	; 0x9a4 <__fp_split3>
 7c4:	98 f3       	brcs	.-26     	; 0x7ac <__divsf3+0x4>

000007c6 <__divsf3_pse>:
 7c6:	99 23       	and	r25, r25
 7c8:	c9 f3       	breq	.-14     	; 0x7bc <__divsf3+0x14>
 7ca:	55 23       	and	r21, r21
 7cc:	b1 f3       	breq	.-20     	; 0x7ba <__divsf3+0x12>
 7ce:	95 1b       	sub	r25, r21
 7d0:	55 0b       	sbc	r21, r21
 7d2:	bb 27       	eor	r27, r27
 7d4:	aa 27       	eor	r26, r26
 7d6:	62 17       	cp	r22, r18
 7d8:	73 07       	cpc	r23, r19
 7da:	84 07       	cpc	r24, r20
 7dc:	38 f0       	brcs	.+14     	; 0x7ec <__divsf3_pse+0x26>
 7de:	9f 5f       	subi	r25, 0xFF	; 255
 7e0:	5f 4f       	sbci	r21, 0xFF	; 255
 7e2:	22 0f       	add	r18, r18
 7e4:	33 1f       	adc	r19, r19
 7e6:	44 1f       	adc	r20, r20
 7e8:	aa 1f       	adc	r26, r26
 7ea:	a9 f3       	breq	.-22     	; 0x7d6 <__divsf3_pse+0x10>
 7ec:	33 d0       	rcall	.+102    	; 0x854 <__divsf3_pse+0x8e>
 7ee:	0e 2e       	mov	r0, r30
 7f0:	3a f0       	brmi	.+14     	; 0x800 <__divsf3_pse+0x3a>
 7f2:	e0 e8       	ldi	r30, 0x80	; 128
 7f4:	30 d0       	rcall	.+96     	; 0x856 <__divsf3_pse+0x90>
 7f6:	91 50       	subi	r25, 0x01	; 1
 7f8:	50 40       	sbci	r21, 0x00	; 0
 7fa:	e6 95       	lsr	r30
 7fc:	00 1c       	adc	r0, r0
 7fe:	ca f7       	brpl	.-14     	; 0x7f2 <__divsf3_pse+0x2c>
 800:	29 d0       	rcall	.+82     	; 0x854 <__divsf3_pse+0x8e>
 802:	fe 2f       	mov	r31, r30
 804:	27 d0       	rcall	.+78     	; 0x854 <__divsf3_pse+0x8e>
 806:	66 0f       	add	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	bb 1f       	adc	r27, r27
 80e:	26 17       	cp	r18, r22
 810:	37 07       	cpc	r19, r23
 812:	48 07       	cpc	r20, r24
 814:	ab 07       	cpc	r26, r27
 816:	b0 e8       	ldi	r27, 0x80	; 128
 818:	09 f0       	breq	.+2      	; 0x81c <__divsf3_pse+0x56>
 81a:	bb 0b       	sbc	r27, r27
 81c:	80 2d       	mov	r24, r0
 81e:	bf 01       	movw	r22, r30
 820:	ff 27       	eor	r31, r31
 822:	93 58       	subi	r25, 0x83	; 131
 824:	5f 4f       	sbci	r21, 0xFF	; 255
 826:	2a f0       	brmi	.+10     	; 0x832 <__divsf3_pse+0x6c>
 828:	9e 3f       	cpi	r25, 0xFE	; 254
 82a:	51 05       	cpc	r21, r1
 82c:	68 f0       	brcs	.+26     	; 0x848 <__divsf3_pse+0x82>
 82e:	92 c0       	rjmp	.+292    	; 0x954 <__fp_inf>
 830:	dc c0       	rjmp	.+440    	; 0x9ea <__fp_szero>
 832:	5f 3f       	cpi	r21, 0xFF	; 255
 834:	ec f3       	brlt	.-6      	; 0x830 <__divsf3_pse+0x6a>
 836:	98 3e       	cpi	r25, 0xE8	; 232
 838:	dc f3       	brlt	.-10     	; 0x830 <__divsf3_pse+0x6a>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	9f 5f       	subi	r25, 0xFF	; 255
 846:	c9 f7       	brne	.-14     	; 0x83a <__divsf3_pse+0x74>
 848:	88 0f       	add	r24, r24
 84a:	91 1d       	adc	r25, r1
 84c:	96 95       	lsr	r25
 84e:	87 95       	ror	r24
 850:	97 f9       	bld	r25, 7
 852:	08 95       	ret
 854:	e1 e0       	ldi	r30, 0x01	; 1
 856:	66 0f       	add	r22, r22
 858:	77 1f       	adc	r23, r23
 85a:	88 1f       	adc	r24, r24
 85c:	bb 1f       	adc	r27, r27
 85e:	62 17       	cp	r22, r18
 860:	73 07       	cpc	r23, r19
 862:	84 07       	cpc	r24, r20
 864:	ba 07       	cpc	r27, r26
 866:	20 f0       	brcs	.+8      	; 0x870 <__divsf3_pse+0xaa>
 868:	62 1b       	sub	r22, r18
 86a:	73 0b       	sbc	r23, r19
 86c:	84 0b       	sbc	r24, r20
 86e:	ba 0b       	sbc	r27, r26
 870:	ee 1f       	adc	r30, r30
 872:	88 f7       	brcc	.-30     	; 0x856 <__divsf3_pse+0x90>
 874:	e0 95       	com	r30
 876:	08 95       	ret

00000878 <__fixsfsi>:
 878:	04 d0       	rcall	.+8      	; 0x882 <__fixunssfsi>
 87a:	68 94       	set
 87c:	b1 11       	cpse	r27, r1
 87e:	b5 c0       	rjmp	.+362    	; 0x9ea <__fp_szero>
 880:	08 95       	ret

00000882 <__fixunssfsi>:
 882:	98 d0       	rcall	.+304    	; 0x9b4 <__fp_splitA>
 884:	88 f0       	brcs	.+34     	; 0x8a8 <__fixunssfsi+0x26>
 886:	9f 57       	subi	r25, 0x7F	; 127
 888:	90 f0       	brcs	.+36     	; 0x8ae <__fixunssfsi+0x2c>
 88a:	b9 2f       	mov	r27, r25
 88c:	99 27       	eor	r25, r25
 88e:	b7 51       	subi	r27, 0x17	; 23
 890:	a0 f0       	brcs	.+40     	; 0x8ba <__fixunssfsi+0x38>
 892:	d1 f0       	breq	.+52     	; 0x8c8 <__fixunssfsi+0x46>
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	1a f0       	brmi	.+6      	; 0x8a4 <__fixunssfsi+0x22>
 89e:	ba 95       	dec	r27
 8a0:	c9 f7       	brne	.-14     	; 0x894 <__fixunssfsi+0x12>
 8a2:	12 c0       	rjmp	.+36     	; 0x8c8 <__fixunssfsi+0x46>
 8a4:	b1 30       	cpi	r27, 0x01	; 1
 8a6:	81 f0       	breq	.+32     	; 0x8c8 <__fixunssfsi+0x46>
 8a8:	9f d0       	rcall	.+318    	; 0x9e8 <__fp_zero>
 8aa:	b1 e0       	ldi	r27, 0x01	; 1
 8ac:	08 95       	ret
 8ae:	9c c0       	rjmp	.+312    	; 0x9e8 <__fp_zero>
 8b0:	67 2f       	mov	r22, r23
 8b2:	78 2f       	mov	r23, r24
 8b4:	88 27       	eor	r24, r24
 8b6:	b8 5f       	subi	r27, 0xF8	; 248
 8b8:	39 f0       	breq	.+14     	; 0x8c8 <__fixunssfsi+0x46>
 8ba:	b9 3f       	cpi	r27, 0xF9	; 249
 8bc:	cc f3       	brlt	.-14     	; 0x8b0 <__fixunssfsi+0x2e>
 8be:	86 95       	lsr	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	b3 95       	inc	r27
 8c6:	d9 f7       	brne	.-10     	; 0x8be <__fixunssfsi+0x3c>
 8c8:	3e f4       	brtc	.+14     	; 0x8d8 <__fixunssfsi+0x56>
 8ca:	90 95       	com	r25
 8cc:	80 95       	com	r24
 8ce:	70 95       	com	r23
 8d0:	61 95       	neg	r22
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	08 95       	ret

000008da <__floatunsisf>:
 8da:	e8 94       	clt
 8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__floatsisf+0x12>

000008de <__floatsisf>:
 8de:	97 fb       	bst	r25, 7
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__floatsisf+0x12>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	99 23       	and	r25, r25
 8f2:	a9 f0       	breq	.+42     	; 0x91e <__floatsisf+0x40>
 8f4:	f9 2f       	mov	r31, r25
 8f6:	96 e9       	ldi	r25, 0x96	; 150
 8f8:	bb 27       	eor	r27, r27
 8fa:	93 95       	inc	r25
 8fc:	f6 95       	lsr	r31
 8fe:	87 95       	ror	r24
 900:	77 95       	ror	r23
 902:	67 95       	ror	r22
 904:	b7 95       	ror	r27
 906:	f1 11       	cpse	r31, r1
 908:	f8 cf       	rjmp	.-16     	; 0x8fa <__floatsisf+0x1c>
 90a:	fa f4       	brpl	.+62     	; 0x94a <__floatsisf+0x6c>
 90c:	bb 0f       	add	r27, r27
 90e:	11 f4       	brne	.+4      	; 0x914 <__floatsisf+0x36>
 910:	60 ff       	sbrs	r22, 0
 912:	1b c0       	rjmp	.+54     	; 0x94a <__floatsisf+0x6c>
 914:	6f 5f       	subi	r22, 0xFF	; 255
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	16 c0       	rjmp	.+44     	; 0x94a <__floatsisf+0x6c>
 91e:	88 23       	and	r24, r24
 920:	11 f0       	breq	.+4      	; 0x926 <__floatsisf+0x48>
 922:	96 e9       	ldi	r25, 0x96	; 150
 924:	11 c0       	rjmp	.+34     	; 0x948 <__floatsisf+0x6a>
 926:	77 23       	and	r23, r23
 928:	21 f0       	breq	.+8      	; 0x932 <__floatsisf+0x54>
 92a:	9e e8       	ldi	r25, 0x8E	; 142
 92c:	87 2f       	mov	r24, r23
 92e:	76 2f       	mov	r23, r22
 930:	05 c0       	rjmp	.+10     	; 0x93c <__floatsisf+0x5e>
 932:	66 23       	and	r22, r22
 934:	71 f0       	breq	.+28     	; 0x952 <__floatsisf+0x74>
 936:	96 e8       	ldi	r25, 0x86	; 134
 938:	86 2f       	mov	r24, r22
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	2a f0       	brmi	.+10     	; 0x94a <__floatsisf+0x6c>
 940:	9a 95       	dec	r25
 942:	66 0f       	add	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	da f7       	brpl	.-10     	; 0x940 <__floatsisf+0x62>
 94a:	88 0f       	add	r24, r24
 94c:	96 95       	lsr	r25
 94e:	87 95       	ror	r24
 950:	97 f9       	bld	r25, 7
 952:	08 95       	ret

00000954 <__fp_inf>:
 954:	97 f9       	bld	r25, 7
 956:	9f 67       	ori	r25, 0x7F	; 127
 958:	80 e8       	ldi	r24, 0x80	; 128
 95a:	70 e0       	ldi	r23, 0x00	; 0
 95c:	60 e0       	ldi	r22, 0x00	; 0
 95e:	08 95       	ret

00000960 <__fp_nan>:
 960:	9f ef       	ldi	r25, 0xFF	; 255
 962:	80 ec       	ldi	r24, 0xC0	; 192
 964:	08 95       	ret

00000966 <__fp_pscA>:
 966:	00 24       	eor	r0, r0
 968:	0a 94       	dec	r0
 96a:	16 16       	cp	r1, r22
 96c:	17 06       	cpc	r1, r23
 96e:	18 06       	cpc	r1, r24
 970:	09 06       	cpc	r0, r25
 972:	08 95       	ret

00000974 <__fp_pscB>:
 974:	00 24       	eor	r0, r0
 976:	0a 94       	dec	r0
 978:	12 16       	cp	r1, r18
 97a:	13 06       	cpc	r1, r19
 97c:	14 06       	cpc	r1, r20
 97e:	05 06       	cpc	r0, r21
 980:	08 95       	ret

00000982 <__fp_round>:
 982:	09 2e       	mov	r0, r25
 984:	03 94       	inc	r0
 986:	00 0c       	add	r0, r0
 988:	11 f4       	brne	.+4      	; 0x98e <__fp_round+0xc>
 98a:	88 23       	and	r24, r24
 98c:	52 f0       	brmi	.+20     	; 0x9a2 <__fp_round+0x20>
 98e:	bb 0f       	add	r27, r27
 990:	40 f4       	brcc	.+16     	; 0x9a2 <__fp_round+0x20>
 992:	bf 2b       	or	r27, r31
 994:	11 f4       	brne	.+4      	; 0x99a <__fp_round+0x18>
 996:	60 ff       	sbrs	r22, 0
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fp_round+0x20>
 99a:	6f 5f       	subi	r22, 0xFF	; 255
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	08 95       	ret

000009a4 <__fp_split3>:
 9a4:	57 fd       	sbrc	r21, 7
 9a6:	90 58       	subi	r25, 0x80	; 128
 9a8:	44 0f       	add	r20, r20
 9aa:	55 1f       	adc	r21, r21
 9ac:	59 f0       	breq	.+22     	; 0x9c4 <__fp_splitA+0x10>
 9ae:	5f 3f       	cpi	r21, 0xFF	; 255
 9b0:	71 f0       	breq	.+28     	; 0x9ce <__fp_splitA+0x1a>
 9b2:	47 95       	ror	r20

000009b4 <__fp_splitA>:
 9b4:	88 0f       	add	r24, r24
 9b6:	97 fb       	bst	r25, 7
 9b8:	99 1f       	adc	r25, r25
 9ba:	61 f0       	breq	.+24     	; 0x9d4 <__fp_splitA+0x20>
 9bc:	9f 3f       	cpi	r25, 0xFF	; 255
 9be:	79 f0       	breq	.+30     	; 0x9de <__fp_splitA+0x2a>
 9c0:	87 95       	ror	r24
 9c2:	08 95       	ret
 9c4:	12 16       	cp	r1, r18
 9c6:	13 06       	cpc	r1, r19
 9c8:	14 06       	cpc	r1, r20
 9ca:	55 1f       	adc	r21, r21
 9cc:	f2 cf       	rjmp	.-28     	; 0x9b2 <__fp_split3+0xe>
 9ce:	46 95       	lsr	r20
 9d0:	f1 df       	rcall	.-30     	; 0x9b4 <__fp_splitA>
 9d2:	08 c0       	rjmp	.+16     	; 0x9e4 <__fp_splitA+0x30>
 9d4:	16 16       	cp	r1, r22
 9d6:	17 06       	cpc	r1, r23
 9d8:	18 06       	cpc	r1, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	f1 cf       	rjmp	.-30     	; 0x9c0 <__fp_splitA+0xc>
 9de:	86 95       	lsr	r24
 9e0:	71 05       	cpc	r23, r1
 9e2:	61 05       	cpc	r22, r1
 9e4:	08 94       	sec
 9e6:	08 95       	ret

000009e8 <__fp_zero>:
 9e8:	e8 94       	clt

000009ea <__fp_szero>:
 9ea:	bb 27       	eor	r27, r27
 9ec:	66 27       	eor	r22, r22
 9ee:	77 27       	eor	r23, r23
 9f0:	cb 01       	movw	r24, r22
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret

000009f6 <__mulsf3>:
 9f6:	0b d0       	rcall	.+22     	; 0xa0e <__mulsf3x>
 9f8:	c4 cf       	rjmp	.-120    	; 0x982 <__fp_round>
 9fa:	b5 df       	rcall	.-150    	; 0x966 <__fp_pscA>
 9fc:	28 f0       	brcs	.+10     	; 0xa08 <__mulsf3+0x12>
 9fe:	ba df       	rcall	.-140    	; 0x974 <__fp_pscB>
 a00:	18 f0       	brcs	.+6      	; 0xa08 <__mulsf3+0x12>
 a02:	95 23       	and	r25, r21
 a04:	09 f0       	breq	.+2      	; 0xa08 <__mulsf3+0x12>
 a06:	a6 cf       	rjmp	.-180    	; 0x954 <__fp_inf>
 a08:	ab cf       	rjmp	.-170    	; 0x960 <__fp_nan>
 a0a:	11 24       	eor	r1, r1
 a0c:	ee cf       	rjmp	.-36     	; 0x9ea <__fp_szero>

00000a0e <__mulsf3x>:
 a0e:	ca df       	rcall	.-108    	; 0x9a4 <__fp_split3>
 a10:	a0 f3       	brcs	.-24     	; 0x9fa <__mulsf3+0x4>

00000a12 <__mulsf3_pse>:
 a12:	95 9f       	mul	r25, r21
 a14:	d1 f3       	breq	.-12     	; 0xa0a <__mulsf3+0x14>
 a16:	95 0f       	add	r25, r21
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	55 1f       	adc	r21, r21
 a1c:	62 9f       	mul	r22, r18
 a1e:	f0 01       	movw	r30, r0
 a20:	72 9f       	mul	r23, r18
 a22:	bb 27       	eor	r27, r27
 a24:	f0 0d       	add	r31, r0
 a26:	b1 1d       	adc	r27, r1
 a28:	63 9f       	mul	r22, r19
 a2a:	aa 27       	eor	r26, r26
 a2c:	f0 0d       	add	r31, r0
 a2e:	b1 1d       	adc	r27, r1
 a30:	aa 1f       	adc	r26, r26
 a32:	64 9f       	mul	r22, r20
 a34:	66 27       	eor	r22, r22
 a36:	b0 0d       	add	r27, r0
 a38:	a1 1d       	adc	r26, r1
 a3a:	66 1f       	adc	r22, r22
 a3c:	82 9f       	mul	r24, r18
 a3e:	22 27       	eor	r18, r18
 a40:	b0 0d       	add	r27, r0
 a42:	a1 1d       	adc	r26, r1
 a44:	62 1f       	adc	r22, r18
 a46:	73 9f       	mul	r23, r19
 a48:	b0 0d       	add	r27, r0
 a4a:	a1 1d       	adc	r26, r1
 a4c:	62 1f       	adc	r22, r18
 a4e:	83 9f       	mul	r24, r19
 a50:	a0 0d       	add	r26, r0
 a52:	61 1d       	adc	r22, r1
 a54:	22 1f       	adc	r18, r18
 a56:	74 9f       	mul	r23, r20
 a58:	33 27       	eor	r19, r19
 a5a:	a0 0d       	add	r26, r0
 a5c:	61 1d       	adc	r22, r1
 a5e:	23 1f       	adc	r18, r19
 a60:	84 9f       	mul	r24, r20
 a62:	60 0d       	add	r22, r0
 a64:	21 1d       	adc	r18, r1
 a66:	82 2f       	mov	r24, r18
 a68:	76 2f       	mov	r23, r22
 a6a:	6a 2f       	mov	r22, r26
 a6c:	11 24       	eor	r1, r1
 a6e:	9f 57       	subi	r25, 0x7F	; 127
 a70:	50 40       	sbci	r21, 0x00	; 0
 a72:	8a f0       	brmi	.+34     	; 0xa96 <__mulsf3_pse+0x84>
 a74:	e1 f0       	breq	.+56     	; 0xaae <__mulsf3_pse+0x9c>
 a76:	88 23       	and	r24, r24
 a78:	4a f0       	brmi	.+18     	; 0xa8c <__mulsf3_pse+0x7a>
 a7a:	ee 0f       	add	r30, r30
 a7c:	ff 1f       	adc	r31, r31
 a7e:	bb 1f       	adc	r27, r27
 a80:	66 1f       	adc	r22, r22
 a82:	77 1f       	adc	r23, r23
 a84:	88 1f       	adc	r24, r24
 a86:	91 50       	subi	r25, 0x01	; 1
 a88:	50 40       	sbci	r21, 0x00	; 0
 a8a:	a9 f7       	brne	.-22     	; 0xa76 <__mulsf3_pse+0x64>
 a8c:	9e 3f       	cpi	r25, 0xFE	; 254
 a8e:	51 05       	cpc	r21, r1
 a90:	70 f0       	brcs	.+28     	; 0xaae <__mulsf3_pse+0x9c>
 a92:	60 cf       	rjmp	.-320    	; 0x954 <__fp_inf>
 a94:	aa cf       	rjmp	.-172    	; 0x9ea <__fp_szero>
 a96:	5f 3f       	cpi	r21, 0xFF	; 255
 a98:	ec f3       	brlt	.-6      	; 0xa94 <__mulsf3_pse+0x82>
 a9a:	98 3e       	cpi	r25, 0xE8	; 232
 a9c:	dc f3       	brlt	.-10     	; 0xa94 <__mulsf3_pse+0x82>
 a9e:	86 95       	lsr	r24
 aa0:	77 95       	ror	r23
 aa2:	67 95       	ror	r22
 aa4:	b7 95       	ror	r27
 aa6:	f7 95       	ror	r31
 aa8:	e7 95       	ror	r30
 aaa:	9f 5f       	subi	r25, 0xFF	; 255
 aac:	c1 f7       	brne	.-16     	; 0xa9e <__mulsf3_pse+0x8c>
 aae:	fe 2b       	or	r31, r30
 ab0:	88 0f       	add	r24, r24
 ab2:	91 1d       	adc	r25, r1
 ab4:	96 95       	lsr	r25
 ab6:	87 95       	ror	r24
 ab8:	97 f9       	bld	r25, 7
 aba:	08 95       	ret

00000abc <pow>:
 abc:	fa 01       	movw	r30, r20
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	30 96       	adiw	r30, 0x00	; 0
 ac4:	21 05       	cpc	r18, r1
 ac6:	31 05       	cpc	r19, r1
 ac8:	99 f1       	breq	.+102    	; 0xb30 <pow+0x74>
 aca:	61 15       	cp	r22, r1
 acc:	71 05       	cpc	r23, r1
 ace:	61 f4       	brne	.+24     	; 0xae8 <pow+0x2c>
 ad0:	80 38       	cpi	r24, 0x80	; 128
 ad2:	bf e3       	ldi	r27, 0x3F	; 63
 ad4:	9b 07       	cpc	r25, r27
 ad6:	49 f1       	breq	.+82     	; 0xb2a <pow+0x6e>
 ad8:	68 94       	set
 ada:	90 38       	cpi	r25, 0x80	; 128
 adc:	81 05       	cpc	r24, r1
 ade:	61 f0       	breq	.+24     	; 0xaf8 <pow+0x3c>
 ae0:	80 38       	cpi	r24, 0x80	; 128
 ae2:	bf ef       	ldi	r27, 0xFF	; 255
 ae4:	9b 07       	cpc	r25, r27
 ae6:	41 f0       	breq	.+16     	; 0xaf8 <pow+0x3c>
 ae8:	99 23       	and	r25, r25
 aea:	42 f5       	brpl	.+80     	; 0xb3c <pow+0x80>
 aec:	ff 3f       	cpi	r31, 0xFF	; 255
 aee:	e1 05       	cpc	r30, r1
 af0:	31 05       	cpc	r19, r1
 af2:	21 05       	cpc	r18, r1
 af4:	11 f1       	breq	.+68     	; 0xb3a <pow+0x7e>
 af6:	e8 94       	clt
 af8:	08 94       	sec
 afa:	e7 95       	ror	r30
 afc:	d9 01       	movw	r26, r18
 afe:	aa 23       	and	r26, r26
 b00:	29 f4       	brne	.+10     	; 0xb0c <pow+0x50>
 b02:	ab 2f       	mov	r26, r27
 b04:	be 2f       	mov	r27, r30
 b06:	f8 5f       	subi	r31, 0xF8	; 248
 b08:	d0 f3       	brcs	.-12     	; 0xafe <pow+0x42>
 b0a:	10 c0       	rjmp	.+32     	; 0xb2c <pow+0x70>
 b0c:	ff 5f       	subi	r31, 0xFF	; 255
 b0e:	70 f4       	brcc	.+28     	; 0xb2c <pow+0x70>
 b10:	a6 95       	lsr	r26
 b12:	e0 f7       	brcc	.-8      	; 0xb0c <pow+0x50>
 b14:	f7 39       	cpi	r31, 0x97	; 151
 b16:	50 f0       	brcs	.+20     	; 0xb2c <pow+0x70>
 b18:	19 f0       	breq	.+6      	; 0xb20 <pow+0x64>
 b1a:	ff 3a       	cpi	r31, 0xAF	; 175
 b1c:	38 f4       	brcc	.+14     	; 0xb2c <pow+0x70>
 b1e:	9f 77       	andi	r25, 0x7F	; 127
 b20:	9f 93       	push	r25
 b22:	0c d0       	rcall	.+24     	; 0xb3c <pow+0x80>
 b24:	0f 90       	pop	r0
 b26:	07 fc       	sbrc	r0, 7
 b28:	90 58       	subi	r25, 0x80	; 128
 b2a:	08 95       	ret
 b2c:	3e f0       	brts	.+14     	; 0xb3c <pow+0x80>
 b2e:	18 cf       	rjmp	.-464    	; 0x960 <__fp_nan>
 b30:	60 e0       	ldi	r22, 0x00	; 0
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	80 e8       	ldi	r24, 0x80	; 128
 b36:	9f e3       	ldi	r25, 0x3F	; 63
 b38:	08 95       	ret
 b3a:	4f e7       	ldi	r20, 0x7F	; 127
 b3c:	9f 77       	andi	r25, 0x7F	; 127
 b3e:	5f 93       	push	r21
 b40:	4f 93       	push	r20
 b42:	3f 93       	push	r19
 b44:	2f 93       	push	r18
 b46:	9e d0       	rcall	.+316    	; 0xc84 <log>
 b48:	2f 91       	pop	r18
 b4a:	3f 91       	pop	r19
 b4c:	4f 91       	pop	r20
 b4e:	5f 91       	pop	r21
 b50:	52 df       	rcall	.-348    	; 0x9f6 <__mulsf3>
 b52:	05 c0       	rjmp	.+10     	; 0xb5e <exp>
 b54:	19 f4       	brne	.+6      	; 0xb5c <pow+0xa0>
 b56:	0e f0       	brts	.+2      	; 0xb5a <pow+0x9e>
 b58:	fd ce       	rjmp	.-518    	; 0x954 <__fp_inf>
 b5a:	46 cf       	rjmp	.-372    	; 0x9e8 <__fp_zero>
 b5c:	01 cf       	rjmp	.-510    	; 0x960 <__fp_nan>

00000b5e <exp>:
 b5e:	2a df       	rcall	.-428    	; 0x9b4 <__fp_splitA>
 b60:	c8 f3       	brcs	.-14     	; 0xb54 <pow+0x98>
 b62:	96 38       	cpi	r25, 0x86	; 134
 b64:	c0 f7       	brcc	.-16     	; 0xb56 <pow+0x9a>
 b66:	07 f8       	bld	r0, 7
 b68:	0f 92       	push	r0
 b6a:	e8 94       	clt
 b6c:	2b e3       	ldi	r18, 0x3B	; 59
 b6e:	3a ea       	ldi	r19, 0xAA	; 170
 b70:	48 eb       	ldi	r20, 0xB8	; 184
 b72:	5f e7       	ldi	r21, 0x7F	; 127
 b74:	4e df       	rcall	.-356    	; 0xa12 <__mulsf3_pse>
 b76:	0f 92       	push	r0
 b78:	0f 92       	push	r0
 b7a:	0f 92       	push	r0
 b7c:	4d b7       	in	r20, 0x3d	; 61
 b7e:	5e b7       	in	r21, 0x3e	; 62
 b80:	0f 92       	push	r0
 b82:	c0 d0       	rcall	.+384    	; 0xd04 <modf>
 b84:	e4 ee       	ldi	r30, 0xE4	; 228
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	16 d0       	rcall	.+44     	; 0xbb6 <__fp_powser>
 b8a:	4f 91       	pop	r20
 b8c:	5f 91       	pop	r21
 b8e:	ef 91       	pop	r30
 b90:	ff 91       	pop	r31
 b92:	e5 95       	asr	r30
 b94:	ee 1f       	adc	r30, r30
 b96:	ff 1f       	adc	r31, r31
 b98:	49 f0       	breq	.+18     	; 0xbac <exp+0x4e>
 b9a:	fe 57       	subi	r31, 0x7E	; 126
 b9c:	e0 68       	ori	r30, 0x80	; 128
 b9e:	44 27       	eor	r20, r20
 ba0:	ee 0f       	add	r30, r30
 ba2:	44 1f       	adc	r20, r20
 ba4:	fa 95       	dec	r31
 ba6:	e1 f7       	brne	.-8      	; 0xba0 <exp+0x42>
 ba8:	41 95       	neg	r20
 baa:	55 0b       	sbc	r21, r21
 bac:	32 d0       	rcall	.+100    	; 0xc12 <ldexp>
 bae:	0f 90       	pop	r0
 bb0:	07 fe       	sbrs	r0, 7
 bb2:	26 c0       	rjmp	.+76     	; 0xc00 <inverse>
 bb4:	08 95       	ret

00000bb6 <__fp_powser>:
 bb6:	df 93       	push	r29
 bb8:	cf 93       	push	r28
 bba:	1f 93       	push	r17
 bbc:	0f 93       	push	r16
 bbe:	ff 92       	push	r15
 bc0:	ef 92       	push	r14
 bc2:	df 92       	push	r13
 bc4:	7b 01       	movw	r14, r22
 bc6:	8c 01       	movw	r16, r24
 bc8:	68 94       	set
 bca:	05 c0       	rjmp	.+10     	; 0xbd6 <__fp_powser+0x20>
 bcc:	da 2e       	mov	r13, r26
 bce:	ef 01       	movw	r28, r30
 bd0:	1e df       	rcall	.-452    	; 0xa0e <__mulsf3x>
 bd2:	fe 01       	movw	r30, r28
 bd4:	e8 94       	clt
 bd6:	a5 91       	lpm	r26, Z+
 bd8:	25 91       	lpm	r18, Z+
 bda:	35 91       	lpm	r19, Z+
 bdc:	45 91       	lpm	r20, Z+
 bde:	55 91       	lpm	r21, Z+
 be0:	ae f3       	brts	.-22     	; 0xbcc <__fp_powser+0x16>
 be2:	ef 01       	movw	r28, r30
 be4:	8e dd       	rcall	.-1252   	; 0x702 <__addsf3x>
 be6:	fe 01       	movw	r30, r28
 be8:	97 01       	movw	r18, r14
 bea:	a8 01       	movw	r20, r16
 bec:	da 94       	dec	r13
 bee:	79 f7       	brne	.-34     	; 0xbce <__fp_powser+0x18>
 bf0:	df 90       	pop	r13
 bf2:	ef 90       	pop	r14
 bf4:	ff 90       	pop	r15
 bf6:	0f 91       	pop	r16
 bf8:	1f 91       	pop	r17
 bfa:	cf 91       	pop	r28
 bfc:	df 91       	pop	r29
 bfe:	08 95       	ret

00000c00 <inverse>:
 c00:	9b 01       	movw	r18, r22
 c02:	ac 01       	movw	r20, r24
 c04:	60 e0       	ldi	r22, 0x00	; 0
 c06:	70 e0       	ldi	r23, 0x00	; 0
 c08:	80 e8       	ldi	r24, 0x80	; 128
 c0a:	9f e3       	ldi	r25, 0x3F	; 63
 c0c:	cd cd       	rjmp	.-1126   	; 0x7a8 <__divsf3>
 c0e:	a2 ce       	rjmp	.-700    	; 0x954 <__fp_inf>
 c10:	ac c0       	rjmp	.+344    	; 0xd6a <__fp_mpack>

00000c12 <ldexp>:
 c12:	d0 de       	rcall	.-608    	; 0x9b4 <__fp_splitA>
 c14:	e8 f3       	brcs	.-6      	; 0xc10 <inverse+0x10>
 c16:	99 23       	and	r25, r25
 c18:	d9 f3       	breq	.-10     	; 0xc10 <inverse+0x10>
 c1a:	94 0f       	add	r25, r20
 c1c:	51 1d       	adc	r21, r1
 c1e:	bb f3       	brvs	.-18     	; 0xc0e <inverse+0xe>
 c20:	91 50       	subi	r25, 0x01	; 1
 c22:	50 40       	sbci	r21, 0x00	; 0
 c24:	94 f0       	brlt	.+36     	; 0xc4a <ldexp+0x38>
 c26:	59 f0       	breq	.+22     	; 0xc3e <ldexp+0x2c>
 c28:	88 23       	and	r24, r24
 c2a:	32 f0       	brmi	.+12     	; 0xc38 <ldexp+0x26>
 c2c:	66 0f       	add	r22, r22
 c2e:	77 1f       	adc	r23, r23
 c30:	88 1f       	adc	r24, r24
 c32:	91 50       	subi	r25, 0x01	; 1
 c34:	50 40       	sbci	r21, 0x00	; 0
 c36:	c1 f7       	brne	.-16     	; 0xc28 <ldexp+0x16>
 c38:	9e 3f       	cpi	r25, 0xFE	; 254
 c3a:	51 05       	cpc	r21, r1
 c3c:	44 f7       	brge	.-48     	; 0xc0e <inverse+0xe>
 c3e:	88 0f       	add	r24, r24
 c40:	91 1d       	adc	r25, r1
 c42:	96 95       	lsr	r25
 c44:	87 95       	ror	r24
 c46:	97 f9       	bld	r25, 7
 c48:	08 95       	ret
 c4a:	5f 3f       	cpi	r21, 0xFF	; 255
 c4c:	ac f0       	brlt	.+42     	; 0xc78 <ldexp+0x66>
 c4e:	98 3e       	cpi	r25, 0xE8	; 232
 c50:	9c f0       	brlt	.+38     	; 0xc78 <ldexp+0x66>
 c52:	bb 27       	eor	r27, r27
 c54:	86 95       	lsr	r24
 c56:	77 95       	ror	r23
 c58:	67 95       	ror	r22
 c5a:	b7 95       	ror	r27
 c5c:	08 f4       	brcc	.+2      	; 0xc60 <ldexp+0x4e>
 c5e:	b1 60       	ori	r27, 0x01	; 1
 c60:	93 95       	inc	r25
 c62:	c1 f7       	brne	.-16     	; 0xc54 <ldexp+0x42>
 c64:	bb 0f       	add	r27, r27
 c66:	58 f7       	brcc	.-42     	; 0xc3e <ldexp+0x2c>
 c68:	11 f4       	brne	.+4      	; 0xc6e <ldexp+0x5c>
 c6a:	60 ff       	sbrs	r22, 0
 c6c:	e8 cf       	rjmp	.-48     	; 0xc3e <ldexp+0x2c>
 c6e:	6f 5f       	subi	r22, 0xFF	; 255
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	e3 cf       	rjmp	.-58     	; 0xc3e <ldexp+0x2c>
 c78:	b8 ce       	rjmp	.-656    	; 0x9ea <__fp_szero>
 c7a:	0e f0       	brts	.+2      	; 0xc7e <ldexp+0x6c>
 c7c:	76 c0       	rjmp	.+236    	; 0xd6a <__fp_mpack>
 c7e:	70 ce       	rjmp	.-800    	; 0x960 <__fp_nan>
 c80:	68 94       	set
 c82:	68 ce       	rjmp	.-816    	; 0x954 <__fp_inf>

00000c84 <log>:
 c84:	97 de       	rcall	.-722    	; 0x9b4 <__fp_splitA>
 c86:	c8 f3       	brcs	.-14     	; 0xc7a <ldexp+0x68>
 c88:	99 23       	and	r25, r25
 c8a:	d1 f3       	breq	.-12     	; 0xc80 <ldexp+0x6e>
 c8c:	c6 f3       	brts	.-16     	; 0xc7e <ldexp+0x6c>
 c8e:	df 93       	push	r29
 c90:	cf 93       	push	r28
 c92:	1f 93       	push	r17
 c94:	0f 93       	push	r16
 c96:	ff 92       	push	r15
 c98:	c9 2f       	mov	r28, r25
 c9a:	dd 27       	eor	r29, r29
 c9c:	88 23       	and	r24, r24
 c9e:	2a f0       	brmi	.+10     	; 0xcaa <log+0x26>
 ca0:	21 97       	sbiw	r28, 0x01	; 1
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	da f7       	brpl	.-10     	; 0xca0 <log+0x1c>
 caa:	20 e0       	ldi	r18, 0x00	; 0
 cac:	30 e0       	ldi	r19, 0x00	; 0
 cae:	40 e8       	ldi	r20, 0x80	; 128
 cb0:	5f eb       	ldi	r21, 0xBF	; 191
 cb2:	9f e3       	ldi	r25, 0x3F	; 63
 cb4:	88 39       	cpi	r24, 0x98	; 152
 cb6:	20 f0       	brcs	.+8      	; 0xcc0 <log+0x3c>
 cb8:	80 3e       	cpi	r24, 0xE0	; 224
 cba:	30 f0       	brcs	.+12     	; 0xcc8 <log+0x44>
 cbc:	21 96       	adiw	r28, 0x01	; 1
 cbe:	8f 77       	andi	r24, 0x7F	; 127
 cc0:	0f dd       	rcall	.-1506   	; 0x6e0 <__addsf3>
 cc2:	ec e0       	ldi	r30, 0x0C	; 12
 cc4:	f1 e0       	ldi	r31, 0x01	; 1
 cc6:	03 c0       	rjmp	.+6      	; 0xcce <log+0x4a>
 cc8:	0b dd       	rcall	.-1514   	; 0x6e0 <__addsf3>
 cca:	e9 e3       	ldi	r30, 0x39	; 57
 ccc:	f1 e0       	ldi	r31, 0x01	; 1
 cce:	73 df       	rcall	.-282    	; 0xbb6 <__fp_powser>
 cd0:	8b 01       	movw	r16, r22
 cd2:	be 01       	movw	r22, r28
 cd4:	ec 01       	movw	r28, r24
 cd6:	fb 2e       	mov	r15, r27
 cd8:	6f 57       	subi	r22, 0x7F	; 127
 cda:	71 09       	sbc	r23, r1
 cdc:	75 95       	asr	r23
 cde:	77 1f       	adc	r23, r23
 ce0:	88 0b       	sbc	r24, r24
 ce2:	99 0b       	sbc	r25, r25
 ce4:	fc dd       	rcall	.-1032   	; 0x8de <__floatsisf>
 ce6:	28 e1       	ldi	r18, 0x18	; 24
 ce8:	32 e7       	ldi	r19, 0x72	; 114
 cea:	41 e3       	ldi	r20, 0x31	; 49
 cec:	5f e3       	ldi	r21, 0x3F	; 63
 cee:	8f de       	rcall	.-738    	; 0xa0e <__mulsf3x>
 cf0:	af 2d       	mov	r26, r15
 cf2:	98 01       	movw	r18, r16
 cf4:	ae 01       	movw	r20, r28
 cf6:	ff 90       	pop	r15
 cf8:	0f 91       	pop	r16
 cfa:	1f 91       	pop	r17
 cfc:	cf 91       	pop	r28
 cfe:	df 91       	pop	r29
 d00:	00 dd       	rcall	.-1536   	; 0x702 <__addsf3x>
 d02:	3f ce       	rjmp	.-898    	; 0x982 <__fp_round>

00000d04 <modf>:
 d04:	fa 01       	movw	r30, r20
 d06:	dc 01       	movw	r26, r24
 d08:	aa 0f       	add	r26, r26
 d0a:	bb 1f       	adc	r27, r27
 d0c:	9b 01       	movw	r18, r22
 d0e:	ac 01       	movw	r20, r24
 d10:	bf 57       	subi	r27, 0x7F	; 127
 d12:	28 f4       	brcc	.+10     	; 0xd1e <modf+0x1a>
 d14:	22 27       	eor	r18, r18
 d16:	33 27       	eor	r19, r19
 d18:	44 27       	eor	r20, r20
 d1a:	50 78       	andi	r21, 0x80	; 128
 d1c:	1f c0       	rjmp	.+62     	; 0xd5c <modf+0x58>
 d1e:	b7 51       	subi	r27, 0x17	; 23
 d20:	88 f4       	brcc	.+34     	; 0xd44 <modf+0x40>
 d22:	ab 2f       	mov	r26, r27
 d24:	00 24       	eor	r0, r0
 d26:	46 95       	lsr	r20
 d28:	37 95       	ror	r19
 d2a:	27 95       	ror	r18
 d2c:	01 1c       	adc	r0, r1
 d2e:	a3 95       	inc	r26
 d30:	d2 f3       	brmi	.-12     	; 0xd26 <modf+0x22>
 d32:	00 20       	and	r0, r0
 d34:	69 f0       	breq	.+26     	; 0xd50 <modf+0x4c>
 d36:	22 0f       	add	r18, r18
 d38:	33 1f       	adc	r19, r19
 d3a:	44 1f       	adc	r20, r20
 d3c:	b3 95       	inc	r27
 d3e:	da f3       	brmi	.-10     	; 0xd36 <modf+0x32>
 d40:	0d d0       	rcall	.+26     	; 0xd5c <modf+0x58>
 d42:	cd cc       	rjmp	.-1638   	; 0x6de <__subsf3>
 d44:	61 30       	cpi	r22, 0x01	; 1
 d46:	71 05       	cpc	r23, r1
 d48:	a0 e8       	ldi	r26, 0x80	; 128
 d4a:	8a 07       	cpc	r24, r26
 d4c:	b9 46       	sbci	r27, 0x69	; 105
 d4e:	30 f4       	brcc	.+12     	; 0xd5c <modf+0x58>
 d50:	9b 01       	movw	r18, r22
 d52:	ac 01       	movw	r20, r24
 d54:	66 27       	eor	r22, r22
 d56:	77 27       	eor	r23, r23
 d58:	88 27       	eor	r24, r24
 d5a:	90 78       	andi	r25, 0x80	; 128
 d5c:	30 96       	adiw	r30, 0x00	; 0
 d5e:	21 f0       	breq	.+8      	; 0xd68 <modf+0x64>
 d60:	20 83       	st	Z, r18
 d62:	31 83       	std	Z+1, r19	; 0x01
 d64:	42 83       	std	Z+2, r20	; 0x02
 d66:	53 83       	std	Z+3, r21	; 0x03
 d68:	08 95       	ret

00000d6a <__fp_mpack>:
 d6a:	9f 3f       	cpi	r25, 0xFF	; 255
 d6c:	31 f0       	breq	.+12     	; 0xd7a <__fp_mpack_finite+0xc>

00000d6e <__fp_mpack_finite>:
 d6e:	91 50       	subi	r25, 0x01	; 1
 d70:	20 f4       	brcc	.+8      	; 0xd7a <__fp_mpack_finite+0xc>
 d72:	87 95       	ror	r24
 d74:	77 95       	ror	r23
 d76:	67 95       	ror	r22
 d78:	b7 95       	ror	r27
 d7a:	88 0f       	add	r24, r24
 d7c:	91 1d       	adc	r25, r1
 d7e:	96 95       	lsr	r25
 d80:	87 95       	ror	r24
 d82:	97 f9       	bld	r25, 7
 d84:	08 95       	ret

00000d86 <__divmodhi4>:
 d86:	97 fb       	bst	r25, 7
 d88:	07 2e       	mov	r0, r23
 d8a:	16 f4       	brtc	.+4      	; 0xd90 <__divmodhi4+0xa>
 d8c:	00 94       	com	r0
 d8e:	06 d0       	rcall	.+12     	; 0xd9c <__divmodhi4_neg1>
 d90:	77 fd       	sbrc	r23, 7
 d92:	08 d0       	rcall	.+16     	; 0xda4 <__divmodhi4_neg2>
 d94:	1a d0       	rcall	.+52     	; 0xdca <__udivmodhi4>
 d96:	07 fc       	sbrc	r0, 7
 d98:	05 d0       	rcall	.+10     	; 0xda4 <__divmodhi4_neg2>
 d9a:	3e f4       	brtc	.+14     	; 0xdaa <__divmodhi4_exit>

00000d9c <__divmodhi4_neg1>:
 d9c:	90 95       	com	r25
 d9e:	81 95       	neg	r24
 da0:	9f 4f       	sbci	r25, 0xFF	; 255
 da2:	08 95       	ret

00000da4 <__divmodhi4_neg2>:
 da4:	70 95       	com	r23
 da6:	61 95       	neg	r22
 da8:	7f 4f       	sbci	r23, 0xFF	; 255

00000daa <__divmodhi4_exit>:
 daa:	08 95       	ret

00000dac <__umulhisi3>:
 dac:	a2 9f       	mul	r26, r18
 dae:	b0 01       	movw	r22, r0
 db0:	b3 9f       	mul	r27, r19
 db2:	c0 01       	movw	r24, r0
 db4:	a3 9f       	mul	r26, r19
 db6:	70 0d       	add	r23, r0
 db8:	81 1d       	adc	r24, r1
 dba:	11 24       	eor	r1, r1
 dbc:	91 1d       	adc	r25, r1
 dbe:	b2 9f       	mul	r27, r18
 dc0:	70 0d       	add	r23, r0
 dc2:	81 1d       	adc	r24, r1
 dc4:	11 24       	eor	r1, r1
 dc6:	91 1d       	adc	r25, r1
 dc8:	08 95       	ret

00000dca <__udivmodhi4>:
 dca:	aa 1b       	sub	r26, r26
 dcc:	bb 1b       	sub	r27, r27
 dce:	51 e1       	ldi	r21, 0x11	; 17
 dd0:	07 c0       	rjmp	.+14     	; 0xde0 <__udivmodhi4_ep>

00000dd2 <__udivmodhi4_loop>:
 dd2:	aa 1f       	adc	r26, r26
 dd4:	bb 1f       	adc	r27, r27
 dd6:	a6 17       	cp	r26, r22
 dd8:	b7 07       	cpc	r27, r23
 dda:	10 f0       	brcs	.+4      	; 0xde0 <__udivmodhi4_ep>
 ddc:	a6 1b       	sub	r26, r22
 dde:	b7 0b       	sbc	r27, r23

00000de0 <__udivmodhi4_ep>:
 de0:	88 1f       	adc	r24, r24
 de2:	99 1f       	adc	r25, r25
 de4:	5a 95       	dec	r21
 de6:	a9 f7       	brne	.-22     	; 0xdd2 <__udivmodhi4_loop>
 de8:	80 95       	com	r24
 dea:	90 95       	com	r25
 dec:	bc 01       	movw	r22, r24
 dee:	cd 01       	movw	r24, r26
 df0:	08 95       	ret

00000df2 <_exit>:
 df2:	f8 94       	cli

00000df4 <__stop_program>:
 df4:	ff cf       	rjmp	.-2      	; 0xdf4 <__stop_program>
