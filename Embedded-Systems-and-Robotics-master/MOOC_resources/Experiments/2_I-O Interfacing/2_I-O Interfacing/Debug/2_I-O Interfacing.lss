
2_I-O Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d36  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd2  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d4  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	12 d0       	rcall	.+36     	; 0x11a <main>
  f6:	1f c0       	rjmp	.+62     	; 0x136 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <buzzer_pin_config>:
/**
 * @brief      Function to set LED pins to low, hence turn off all LEDs
 */
void bargraph_led_off(void){
	// Turn off all LEDs
	bar_graph_led_port_reg = 0x00;
  fa:	3b 9a       	sbi	0x07, 3	; 7
  fc:	43 98       	cbi	0x08, 3	; 8
  fe:	08 95       	ret

00000100 <interrupt_switch_config>:
 100:	6f 98       	cbi	0x0d, 7	; 13
 102:	77 9a       	sbi	0x0e, 7	; 14
 104:	08 95       	ret

00000106 <LED_bargraph_config>:
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
 10c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
 110:	08 95       	ret

00000112 <buzzer_on>:
 112:	43 9a       	sbi	0x08, 3	; 8
 114:	08 95       	ret

00000116 <buzzer_off>:
 116:	43 98       	cbi	0x08, 3	; 8
 118:	08 95       	ret

0000011a <main>:
 * 			   the devices. 
 */
int main(void) {
	
	// Initialize the necessary devices (Buzzer, Interrupt Switch and Bar Graph LED) required for the experiment.
	buzzer_pin_config();
 11a:	ef df       	rcall	.-34     	; 0xfa <buzzer_pin_config>
	interrupt_switch_config();
 11c:	f1 df       	rcall	.-30     	; 0x100 <interrupt_switch_config>
	LED_bargraph_config();
 11e:	f3 df       	rcall	.-26     	; 0x106 <LED_bargraph_config>
 120:	c5 e0       	ldi	r28, 0x05	; 5
/**
 * @brief      Function to set LED pins to high, hence turn on all LEDs
 */
void bargraph_led_on(void){
	// Turn on all LEDs
	bar_graph_led_port_reg = 0xFF;
 122:	d1 e0       	ldi	r29, 0x01	; 1
 124:	1f ef       	ldi	r17, 0xFF	; 255
 126:	67 9b       	sbis	0x0c, 7	; 12
	LED_bargraph_config();
	
	while (1) {
		
		// If the Interrupt Switch is NOT pressed
		if ((interrupt_sw_pin_reg & (1 << interrupt_sw_pin)) == (1 << interrupt_sw_pin) ) { 
 128:	03 c0       	rjmp	.+6      	; 0x130 <main+0x16>
/**
 * @brief      Function to set LED pins to low, hence turn off all LEDs
 */
void bargraph_led_off(void){
	// Turn off all LEDs
	bar_graph_led_port_reg = 0x00;
 12a:	18 82       	st	Y, r1
	while (1) {
		
		// If the Interrupt Switch is NOT pressed
		if ((interrupt_sw_pin_reg & (1 << interrupt_sw_pin)) == (1 << interrupt_sw_pin) ) { 
			bargraph_led_off(); 			//Turn off bargraph LEDs
			buzzer_off(); 					//Turn off buzzer
 12c:	f4 df       	rcall	.-24     	; 0x116 <buzzer_off>
 12e:	fb cf       	rjmp	.-10     	; 0x126 <main+0xc>
/**
 * @brief      Function to set LED pins to high, hence turn on all LEDs
 */
void bargraph_led_on(void){
	// Turn on all LEDs
	bar_graph_led_port_reg = 0xFF;
 130:	18 83       	st	Y, r17
		if ((interrupt_sw_pin_reg & (1 << interrupt_sw_pin)) == (1 << interrupt_sw_pin) ) { 
			bargraph_led_off(); 			//Turn off bargraph LEDs
			buzzer_off(); 					//Turn off buzzer
		} else {
			bargraph_led_on(); 				//Turn on bargraph LEDs
			buzzer_on(); 					//Turn on buzzer
 132:	ef df       	rcall	.-34     	; 0x112 <buzzer_on>
 134:	f8 cf       	rjmp	.-16     	; 0x126 <main+0xc>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
