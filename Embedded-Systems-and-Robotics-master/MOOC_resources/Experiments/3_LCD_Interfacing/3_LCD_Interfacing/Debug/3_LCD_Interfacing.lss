
3_LCD_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  0000030c  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014d8  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d27  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070c  00000000  00000000  0000268f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00002d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000665  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000084b  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e0       	ldi	r30, 0x0C	; 12
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e1       	ldi	r26, 0x16	; 22
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 31       	cpi	r26, 0x16	; 22
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	f3 c0       	rjmp	.+486    	; 0x308 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
 *
 * @details    First Initializes LCD and displays message on LCD
 */
int main(void) {
	
	lcd_port_config();					// Initialize the LCD port
 124:	0c d0       	rcall	.+24     	; 0x13e <lcd_port_config>
	lcd_init();							// Initialize the LCD
 126:	80 d0       	rcall	.+256    	; 0x228 <lcd_init>
 128:	40 e0       	ldi	r20, 0x00	; 0
	
	while(1)
	{
		// Display text on LCD at specific location
		lcd_string(1, 5, "e-Yantra");
 12a:	52 e0       	ldi	r21, 0x02	; 2
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	d0 d0       	rcall	.+416    	; 0x2d2 <lcd_string>
 132:	49 e0       	ldi	r20, 0x09	; 9
		lcd_string(2, 4, "IIT  BOMBAY");
 134:	52 e0       	ldi	r21, 0x02	; 2
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	cb d0       	rcall	.+406    	; 0x2d2 <lcd_string>
 13c:	f5 cf       	rjmp	.-22     	; 0x128 <main+0x4>

0000013e <lcd_port_config>:
 13e:	87 b1       	in	r24, 0x07	; 7
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 140:	87 60       	ori	r24, 0x07	; 7
 142:	87 b9       	out	0x07, r24	; 7
 144:	87 b1       	in	r24, 0x07	; 7
 146:	80 6f       	ori	r24, 0xF0	; 240
 148:	87 b9       	out	0x07, r24	; 7
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	88 b9       	out	0x08, r24	; 8
 150:	88 b1       	in	r24, 0x08	; 8
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	88 b9       	out	0x08, r24	; 8
 156:	08 95       	ret

00000158 <lcd_set_4bit>:
 158:	86 e6       	ldi	r24, 0x66	; 102
 15a:	9e e0       	ldi	r25, 0x0E	; 14
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_set_4bit+0x4>
 160:	00 00       	nop
 162:	40 98       	cbi	0x08, 0	; 8
 164:	41 98       	cbi	0x08, 1	; 8
 166:	80 e3       	ldi	r24, 0x30	; 48
 168:	88 b9       	out	0x08, r24	; 8
 16a:	42 9a       	sbi	0x08, 2	; 8
 16c:	ef ef       	ldi	r30, 0xFF	; 255
 16e:	f7 e4       	ldi	r31, 0x47	; 71
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x18>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_set_4bit+0x1e>
 176:	00 00       	nop
 178:	42 98       	cbi	0x08, 2	; 8
 17a:	e6 e6       	ldi	r30, 0x66	; 102
 17c:	fe e0       	ldi	r31, 0x0E	; 14
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_set_4bit+0x26>
 182:	00 00       	nop
 184:	40 98       	cbi	0x08, 0	; 8
 186:	41 98       	cbi	0x08, 1	; 8
 188:	88 b9       	out	0x08, r24	; 8
 18a:	42 9a       	sbi	0x08, 2	; 8
 18c:	ef ef       	ldi	r30, 0xFF	; 255
 18e:	f7 e4       	ldi	r31, 0x47	; 71
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x38>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_set_4bit+0x3e>
 196:	00 00       	nop
 198:	42 98       	cbi	0x08, 2	; 8
 19a:	e6 e6       	ldi	r30, 0x66	; 102
 19c:	fe e0       	ldi	r31, 0x0E	; 14
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_set_4bit+0x46>
 1a2:	00 00       	nop
 1a4:	40 98       	cbi	0x08, 0	; 8
 1a6:	41 98       	cbi	0x08, 1	; 8
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	42 9a       	sbi	0x08, 2	; 8
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	97 e4       	ldi	r25, 0x47	; 71
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x58>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_set_4bit+0x5e>
 1b6:	00 00       	nop
 1b8:	42 98       	cbi	0x08, 2	; 8
 1ba:	e6 e6       	ldi	r30, 0x66	; 102
 1bc:	fe e0       	ldi	r31, 0x0E	; 14
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_set_4bit+0x66>
 1c2:	00 00       	nop
 1c4:	40 98       	cbi	0x08, 0	; 8
 1c6:	41 98       	cbi	0x08, 1	; 8
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	88 b9       	out	0x08, r24	; 8
 1cc:	42 9a       	sbi	0x08, 2	; 8
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	97 e4       	ldi	r25, 0x47	; 71
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x7a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_set_4bit+0x80>
 1d8:	00 00       	nop
 1da:	42 98       	cbi	0x08, 2	; 8
 1dc:	08 95       	ret

000001de <lcd_wr_command>:
 1de:	98 b1       	in	r25, 0x08	; 8
 1e0:	9f 70       	andi	r25, 0x0F	; 15
 1e2:	98 b9       	out	0x08, r25	; 8
 1e4:	98 b1       	in	r25, 0x08	; 8
 1e6:	28 2f       	mov	r18, r24
 1e8:	20 7f       	andi	r18, 0xF0	; 240
 1ea:	92 2b       	or	r25, r18
 1ec:	98 b9       	out	0x08, r25	; 8
 1ee:	40 98       	cbi	0x08, 0	; 8
 1f0:	41 98       	cbi	0x08, 1	; 8
 1f2:	42 9a       	sbi	0x08, 2	; 8
 1f4:	ef ef       	ldi	r30, 0xFF	; 255
 1f6:	f7 e4       	ldi	r31, 0x47	; 71
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_wr_command+0x1a>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_wr_command+0x20>
 1fe:	00 00       	nop
 200:	42 98       	cbi	0x08, 2	; 8
 202:	98 b1       	in	r25, 0x08	; 8
 204:	9f 70       	andi	r25, 0x0F	; 15
 206:	98 b9       	out	0x08, r25	; 8
 208:	98 b1       	in	r25, 0x08	; 8
 20a:	82 95       	swap	r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	89 2b       	or	r24, r25
 210:	88 b9       	out	0x08, r24	; 8
 212:	40 98       	cbi	0x08, 0	; 8
 214:	41 98       	cbi	0x08, 1	; 8
 216:	42 9a       	sbi	0x08, 2	; 8
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	97 e4       	ldi	r25, 0x47	; 71
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_wr_command+0x3e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_wr_command+0x44>
 222:	00 00       	nop
 224:	42 98       	cbi	0x08, 2	; 8
 226:	08 95       	ret

00000228 <lcd_init>:
 228:	97 df       	rcall	.-210    	; 0x158 <lcd_set_4bit>
 22a:	86 e6       	ldi	r24, 0x66	; 102
 22c:	9e e0       	ldi	r25, 0x0E	; 14
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_init+0x6>
 232:	00 00       	nop
 234:	88 e2       	ldi	r24, 0x28	; 40
 236:	d3 df       	rcall	.-90     	; 0x1de <lcd_wr_command>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	d1 df       	rcall	.-94     	; 0x1de <lcd_wr_command>
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	cf df       	rcall	.-98     	; 0x1de <lcd_wr_command>
 240:	8e e0       	ldi	r24, 0x0E	; 14
 242:	cd df       	rcall	.-102    	; 0x1de <lcd_wr_command>
 244:	80 e8       	ldi	r24, 0x80	; 128
 246:	cb cf       	rjmp	.-106    	; 0x1de <lcd_wr_command>
 248:	08 95       	ret

0000024a <lcd_cursor>:
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	69 f0       	breq	.+26     	; 0x268 <lcd_cursor+0x1e>
 24e:	18 f4       	brcc	.+6      	; 0x256 <lcd_cursor+0xc>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	31 f0       	breq	.+12     	; 0x260 <lcd_cursor+0x16>
 254:	08 95       	ret
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	59 f0       	breq	.+22     	; 0x270 <lcd_cursor+0x26>
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	69 f0       	breq	.+26     	; 0x278 <lcd_cursor+0x2e>
 25e:	08 95       	ret
 260:	8f e7       	ldi	r24, 0x7F	; 127
 262:	86 0f       	add	r24, r22
 264:	bc cf       	rjmp	.-136    	; 0x1de <lcd_wr_command>
 266:	08 95       	ret
 268:	8f eb       	ldi	r24, 0xBF	; 191
 26a:	86 0f       	add	r24, r22
 26c:	b8 cf       	rjmp	.-144    	; 0x1de <lcd_wr_command>
 26e:	08 95       	ret
 270:	83 e9       	ldi	r24, 0x93	; 147
 272:	86 0f       	add	r24, r22
 274:	b4 cf       	rjmp	.-152    	; 0x1de <lcd_wr_command>
 276:	08 95       	ret
 278:	83 ed       	ldi	r24, 0xD3	; 211
 27a:	86 0f       	add	r24, r22
 27c:	b0 cf       	rjmp	.-160    	; 0x1de <lcd_wr_command>
 27e:	08 95       	ret

00000280 <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 280:	cf 93       	push	r28
 282:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 284:	e2 df       	rcall	.-60     	; 0x24a <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 286:	88 b1       	in	r24, 0x08	; 8
 288:	8f 70       	andi	r24, 0x0F	; 15
 28a:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= temp;
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	9c 2f       	mov	r25, r28
 290:	90 7f       	andi	r25, 0xF0	; 240
 292:	89 2b       	or	r24, r25
 294:	88 b9       	out	0x08, r24	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 296:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 298:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 29a:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	97 e4       	ldi	r25, 0x47	; 71
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_wr_char+0x20>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_wr_char+0x26>
 2a6:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2a8:	42 98       	cbi	0x08, 2	; 8
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	8f 70       	andi	r24, 0x0F	; 15
 2ae:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= alpha_num_char;
 2b0:	88 b1       	in	r24, 0x08	; 8
 2b2:	c2 95       	swap	r28
 2b4:	c0 7f       	andi	r28, 0xF0	; 240
 2b6:	c8 2b       	or	r28, r24
 2b8:	c8 b9       	out	0x08, r28	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 2ba:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2bc:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2be:	42 9a       	sbi	0x08, 2	; 8
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	97 e4       	ldi	r25, 0x47	; 71
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_wr_char+0x44>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_wr_char+0x4a>
 2ca:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2cc:	42 98       	cbi	0x08, 2	; 8
}
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	d8 2f       	mov	r29, r24
 2dc:	c6 2f       	mov	r28, r22
 2de:	fa 01       	movw	r30, r20
	while(*str != '\0')
 2e0:	40 81       	ld	r20, Z
 2e2:	44 23       	and	r20, r20
 2e4:	61 f0       	breq	.+24     	; 0x2fe <lcd_string+0x2c>
 2e6:	8f 01       	movw	r16, r30
 2e8:	0f 5f       	subi	r16, 0xFF	; 255
 2ea:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 2ec:	6c 2f       	mov	r22, r28
 2ee:	8d 2f       	mov	r24, r29
 2f0:	c7 df       	rcall	.-114    	; 0x280 <lcd_wr_char>
		str++;
		column+=1;
 2f2:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 2f4:	f8 01       	movw	r30, r16
 2f6:	41 91       	ld	r20, Z+
 2f8:	8f 01       	movw	r16, r30
 2fa:	41 11       	cpse	r20, r1
 2fc:	f7 cf       	rjmp	.-18     	; 0x2ec <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
