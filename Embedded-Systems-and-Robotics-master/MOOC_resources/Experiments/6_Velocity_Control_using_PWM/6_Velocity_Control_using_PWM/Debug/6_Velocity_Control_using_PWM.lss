
6_Velocity_Control_using_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000100e  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c69  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000539  00000000  00000000  00001ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000252c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000626  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000290  00000000  00000000  00002bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	4e d0       	rcall	.+156    	; 0x192 <main>
  f6:	b5 c0       	rjmp	.+362    	; 0x262 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <motors_pin_config>:
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
	OCR5BL_reg = right_motor;
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	8f 60       	ori	r24, 0x0F	; 15
  fe:	81 b9       	out	0x01, r24	; 1
 100:	82 b1       	in	r24, 0x02	; 2
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	82 b9       	out	0x02, r24	; 2
 106:	08 95       	ret

00000108 <pwm_pin_config>:
 108:	ea e0       	ldi	r30, 0x0A	; 10
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	80 81       	ld	r24, Z
 10e:	88 61       	ori	r24, 0x18	; 24
 110:	80 83       	st	Z, r24
 112:	eb e0       	ldi	r30, 0x0B	; 11
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	80 81       	ld	r24, Z
 118:	88 61       	ori	r24, 0x18	; 24
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <timer5_init>:
 11e:	e1 e2       	ldi	r30, 0x21	; 33
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	10 82       	st	Z, r1
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 130:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 134:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
 138:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 13c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 140:	a0 e2       	ldi	r26, 0x20	; 32
 142:	b1 e0       	ldi	r27, 0x01	; 1
 144:	8c 91       	ld	r24, X
 146:	80 6a       	ori	r24, 0xA0	; 160
 148:	8c 93       	st	X, r24
 14a:	8c 91       	ld	r24, X
 14c:	8f 7a       	andi	r24, 0xAF	; 175
 14e:	8c 93       	st	X, r24
 150:	8c 91       	ld	r24, X
 152:	81 60       	ori	r24, 0x01	; 1
 154:	8c 93       	st	X, r24
 156:	8c 91       	ld	r24, X
 158:	8d 7f       	andi	r24, 0xFD	; 253
 15a:	8c 93       	st	X, r24
 15c:	80 81       	ld	r24, Z
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	8f 7e       	andi	r24, 0xEF	; 239
 166:	80 83       	st	Z, r24
 168:	80 81       	ld	r24, Z
 16a:	83 60       	ori	r24, 0x03	; 3
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <forward>:
/**
 * @brief      Function to make Firebird-V move forward.
 */
void forward (void) //both wheels forward
{
  	motors_dir_port_reg &=  ~( (1 << motors_RB_pin) | (1 << motors_LB_pin) );	// Make LB and RB LOW
 176:	82 b1       	in	r24, 0x02	; 2
 178:	86 7f       	andi	r24, 0xF6	; 246
 17a:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_RF_pin) | (1 << motors_LF_pin) ;		// Make LF and RF HIGH
 17c:	82 b1       	in	r24, 0x02	; 2
 17e:	86 60       	ori	r24, 0x06	; 6
 180:	82 b9       	out	0x02, r24	; 2
 182:	08 95       	ret

00000184 <back>:
/**
 * @brief      Function to make Firebird-V move backward.
 */
void back (void) //both wheels backward
{
  	motors_dir_port_reg &=  ~( (1 << motors_RF_pin) | (1 << motors_LF_pin) );	// Make LF and RF LOW
 184:	82 b1       	in	r24, 0x02	; 2
 186:	89 7f       	andi	r24, 0xF9	; 249
 188:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= ((1 << motors_RB_pin) | (1 << motors_LB_pin)) ;		// Make LB and RB HIGH
 18a:	82 b1       	in	r24, 0x02	; 2
 18c:	89 60       	ori	r24, 0x09	; 9
 18e:	82 b9       	out	0x02, r24	; 2
 190:	08 95       	ret

00000192 <main>:
 *
 * @return     0
 */
int main() {
	
	motors_pin_config();
 192:	b3 df       	rcall	.-154    	; 0xfa <motors_pin_config>
	pwm_pin_config();
 194:	b9 df       	rcall	.-142    	; 0x108 <pwm_pin_config>
	timer5_init();
 196:	c3 df       	rcall	.-122    	; 0x11e <timer5_init>
 198:	08 e2       	ldi	r16, 0x28	; 40
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 19a:	11 e0       	ldi	r17, 0x01	; 1
 19c:	0f 2e       	mov	r0, r31
 19e:	f6 e9       	ldi	r31, 0x96	; 150
 1a0:	df 2e       	mov	r13, r31
 1a2:	f0 2d       	mov	r31, r0
 1a4:	ca e2       	ldi	r28, 0x2A	; 42
	OCR5BL_reg = right_motor;
 1a6:	d1 e0       	ldi	r29, 0x01	; 1
 1a8:	0f 2e       	mov	r0, r31
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 1aa:	f4 e6       	ldi	r31, 0x64	; 100
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f0 2d       	mov	r31, r0
	OCR5BL_reg = right_motor;
 1b0:	ff 24       	eor	r15, r15
 1b2:	fa 94       	dec	r15
	motors_pin_config();
	pwm_pin_config();
	timer5_init();
	
	while (1) {
		forward();
 1b4:	e0 df       	rcall	.-64     	; 0x176 <forward>
 1b6:	f8 01       	movw	r30, r16
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 1b8:	d0 82       	st	Z, r13
 1ba:	d8 82       	st	Y, r13
	OCR5BL_reg = right_motor;
 1bc:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	8c e2       	ldi	r24, 0x2C	; 44
 1c2:	f1 50       	subi	r31, 0x01	; 1
 1c4:	20 40       	sbci	r18, 0x00	; 0
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x30>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x3a>
 1cc:	00 00       	nop
 1ce:	f8 01       	movw	r30, r16
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 1d0:	e0 82       	st	Z, r14
 1d2:	f8 82       	st	Y, r15
	OCR5BL_reg = right_motor;
 1d4:	ff ef       	ldi	r31, 0xFF	; 255
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	8c e2       	ldi	r24, 0x2C	; 44
 1da:	f1 50       	subi	r31, 0x01	; 1
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0x48>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0x52>
 1e4:	00 00       	nop
 1e6:	f8 01       	movw	r30, r16
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 1e8:	f0 82       	st	Z, r15
 1ea:	e8 82       	st	Y, r14
	OCR5BL_reg = right_motor;
 1ec:	ff ef       	ldi	r31, 0xFF	; 255
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	8c e2       	ldi	r24, 0x2C	; 44
 1f2:	f1 50       	subi	r31, 0x01	; 1
 1f4:	20 40       	sbci	r18, 0x00	; 0
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x60>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x6a>
 1fc:	00 00       	nop
		_delay_ms(1000);
		
		velocity (255, 100);
		_delay_ms(1000);
		
		back(); 
 1fe:	c2 df       	rcall	.-124    	; 0x184 <back>
 200:	f8 01       	movw	r30, r16
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 202:	d0 82       	st	Z, r13
 204:	d8 82       	st	Y, r13
	OCR5BL_reg = right_motor;
 206:	ff ef       	ldi	r31, 0xFF	; 255
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	8c e2       	ldi	r24, 0x2C	; 44
 20c:	f1 50       	subi	r31, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x7a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x84>
 216:	00 00       	nop
 218:	f8 01       	movw	r30, r16
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 21a:	e0 82       	st	Z, r14
 21c:	f8 82       	st	Y, r15
	OCR5BL_reg = right_motor;
 21e:	ff ef       	ldi	r31, 0xFF	; 255
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	8c e2       	ldi	r24, 0x2C	; 44
 224:	f1 50       	subi	r31, 0x01	; 1
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x92>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x9c>
 22e:	00 00       	nop
 230:	f8 01       	movw	r30, r16
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 232:	f0 82       	st	Z, r15
 234:	e8 82       	st	Y, r14
	OCR5BL_reg = right_motor;
 236:	ff ef       	ldi	r31, 0xFF	; 255
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	8c e2       	ldi	r24, 0x2C	; 44
 23c:	f1 50       	subi	r31, 0x01	; 1
 23e:	20 40       	sbci	r18, 0x00	; 0
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0xaa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0xb4>
 246:	00 00       	nop
 248:	f8 01       	movw	r30, r16
 *
 * @param[in]  left_motor   Left motor speed 0 to 255
 * @param[in]  right_motor  Right motor speed 0 to 255
 */
void velocity (unsigned char left_motor, unsigned char right_motor) {
	OCR5AL_reg = left_motor;
 24a:	10 82       	st	Z, r1
 24c:	18 82       	st	Y, r1
	OCR5BL_reg = right_motor;
 24e:	ff ef       	ldi	r31, 0xFF	; 255
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	8c e2       	ldi	r24, 0x2C	; 44
 254:	f1 50       	subi	r31, 0x01	; 1
 256:	20 40       	sbci	r18, 0x00	; 0
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0xc2>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0xcc>
 25e:	00 00       	nop
 260:	a9 cf       	rjmp	.-174    	; 0x1b4 <main+0x22>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
