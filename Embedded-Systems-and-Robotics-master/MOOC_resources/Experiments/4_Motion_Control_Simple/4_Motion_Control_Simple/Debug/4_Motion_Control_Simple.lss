
4_Motion_Control_Simple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011b6  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c16  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005cf  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  000027a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000607  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000429  00000000  00000000  00002e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	48 d0       	rcall	.+144    	; 0x186 <main>
  f6:	ea c0       	rjmp	.+468    	; 0x2cc <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <motors_pin_config>:

/**
 * @brief      Function to configure motor pins
 */
void motors_pin_config(void) {
	motors_dir_ddr_reg |= (1 << motors_RB_pin) | (1 << motors_RF_pin) | (1 << motors_LF_pin) | (1 << motors_LB_pin) ;			// motor pin as output
  fa:	81 b1       	in	r24, 0x01	; 1
  fc:	8f 60       	ori	r24, 0x0F	; 15
  fe:	81 b9       	out	0x01, r24	; 1
	motors_dir_port_reg &=  ~( (1 << motors_RB_pin) | (1 << motors_RF_pin) | (1 << motors_LF_pin) | (1 << motors_LB_pin) );		// stop motor intially
 100:	82 b1       	in	r24, 0x02	; 2
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	82 b9       	out	0x02, r24	; 2
 106:	08 95       	ret

00000108 <pwm_pin_config>:

/**
 * @brief      Function to configure left and right channel pins of the L293D Motor Driver IC for PWM
 */
void pwm_pin_config(void){
	motors_pwm_ddr_reg |= (1 << motors_pwm_R_pin) | (1 << motors_pwm_L_pin);	// left and right channel pin as output
 108:	ea e0       	ldi	r30, 0x0A	; 10
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	80 81       	ld	r24, Z
 10e:	88 61       	ori	r24, 0x18	; 24
 110:	80 83       	st	Z, r24
	motors_pwm_port_reg |= (1 << motors_pwm_R_pin) | (1 << motors_pwm_L_pin);	// turn on left and right channel
 112:	eb e0       	ldi	r30, 0x0B	; 11
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	80 81       	ld	r24, Z
 118:	88 61       	ori	r24, 0x18	; 24
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <forward>:
/**
 * @brief      Function to make Firebird-V move forward.
 */
void forward (void) //both wheels forward
{
  	motors_dir_port_reg &=  ~( (1 << motors_RB_pin) | (1 << motors_LB_pin) );	// Make LB and RB LOW
 11e:	82 b1       	in	r24, 0x02	; 2
 120:	86 7f       	andi	r24, 0xF6	; 246
 122:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_RF_pin) | (1 << motors_LF_pin) ;		// Make LF and RF HIGH
 124:	82 b1       	in	r24, 0x02	; 2
 126:	86 60       	ori	r24, 0x06	; 6
 128:	82 b9       	out	0x02, r24	; 2
 12a:	08 95       	ret

0000012c <back>:
/**
 * @brief      Function to make Firebird-V move backward.
 */
void back (void) //both wheels backward
{
  	motors_dir_port_reg &=  ~( (1 << motors_RF_pin) | (1 << motors_LF_pin) );	// Make LF and RF LOW
 12c:	82 b1       	in	r24, 0x02	; 2
 12e:	89 7f       	andi	r24, 0xF9	; 249
 130:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= ((1 << motors_RB_pin) | (1 << motors_LB_pin)) ;		// Make LB and RB HIGH
 132:	82 b1       	in	r24, 0x02	; 2
 134:	89 60       	ori	r24, 0x09	; 9
 136:	82 b9       	out	0x02, r24	; 2
 138:	08 95       	ret

0000013a <left>:
/**
 * @brief      Function to make Firebird-V rotate left.
 */
void left (void) //Left wheel backward, Right wheel forward
{
  	motors_dir_port_reg &=  ~( (1 << motors_RB_pin) | (1 << motors_LF_pin) );	// Make LF and RB LOW
 13a:	82 b1       	in	r24, 0x02	; 2
 13c:	85 7f       	andi	r24, 0xF5	; 245
 13e:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_RF_pin) | (1 << motors_LB_pin) ;		// Make LB and RF HIGH
 140:	82 b1       	in	r24, 0x02	; 2
 142:	85 60       	ori	r24, 0x05	; 5
 144:	82 b9       	out	0x02, r24	; 2
 146:	08 95       	ret

00000148 <right>:
/**
 * @brief      Function to make Firebird-V rotate right.
 */
void right (void) //Left wheel forward, Right wheel backward
{
  	motors_dir_port_reg &=  ~( (1 << motors_LB_pin) | (1 << motors_RF_pin) );	// Make LB and RF LOW
 148:	82 b1       	in	r24, 0x02	; 2
 14a:	8a 7f       	andi	r24, 0xFA	; 250
 14c:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_LF_pin) | (1 << motors_RB_pin) ;		// Make LF and RB HIGH
 14e:	82 b1       	in	r24, 0x02	; 2
 150:	8a 60       	ori	r24, 0x0A	; 10
 152:	82 b9       	out	0x02, r24	; 2
 154:	08 95       	ret

00000156 <soft_left>:
/**
 * @brief      Function to make Firebird-V rotate soft left.
 */
void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motors_dir_port_reg &=  ~( (1 << motors_LB_pin) | (1 << motors_RF_pin) | (1 << motors_LF_pin));	// Make LF, LB and RF LOW
 156:	82 b1       	in	r24, 0x02	; 2
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_RF_pin) ;	// Make RF HIGH
 15c:	12 9a       	sbi	0x02, 2	; 2
 15e:	08 95       	ret

00000160 <soft_right>:
/**
 * @brief      Function to make Firebird-V rotate soft right.
 */
void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 	motors_dir_port_reg &=  ~( (1 << motors_LB_pin) | (1 << motors_RF_pin) | (1 << motors_RB_pin));	// Make LB, RF and RB LOW
 160:	82 b1       	in	r24, 0x02	; 2
 162:	82 7f       	andi	r24, 0xF2	; 242
 164:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_LF_pin) ;	// Make LF HIGH
 166:	11 9a       	sbi	0x02, 1	; 2
 168:	08 95       	ret

0000016a <soft_left_2>:
/**
 * @brief      Function to make Firebird-V rotate backward left.
 */
void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 	motors_dir_port_reg &=  ~( (1 << motors_LF_pin) | (1 << motors_RF_pin) | (1 << motors_RB_pin));	// Make LF, RF and RB LOW
 16a:	82 b1       	in	r24, 0x02	; 2
 16c:	81 7f       	andi	r24, 0xF1	; 241
 16e:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_LB_pin) ;	// Make LB HIGH
 170:	10 9a       	sbi	0x02, 0	; 2
 172:	08 95       	ret

00000174 <soft_right_2>:
/**
 * @brief      Function to make Firebird-V rotate backward right.
 */
void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motors_dir_port_reg &=  ~( (1 << motors_LF_pin) | (1 << motors_RF_pin) | (1 << motors_LB_pin));	// Make LF, RF and LB LOW
 174:	82 b1       	in	r24, 0x02	; 2
 176:	88 7f       	andi	r24, 0xF8	; 248
 178:	82 b9       	out	0x02, r24	; 2
	motors_dir_port_reg |= (1 << motors_RB_pin) ;	// Make RB HIGH
 17a:	13 9a       	sbi	0x02, 3	; 2
 17c:	08 95       	ret

0000017e <stop>:
/**
 * @brief      Function to make Firebird-V stop.
 */
void stop (void)
{
  	motors_dir_port_reg &=  ~( (1 << motors_LF_pin) | (1 << motors_RF_pin) | (1 << motors_LB_pin) | (1 << motors_RB_pin));	// Make LF, RF, LB and RB LOW
 17e:	82 b1       	in	r24, 0x02	; 2
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	82 b9       	out	0x02, r24	; 2
 184:	08 95       	ret

00000186 <main>:
 * @details    First Initializes the Motor Driver pins on Firebird-V.
 * 			   then call different functions to move the robot using different motions.
 */
int main(void)
{
	motors_pin_config();
 186:	b9 df       	rcall	.-142    	; 0xfa <motors_pin_config>
	pwm_pin_config();
 188:	bf df       	rcall	.-130    	; 0x108 <pwm_pin_config>
	while(1)
	{
	
		forward();						//both wheels forward
 18a:	c9 df       	rcall	.-110    	; 0x11e <forward>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	9c e2       	ldi	r25, 0x2C	; 44
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0xc>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x16>
 19c:	00 00       	nop
		_delay_ms(1000);

		stop();
 19e:	ef df       	rcall	.-34     	; 0x17e <stop>
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	8f e7       	ldi	r24, 0x7F	; 127
 1a4:	96 e1       	ldi	r25, 0x16	; 22
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x20>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x2a>
 1b0:	00 00       	nop
		_delay_ms(500);
	
		back();							//both wheels backward
 1b2:	bc df       	rcall	.-136    	; 0x12c <back>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	9c e2       	ldi	r25, 0x2C	; 44
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x34>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x3e>
 1c4:	00 00       	nop
		_delay_ms(1000);

		stop();
 1c6:	db df       	rcall	.-74     	; 0x17e <stop>
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	8f e7       	ldi	r24, 0x7F	; 127
 1cc:	96 e1       	ldi	r25, 0x16	; 22
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x48>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x52>
 1d8:	00 00       	nop
		_delay_ms(500);
	
		left();							//Left wheel backward, Right wheel forward
 1da:	af df       	rcall	.-162    	; 0x13a <left>
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	9c e2       	ldi	r25, 0x2C	; 44
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x5c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x66>
 1ec:	00 00       	nop
		_delay_ms(1000);
	
		stop();
 1ee:	c7 df       	rcall	.-114    	; 0x17e <stop>
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	8f e7       	ldi	r24, 0x7F	; 127
 1f4:	96 e1       	ldi	r25, 0x16	; 22
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x70>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x7a>
 200:	00 00       	nop
		_delay_ms(500);
	
		right();						//Left wheel forward, Right wheel backward
 202:	a2 df       	rcall	.-188    	; 0x148 <right>
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	9c e2       	ldi	r25, 0x2C	; 44
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x84>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x8e>
 214:	00 00       	nop
		_delay_ms(1000);

		stop();
 216:	b3 df       	rcall	.-154    	; 0x17e <stop>
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	8f e7       	ldi	r24, 0x7F	; 127
 21c:	96 e1       	ldi	r25, 0x16	; 22
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x98>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0xa2>
 228:	00 00       	nop
		_delay_ms(500);

		soft_left();					//Left wheel stationary, Right wheel forward
 22a:	95 df       	rcall	.-214    	; 0x156 <soft_left>
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	9c e2       	ldi	r25, 0x2C	; 44
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0xac>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0xb6>
		_delay_ms(1000);
	
		stop();
 23c:	00 00       	nop
 23e:	9f df       	rcall	.-194    	; 0x17e <stop>
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	8f e7       	ldi	r24, 0x7F	; 127
 244:	96 e1       	ldi	r25, 0x16	; 22
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0xc0>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0xca>
		_delay_ms(500);

		soft_right();					//Left wheel forward, Right wheel is stationary
 250:	00 00       	nop
 252:	86 df       	rcall	.-244    	; 0x160 <soft_right>
 254:	2f ef       	ldi	r18, 0xFF	; 255
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	9c e2       	ldi	r25, 0x2C	; 44
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0xd4>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0xde>
		_delay_ms(1000);

		stop();
 264:	00 00       	nop
 266:	8b df       	rcall	.-234    	; 0x17e <stop>
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	96 e1       	ldi	r25, 0x16	; 22
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0xe8>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0xf2>
		_delay_ms(500);

		soft_left_2();					//Left wheel backward, right wheel stationary
 278:	00 00       	nop
 27a:	77 df       	rcall	.-274    	; 0x16a <soft_left_2>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	9c e2       	ldi	r25, 0x2C	; 44
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0xfc>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x106>
		_delay_ms(1000);

		stop();
 28c:	00 00       	nop
 28e:	77 df       	rcall	.-274    	; 0x17e <stop>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	8f e7       	ldi	r24, 0x7F	; 127
 294:	96 e1       	ldi	r25, 0x16	; 22
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x110>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x11a>
		_delay_ms(500);

		soft_right_2();					//Left wheel stationary, Right wheel backward
 2a0:	00 00       	nop
 2a2:	68 df       	rcall	.-304    	; 0x174 <soft_right_2>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	9c e2       	ldi	r25, 0x2C	; 44
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x124>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x12e>
 2b4:	00 00       	nop
		_delay_ms(1000);

		stop();
 2b6:	63 df       	rcall	.-314    	; 0x17e <stop>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	9c e2       	ldi	r25, 0x2C	; 44
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x138>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x142>
 2c8:	00 00       	nop
 2ca:	5f cf       	rjmp	.-322    	; 0x18a <main+0x4>

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
