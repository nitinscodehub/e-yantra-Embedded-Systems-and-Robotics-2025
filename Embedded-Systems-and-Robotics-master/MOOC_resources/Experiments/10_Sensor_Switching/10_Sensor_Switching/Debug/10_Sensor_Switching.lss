
10_Sensor_Switching.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb1  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c30  00000000  00000000  000012dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000497  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000677  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f1  00000000  00000000  00002acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	30 d0       	rcall	.+96     	; 0x156 <main>
  f6:	81 c0       	rjmp	.+258    	; 0x1fa <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <sensors_control_pins_config>:
 * @brief      Function to configure the sensor control pins, i.e. of MOSFET switches as output
 */
void sensors_control_pins_config (void) {

	// Configure the control pin of 3 White Line Sensors
	wl_pwr_ctrl_ddr_reg			|= ( 1 << wl_pwr_ctrl_pin );
  fa:	9a 9a       	sbi	0x13, 2	; 19
	
	// Configure the control pin of all Sharp Sensors
	sharp_pwr_ctrl_ddr_reg		|= ( 1 << sharp_pwr_ctrl_pin );
  fc:	e1 e0       	ldi	r30, 0x01	; 1
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	80 81       	ld	r24, Z
 102:	88 60       	ori	r24, 0x08	; 8
 104:	80 83       	st	Z, r24
	
	// Configure the control pin of all 8 IR Proximity Sensors
	ir_prox_pwr_ctrl_ddr_reg	|= ( 1 << ir_prox_pwr_ctrl_pin );
 106:	80 81       	ld	r24, Z
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <turn_on_wl_sensors>:
 * @brief      Function to turn ON 3 White Line Sensors
 */
void turn_on_wl_sensors (void) {

	// Turn ON the control pin of 3 White Line Sensors
	wl_pwr_ctrl_port_reg	&= ~( 1 << wl_pwr_ctrl_pin );
 10e:	a2 98       	cbi	0x14, 2	; 20
 110:	08 95       	ret

00000112 <turn_off_wl_sensors>:
 * @brief      Function to turn OFF 3 White Line Sensors
 */
void turn_off_wl_sensors (void) {

	// Turn OFF the control pin of 3 White Line Sensors
	wl_pwr_ctrl_port_reg	|= ( 1 << wl_pwr_ctrl_pin );
 112:	a2 9a       	sbi	0x14, 2	; 20
 114:	08 95       	ret

00000116 <turn_on_sharp_sensors>:
 * @brief      Function to turn ON all Sharp Sensors
 */
void turn_on_sharp_sensors (void) {

	// Turn ON the control pin of all Sharp Sensors
	sharp_pwr_ctrl_port_reg		&= ~( 1 << sharp_pwr_ctrl_pin );
 116:	e2 e0       	ldi	r30, 0x02	; 2
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	80 81       	ld	r24, Z
 11c:	87 7f       	andi	r24, 0xF7	; 247
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <turn_off_sharp_sensors>:
 * @brief      Function to turn OFF all Sharp Sensors
 */
void turn_off_sharp_sensors (void) {
	
	// Turn OFF the control pin of all Sharp Sensors
	sharp_pwr_ctrl_port_reg		|= ( 1 << sharp_pwr_ctrl_pin );
 122:	e2 e0       	ldi	r30, 0x02	; 2
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	80 81       	ld	r24, Z
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	80 83       	st	Z, r24
 12c:	08 95       	ret

0000012e <turn_on_ir_proxy_sensors>:
 * @brief      Function to turn ON all IR Proximity Sensors
 */
void turn_on_ir_proxy_sensors (void) {

	// Turn ON the control pin of all IR Proximity Sensors
	ir_prox_pwr_ctrl_port_reg	&= ~( 1 << ir_prox_pwr_ctrl_pin );
 12e:	e2 e0       	ldi	r30, 0x02	; 2
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	80 81       	ld	r24, Z
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <turn_off_ir_proxy_sensors>:
 * @brief      Function to turn OFF all IR Proximity Sensors
 */
void turn_off_ir_proxy_sensors (void) {

	// Turn OFF the control pin of all IR Proximity Sensors
	ir_prox_pwr_ctrl_port_reg	|= ( 1 << ir_prox_pwr_ctrl_pin );
 13a:	e2 e0       	ldi	r30, 0x02	; 2
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	80 81       	ld	r24, Z
 140:	84 60       	ori	r24, 0x04	; 4
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <turn_on_all_sensors>:
 * @brief      Function to turn ON all the sensors by turning ON the respective MOSFET switches
 */
void turn_on_all_sensors (void) {
	
	// Turn ON the control pin of 3 White Line Sensors
	turn_on_wl_sensors();
 146:	e3 df       	rcall	.-58     	; 0x10e <turn_on_wl_sensors>
	
	// Turn ON the control pin of all Sharp Sensors
	turn_on_sharp_sensors();
 148:	e6 df       	rcall	.-52     	; 0x116 <turn_on_sharp_sensors>
	
	// Turn ON the control pin of all IR Proximity Sensors
	turn_on_ir_proxy_sensors();
 14a:	f1 cf       	rjmp	.-30     	; 0x12e <turn_on_ir_proxy_sensors>
 14c:	08 95       	ret

0000014e <turn_off_all_sensors>:
 14e:	e1 df       	rcall	.-62     	; 0x112 <turn_off_wl_sensors>
	
	// Turn OFF the control pin of 3 White Line Sensors
	turn_off_wl_sensors();
	
	// Turn OFF the control pin of all Sharp Sensors
	turn_off_sharp_sensors();
 150:	e8 df       	rcall	.-48     	; 0x122 <turn_off_sharp_sensors>
	
	// Turn OFF the control pin of all IR Proximity Sensors
	turn_off_ir_proxy_sensors();
 152:	f3 cf       	rjmp	.-26     	; 0x13a <turn_off_ir_proxy_sensors>
 154:	08 95       	ret

00000156 <main>:
 156:	d1 df       	rcall	.-94     	; 0xfa <sensors_control_pins_config>
		
	sensors_control_pins_config();		// Initialize the sensor control pins, i.e. of MOSFET switches as output
	
	while (1) {

		turn_off_all_sensors();			// Turn OFF all the sensors by turning OFF the respective MOSFET switches
 158:	fa df       	rcall	.-12     	; 0x14e <turn_off_all_sensors>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	9c e2       	ldi	r25, 0x2C	; 44
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xa>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x14>
 16a:	00 00       	nop
		_delay_ms(1000);
		
		turn_on_wl_sensors();			// Turn ON 3 White Line Sensors
 16c:	d0 df       	rcall	.-96     	; 0x10e <turn_on_wl_sensors>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9c e2       	ldi	r25, 0x2C	; 44
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x1e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x28>
 17e:	00 00       	nop
		_delay_ms(1000);
		
		turn_off_wl_sensors();			// Turn OFF 3 White Line Sensors
 180:	c8 df       	rcall	.-112    	; 0x112 <turn_off_wl_sensors>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	9c e2       	ldi	r25, 0x2C	; 44
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x32>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x3c>
 192:	00 00       	nop
		_delay_ms(1000);
		
		turn_on_sharp_sensors();		// Turn ON Sharp Sensors
 194:	c0 df       	rcall	.-128    	; 0x116 <turn_on_sharp_sensors>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	9c e2       	ldi	r25, 0x2C	; 44
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x46>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x50>
 1a6:	00 00       	nop
		_delay_ms(1000);
		
		turn_off_sharp_sensors();		// Turn OFF Sharp Sensors
 1a8:	bc df       	rcall	.-136    	; 0x122 <turn_off_sharp_sensors>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	9c e2       	ldi	r25, 0x2C	; 44
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x5a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x64>
 1ba:	00 00       	nop
		_delay_ms(1000);
		
		turn_on_ir_proxy_sensors();		// Turn ON IR Proximity Sensors
 1bc:	b8 df       	rcall	.-144    	; 0x12e <turn_on_ir_proxy_sensors>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	9c e2       	ldi	r25, 0x2C	; 44
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0x6e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x78>
 1ce:	00 00       	nop
		_delay_ms(1000);
		
		turn_off_ir_proxy_sensors();	// Turn OFF IR Proximity Sensors
 1d0:	b4 df       	rcall	.-152    	; 0x13a <turn_off_ir_proxy_sensors>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	9c e2       	ldi	r25, 0x2C	; 44
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x82>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x8c>
 1e2:	00 00       	nop
		_delay_ms(1000);
		
		turn_on_all_sensors();			// Turn ON all the sensors by turning ON the respective MOSFET switches
 1e4:	b0 df       	rcall	.-160    	; 0x146 <turn_on_all_sensors>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	8f ef       	ldi	r24, 0xFF	; 255
 1ea:	9c e2       	ldi	r25, 0x2C	; 44
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x96>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0xa0>
 1f6:	00 00       	nop
 1f8:	af cf       	rjmp	.-162    	; 0x158 <main+0x2>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
